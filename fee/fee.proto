syntax = "proto3";
package fee;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

message Fee {
  string fee_id = 1;
  repeated FeesInfo fees_info = 2;
  repeated TaxesInfo taxes_info = 3;
  repeated Commission commissions = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  AdminInfo created_by = 7;
}

message AdminInfo {
  string user_uid = 1;
  string name = 2;
}

message FeesInfo{
  string key = 1;
  string types = 2;
  double value_nominal = 3;
  double value_percentage = 4;
  Tax tax = 5;
  bool is_active = 6;
  string charge_to = 7;
  bool mark_up = 8;
}

message Tax{
  double value = 1;
  bool is_active = 2;
}

message TaxesInfo{
  string key = 1;
  double value_npwp = 2;
  double value_no_npwp = 3;
  bool is_active = 4;
  string charge_to = 5;
  bool mark_up = 6;
}

message Commission{
  string types = 1;
  double value_nominal = 2;
  double value_percentage = 3;
  bool is_active = 4;
  string charge_to = 5;
  bool mark_up = 6;
}

message FeeResponse{
  string title = 1;
  int32 code = 2;
  Fee data = 3;
}

message RequestFee{
  string param = 1;
  string filter = 2;
  string key = 3;
  string fee_id = 4;
  string fee_name = 5;
}

message ResponseFeeList{
  string title = 1;
  int32 code = 2;
  repeated Fee data = 3;
}

message FeeDeleteResponse{
  string title = 1;
  int32 code = 2;
}

message RequestCalculate{
  string order_id = 1;
  int32 addon_price = 2;
  int32 amount_dp = 3;
  int32 admin_fee = 4;
  double percentage_dp = 5;
}

message ResponseCalculate{
  int32 total_tax = 1;
  int32 amount = 2;
}

service FeeService{
  rpc AddFee (Fee) returns (FeeResponse) {
    option (google.api.http) = {
      post : "/api/v1/fees/administrators",
      body : "*"
    };
  }

  rpc EditFee (Fee) returns (FeeResponse) {
    option (google.api.http) = {
      patch : "/api/v1/fees/{fee_id}/administrators",
      body : "*"
    };
  }

  rpc DetailFee (Fee) returns (FeeResponse) {
    option (google.api.http) = {
      get : "/api/v1/fees/{fee_id}/administrators"
    };
  }

  rpc DeleteFee (Fee) returns (FeeDeleteResponse) {
    option (google.api.http) = {
      delete : "/api/v1/fees/{fee_id}/administrators"
    };
  }

  rpc ListFee (RequestFee) returns (ResponseFeeList) {
    option (google.api.http) = {
      get : "/api/v1/fees/list-administrators"
    };
  }

  rpc GetFeeByName(RequestFee) returns (FeeResponse){
    option (google.api.http) = {
      get : "/api/v1/fees/fee-name/{fee_name}/users"
    };
  }

  //this endpoint only use for get fees by fee names
  rpc GetFee(RequestFee) returns (FeeResponse);

  //this endpoint only use for get fees calculation result 
  rpc CalculateFullPayment (RequestCalculate) returns (ResponseCalculate);
  //"/api/v1/fees/testing/calculator"

}