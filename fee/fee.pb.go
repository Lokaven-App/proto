// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.1
// source: fee.proto

package fee

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Fee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeeId       string                 `protobuf:"bytes,1,opt,name=fee_id,json=feeId,proto3" json:"fee_id,omitempty"`
	FeesInfo    []*FeesInfo            `protobuf:"bytes,2,rep,name=fees_info,json=feesInfo,proto3" json:"fees_info,omitempty"`
	TaxesInfo   []*TaxesInfo           `protobuf:"bytes,3,rep,name=taxes_info,json=taxesInfo,proto3" json:"taxes_info,omitempty"`
	Commissions []*Commission          `protobuf:"bytes,4,rep,name=commissions,proto3" json:"commissions,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedBy   *AdminInfo             `protobuf:"bytes,7,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
}

func (x *Fee) Reset() {
	*x = Fee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fee) ProtoMessage() {}

func (x *Fee) ProtoReflect() protoreflect.Message {
	mi := &file_fee_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fee.ProtoReflect.Descriptor instead.
func (*Fee) Descriptor() ([]byte, []int) {
	return file_fee_proto_rawDescGZIP(), []int{0}
}

func (x *Fee) GetFeeId() string {
	if x != nil {
		return x.FeeId
	}
	return ""
}

func (x *Fee) GetFeesInfo() []*FeesInfo {
	if x != nil {
		return x.FeesInfo
	}
	return nil
}

func (x *Fee) GetTaxesInfo() []*TaxesInfo {
	if x != nil {
		return x.TaxesInfo
	}
	return nil
}

func (x *Fee) GetCommissions() []*Commission {
	if x != nil {
		return x.Commissions
	}
	return nil
}

func (x *Fee) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Fee) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Fee) GetCreatedBy() *AdminInfo {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

type AdminInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUid string `protobuf:"bytes,1,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AdminInfo) Reset() {
	*x = AdminInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminInfo) ProtoMessage() {}

func (x *AdminInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fee_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminInfo.ProtoReflect.Descriptor instead.
func (*AdminInfo) Descriptor() ([]byte, []int) {
	return file_fee_proto_rawDescGZIP(), []int{1}
}

func (x *AdminInfo) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *AdminInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FeesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key             string  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Types           string  `protobuf:"bytes,2,opt,name=types,proto3" json:"types,omitempty"`
	ValueNominal    float64 `protobuf:"fixed64,3,opt,name=value_nominal,json=valueNominal,proto3" json:"value_nominal,omitempty"`
	ValuePercentage float64 `protobuf:"fixed64,4,opt,name=value_percentage,json=valuePercentage,proto3" json:"value_percentage,omitempty"`
	Tax             *Tax    `protobuf:"bytes,5,opt,name=tax,proto3" json:"tax,omitempty"`
	IsActive        bool    `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	ChargeTo        string  `protobuf:"bytes,7,opt,name=charge_to,json=chargeTo,proto3" json:"charge_to,omitempty"`
	MarkUp          bool    `protobuf:"varint,8,opt,name=mark_up,json=markUp,proto3" json:"mark_up,omitempty"`
}

func (x *FeesInfo) Reset() {
	*x = FeesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeesInfo) ProtoMessage() {}

func (x *FeesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fee_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeesInfo.ProtoReflect.Descriptor instead.
func (*FeesInfo) Descriptor() ([]byte, []int) {
	return file_fee_proto_rawDescGZIP(), []int{2}
}

func (x *FeesInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FeesInfo) GetTypes() string {
	if x != nil {
		return x.Types
	}
	return ""
}

func (x *FeesInfo) GetValueNominal() float64 {
	if x != nil {
		return x.ValueNominal
	}
	return 0
}

func (x *FeesInfo) GetValuePercentage() float64 {
	if x != nil {
		return x.ValuePercentage
	}
	return 0
}

func (x *FeesInfo) GetTax() *Tax {
	if x != nil {
		return x.Tax
	}
	return nil
}

func (x *FeesInfo) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *FeesInfo) GetChargeTo() string {
	if x != nil {
		return x.ChargeTo
	}
	return ""
}

func (x *FeesInfo) GetMarkUp() bool {
	if x != nil {
		return x.MarkUp
	}
	return false
}

type Tax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	IsActive bool    `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *Tax) Reset() {
	*x = Tax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tax) ProtoMessage() {}

func (x *Tax) ProtoReflect() protoreflect.Message {
	mi := &file_fee_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tax.ProtoReflect.Descriptor instead.
func (*Tax) Descriptor() ([]byte, []int) {
	return file_fee_proto_rawDescGZIP(), []int{3}
}

func (x *Tax) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Tax) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type TaxesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ValueNpwp   float64 `protobuf:"fixed64,2,opt,name=value_npwp,json=valueNpwp,proto3" json:"value_npwp,omitempty"`
	ValueNoNpwp float64 `protobuf:"fixed64,3,opt,name=value_no_npwp,json=valueNoNpwp,proto3" json:"value_no_npwp,omitempty"`
	IsActive    bool    `protobuf:"varint,4,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	ChargeTo    string  `protobuf:"bytes,5,opt,name=charge_to,json=chargeTo,proto3" json:"charge_to,omitempty"`
	MarkUp      bool    `protobuf:"varint,6,opt,name=mark_up,json=markUp,proto3" json:"mark_up,omitempty"`
}

func (x *TaxesInfo) Reset() {
	*x = TaxesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxesInfo) ProtoMessage() {}

func (x *TaxesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fee_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxesInfo.ProtoReflect.Descriptor instead.
func (*TaxesInfo) Descriptor() ([]byte, []int) {
	return file_fee_proto_rawDescGZIP(), []int{4}
}

func (x *TaxesInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TaxesInfo) GetValueNpwp() float64 {
	if x != nil {
		return x.ValueNpwp
	}
	return 0
}

func (x *TaxesInfo) GetValueNoNpwp() float64 {
	if x != nil {
		return x.ValueNoNpwp
	}
	return 0
}

func (x *TaxesInfo) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *TaxesInfo) GetChargeTo() string {
	if x != nil {
		return x.ChargeTo
	}
	return ""
}

func (x *TaxesInfo) GetMarkUp() bool {
	if x != nil {
		return x.MarkUp
	}
	return false
}

type Commission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types           string  `protobuf:"bytes,1,opt,name=types,proto3" json:"types,omitempty"`
	ValueNominal    float64 `protobuf:"fixed64,2,opt,name=value_nominal,json=valueNominal,proto3" json:"value_nominal,omitempty"`
	ValuePercentage float64 `protobuf:"fixed64,3,opt,name=value_percentage,json=valuePercentage,proto3" json:"value_percentage,omitempty"`
	IsActive        bool    `protobuf:"varint,4,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	ChargeTo        string  `protobuf:"bytes,5,opt,name=charge_to,json=chargeTo,proto3" json:"charge_to,omitempty"`
	MarkUp          bool    `protobuf:"varint,6,opt,name=mark_up,json=markUp,proto3" json:"mark_up,omitempty"`
}

func (x *Commission) Reset() {
	*x = Commission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commission) ProtoMessage() {}

func (x *Commission) ProtoReflect() protoreflect.Message {
	mi := &file_fee_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commission.ProtoReflect.Descriptor instead.
func (*Commission) Descriptor() ([]byte, []int) {
	return file_fee_proto_rawDescGZIP(), []int{5}
}

func (x *Commission) GetTypes() string {
	if x != nil {
		return x.Types
	}
	return ""
}

func (x *Commission) GetValueNominal() float64 {
	if x != nil {
		return x.ValueNominal
	}
	return 0
}

func (x *Commission) GetValuePercentage() float64 {
	if x != nil {
		return x.ValuePercentage
	}
	return 0
}

func (x *Commission) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Commission) GetChargeTo() string {
	if x != nil {
		return x.ChargeTo
	}
	return ""
}

func (x *Commission) GetMarkUp() bool {
	if x != nil {
		return x.MarkUp
	}
	return false
}

type FeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Code  int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Data  *Fee   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FeeResponse) Reset() {
	*x = FeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeResponse) ProtoMessage() {}

func (x *FeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fee_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeResponse.ProtoReflect.Descriptor instead.
func (*FeeResponse) Descriptor() ([]byte, []int) {
	return file_fee_proto_rawDescGZIP(), []int{6}
}

func (x *FeeResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FeeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FeeResponse) GetData() *Fee {
	if x != nil {
		return x.Data
	}
	return nil
}

type RequestFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param   string `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
	Filter  string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	Key     string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	FeeId   string `protobuf:"bytes,4,opt,name=fee_id,json=feeId,proto3" json:"fee_id,omitempty"`
	FeeName string `protobuf:"bytes,5,opt,name=fee_name,json=feeName,proto3" json:"fee_name,omitempty"`
}

func (x *RequestFee) Reset() {
	*x = RequestFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestFee) ProtoMessage() {}

func (x *RequestFee) ProtoReflect() protoreflect.Message {
	mi := &file_fee_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestFee.ProtoReflect.Descriptor instead.
func (*RequestFee) Descriptor() ([]byte, []int) {
	return file_fee_proto_rawDescGZIP(), []int{7}
}

func (x *RequestFee) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *RequestFee) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *RequestFee) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RequestFee) GetFeeId() string {
	if x != nil {
		return x.FeeId
	}
	return ""
}

func (x *RequestFee) GetFeeName() string {
	if x != nil {
		return x.FeeName
	}
	return ""
}

type ResponseFeeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Code  int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Data  []*Fee `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseFeeList) Reset() {
	*x = ResponseFeeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseFeeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFeeList) ProtoMessage() {}

func (x *ResponseFeeList) ProtoReflect() protoreflect.Message {
	mi := &file_fee_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFeeList.ProtoReflect.Descriptor instead.
func (*ResponseFeeList) Descriptor() ([]byte, []int) {
	return file_fee_proto_rawDescGZIP(), []int{8}
}

func (x *ResponseFeeList) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseFeeList) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseFeeList) GetData() []*Fee {
	if x != nil {
		return x.Data
	}
	return nil
}

type FeeDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Code  int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *FeeDeleteResponse) Reset() {
	*x = FeeDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeDeleteResponse) ProtoMessage() {}

func (x *FeeDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fee_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeDeleteResponse.ProtoReflect.Descriptor instead.
func (*FeeDeleteResponse) Descriptor() ([]byte, []int) {
	return file_fee_proto_rawDescGZIP(), []int{9}
}

func (x *FeeDeleteResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FeeDeleteResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type RequestCalculate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId    string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	AddonPrice int32  `protobuf:"varint,2,opt,name=addon_price,json=addonPrice,proto3" json:"addon_price,omitempty"`
	AmountDp   int32  `protobuf:"varint,3,opt,name=amount_dp,json=amountDp,proto3" json:"amount_dp,omitempty"`
	AdminFee   int32  `protobuf:"varint,4,opt,name=admin_fee,json=adminFee,proto3" json:"admin_fee,omitempty"`
}

func (x *RequestCalculate) Reset() {
	*x = RequestCalculate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCalculate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCalculate) ProtoMessage() {}

func (x *RequestCalculate) ProtoReflect() protoreflect.Message {
	mi := &file_fee_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCalculate.ProtoReflect.Descriptor instead.
func (*RequestCalculate) Descriptor() ([]byte, []int) {
	return file_fee_proto_rawDescGZIP(), []int{10}
}

func (x *RequestCalculate) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *RequestCalculate) GetAddonPrice() int32 {
	if x != nil {
		return x.AddonPrice
	}
	return 0
}

func (x *RequestCalculate) GetAmountDp() int32 {
	if x != nil {
		return x.AmountDp
	}
	return 0
}

func (x *RequestCalculate) GetAdminFee() int32 {
	if x != nil {
		return x.AdminFee
	}
	return 0
}

type ResponseCalculate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalTax int32 `protobuf:"varint,1,opt,name=total_tax,json=totalTax,proto3" json:"total_tax,omitempty"`
	Amount   int32 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ResponseCalculate) Reset() {
	*x = ResponseCalculate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fee_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseCalculate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseCalculate) ProtoMessage() {}

func (x *ResponseCalculate) ProtoReflect() protoreflect.Message {
	mi := &file_fee_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseCalculate.ProtoReflect.Descriptor instead.
func (*ResponseCalculate) Descriptor() ([]byte, []int) {
	return file_fee_proto_rawDescGZIP(), []int{11}
}

func (x *ResponseCalculate) GetTotalTax() int32 {
	if x != nil {
		return x.TotalTax
	}
	return 0
}

func (x *ResponseCalculate) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

var File_fee_proto protoreflect.FileDescriptor

var file_fee_proto_rawDesc = []byte{
	0x0a, 0x09, 0x66, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x66, 0x65, 0x65,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xcf, 0x02, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x65, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x65, 0x65, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x09, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x66, 0x65, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x0a, 0x74, 0x61,
	0x78, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x66, 0x65, 0x65, 0x2e, 0x54, 0x61, 0x78, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x74, 0x61, 0x78, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x66, 0x65, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x22, 0x3a, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf1, 0x01,
	0x0a, 0x08, 0x46, 0x65, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x54, 0x61, 0x78, 0x52, 0x03, 0x74, 0x61, 0x78, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x55,
	0x70, 0x22, 0x38, 0x0a, 0x03, 0x54, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x09,
	0x54, 0x61, 0x78, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x70, 0x77, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x70, 0x77, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x6e, 0x70, 0x77, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x6f, 0x4e, 0x70, 0x77, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x55,
	0x70, 0x22, 0xc5, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x6f,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x55, 0x70, 0x22, 0x55, 0x0a, 0x0b, 0x46, 0x65, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x7e, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x65, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x15,
	0x0a, 0x06, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x65, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x59, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x65, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x66, 0x65,
	0x65, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x11, 0x46,
	0x65, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x10, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x46, 0x65, 0x65, 0x22, 0x48, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x32,
	0x99, 0x05, 0x0a, 0x0a, 0x46, 0x65, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c,
	0x0a, 0x06, 0x41, 0x64, 0x64, 0x46, 0x65, 0x65, 0x12, 0x08, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46,
	0x65, 0x65, 0x1a, 0x10, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x56, 0x0a, 0x07,
	0x45, 0x64, 0x69, 0x74, 0x46, 0x65, 0x65, 0x12, 0x08, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46, 0x65,
	0x65, 0x1a, 0x10, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x32, 0x24, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x65, 0x73, 0x2f, 0x7b, 0x66, 0x65, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0x55, 0x0a, 0x09, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x46, 0x65,
	0x65, 0x12, 0x08, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x1a, 0x10, 0x2e, 0x66, 0x65,
	0x65, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x65, 0x65, 0x73, 0x2f, 0x7b, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x09, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x65, 0x12, 0x08, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46,
	0x65, 0x65, 0x1a, 0x16, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x26, 0x2a, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x65, 0x73,
	0x2f, 0x7b, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x65, 0x65, 0x12, 0x0f, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x65, 0x65, 0x1a, 0x14, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x46, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x65, 0x73,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x61, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0f, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x46, 0x65, 0x65, 0x1a, 0x10, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12,
	0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x65, 0x73, 0x2f, 0x66, 0x65,
	0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x66, 0x65, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x46, 0x65,
	0x65, 0x12, 0x0f, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46,
	0x65, 0x65, 0x1a, 0x10, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x14, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x46, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x2e, 0x66,
	0x65, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_fee_proto_rawDescOnce sync.Once
	file_fee_proto_rawDescData = file_fee_proto_rawDesc
)

func file_fee_proto_rawDescGZIP() []byte {
	file_fee_proto_rawDescOnce.Do(func() {
		file_fee_proto_rawDescData = protoimpl.X.CompressGZIP(file_fee_proto_rawDescData)
	})
	return file_fee_proto_rawDescData
}

var file_fee_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_fee_proto_goTypes = []interface{}{
	(*Fee)(nil),                   // 0: fee.Fee
	(*AdminInfo)(nil),             // 1: fee.AdminInfo
	(*FeesInfo)(nil),              // 2: fee.FeesInfo
	(*Tax)(nil),                   // 3: fee.Tax
	(*TaxesInfo)(nil),             // 4: fee.TaxesInfo
	(*Commission)(nil),            // 5: fee.Commission
	(*FeeResponse)(nil),           // 6: fee.FeeResponse
	(*RequestFee)(nil),            // 7: fee.RequestFee
	(*ResponseFeeList)(nil),       // 8: fee.ResponseFeeList
	(*FeeDeleteResponse)(nil),     // 9: fee.FeeDeleteResponse
	(*RequestCalculate)(nil),      // 10: fee.RequestCalculate
	(*ResponseCalculate)(nil),     // 11: fee.ResponseCalculate
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
}
var file_fee_proto_depIdxs = []int32{
	2,  // 0: fee.Fee.fees_info:type_name -> fee.FeesInfo
	4,  // 1: fee.Fee.taxes_info:type_name -> fee.TaxesInfo
	5,  // 2: fee.Fee.commissions:type_name -> fee.Commission
	12, // 3: fee.Fee.created_at:type_name -> google.protobuf.Timestamp
	12, // 4: fee.Fee.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 5: fee.Fee.created_by:type_name -> fee.AdminInfo
	3,  // 6: fee.FeesInfo.tax:type_name -> fee.Tax
	0,  // 7: fee.FeeResponse.data:type_name -> fee.Fee
	0,  // 8: fee.ResponseFeeList.data:type_name -> fee.Fee
	0,  // 9: fee.FeeService.AddFee:input_type -> fee.Fee
	0,  // 10: fee.FeeService.EditFee:input_type -> fee.Fee
	0,  // 11: fee.FeeService.DetailFee:input_type -> fee.Fee
	0,  // 12: fee.FeeService.DeleteFee:input_type -> fee.Fee
	7,  // 13: fee.FeeService.ListFee:input_type -> fee.RequestFee
	7,  // 14: fee.FeeService.GetFeeByName:input_type -> fee.RequestFee
	7,  // 15: fee.FeeService.GetFee:input_type -> fee.RequestFee
	10, // 16: fee.FeeService.CalculateFullPayment:input_type -> fee.RequestCalculate
	6,  // 17: fee.FeeService.AddFee:output_type -> fee.FeeResponse
	6,  // 18: fee.FeeService.EditFee:output_type -> fee.FeeResponse
	6,  // 19: fee.FeeService.DetailFee:output_type -> fee.FeeResponse
	9,  // 20: fee.FeeService.DeleteFee:output_type -> fee.FeeDeleteResponse
	8,  // 21: fee.FeeService.ListFee:output_type -> fee.ResponseFeeList
	6,  // 22: fee.FeeService.GetFeeByName:output_type -> fee.FeeResponse
	6,  // 23: fee.FeeService.GetFee:output_type -> fee.FeeResponse
	11, // 24: fee.FeeService.CalculateFullPayment:output_type -> fee.ResponseCalculate
	17, // [17:25] is the sub-list for method output_type
	9,  // [9:17] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_fee_proto_init() }
func file_fee_proto_init() {
	if File_fee_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fee_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaxesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseFeeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCalculate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fee_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseCalculate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fee_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fee_proto_goTypes,
		DependencyIndexes: file_fee_proto_depIdxs,
		MessageInfos:      file_fee_proto_msgTypes,
	}.Build()
	File_fee_proto = out.File
	file_fee_proto_rawDesc = nil
	file_fee_proto_goTypes = nil
	file_fee_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FeeServiceClient is the client API for FeeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FeeServiceClient interface {
	AddFee(ctx context.Context, in *Fee, opts ...grpc.CallOption) (*FeeResponse, error)
	EditFee(ctx context.Context, in *Fee, opts ...grpc.CallOption) (*FeeResponse, error)
	DetailFee(ctx context.Context, in *Fee, opts ...grpc.CallOption) (*FeeResponse, error)
	DeleteFee(ctx context.Context, in *Fee, opts ...grpc.CallOption) (*FeeDeleteResponse, error)
	ListFee(ctx context.Context, in *RequestFee, opts ...grpc.CallOption) (*ResponseFeeList, error)
	GetFeeByName(ctx context.Context, in *RequestFee, opts ...grpc.CallOption) (*FeeResponse, error)
	//this endpoint only use for get fees by fee names
	GetFee(ctx context.Context, in *RequestFee, opts ...grpc.CallOption) (*FeeResponse, error)
	//this endpoint only use for get fees calculation result
	CalculateFullPayment(ctx context.Context, in *RequestCalculate, opts ...grpc.CallOption) (*ResponseCalculate, error)
}

type feeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeeServiceClient(cc grpc.ClientConnInterface) FeeServiceClient {
	return &feeServiceClient{cc}
}

func (c *feeServiceClient) AddFee(ctx context.Context, in *Fee, opts ...grpc.CallOption) (*FeeResponse, error) {
	out := new(FeeResponse)
	err := c.cc.Invoke(ctx, "/fee.FeeService/AddFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feeServiceClient) EditFee(ctx context.Context, in *Fee, opts ...grpc.CallOption) (*FeeResponse, error) {
	out := new(FeeResponse)
	err := c.cc.Invoke(ctx, "/fee.FeeService/EditFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feeServiceClient) DetailFee(ctx context.Context, in *Fee, opts ...grpc.CallOption) (*FeeResponse, error) {
	out := new(FeeResponse)
	err := c.cc.Invoke(ctx, "/fee.FeeService/DetailFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feeServiceClient) DeleteFee(ctx context.Context, in *Fee, opts ...grpc.CallOption) (*FeeDeleteResponse, error) {
	out := new(FeeDeleteResponse)
	err := c.cc.Invoke(ctx, "/fee.FeeService/DeleteFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feeServiceClient) ListFee(ctx context.Context, in *RequestFee, opts ...grpc.CallOption) (*ResponseFeeList, error) {
	out := new(ResponseFeeList)
	err := c.cc.Invoke(ctx, "/fee.FeeService/ListFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feeServiceClient) GetFeeByName(ctx context.Context, in *RequestFee, opts ...grpc.CallOption) (*FeeResponse, error) {
	out := new(FeeResponse)
	err := c.cc.Invoke(ctx, "/fee.FeeService/GetFeeByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feeServiceClient) GetFee(ctx context.Context, in *RequestFee, opts ...grpc.CallOption) (*FeeResponse, error) {
	out := new(FeeResponse)
	err := c.cc.Invoke(ctx, "/fee.FeeService/GetFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feeServiceClient) CalculateFullPayment(ctx context.Context, in *RequestCalculate, opts ...grpc.CallOption) (*ResponseCalculate, error) {
	out := new(ResponseCalculate)
	err := c.cc.Invoke(ctx, "/fee.FeeService/CalculateFullPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeeServiceServer is the server API for FeeService service.
type FeeServiceServer interface {
	AddFee(context.Context, *Fee) (*FeeResponse, error)
	EditFee(context.Context, *Fee) (*FeeResponse, error)
	DetailFee(context.Context, *Fee) (*FeeResponse, error)
	DeleteFee(context.Context, *Fee) (*FeeDeleteResponse, error)
	ListFee(context.Context, *RequestFee) (*ResponseFeeList, error)
	GetFeeByName(context.Context, *RequestFee) (*FeeResponse, error)
	//this endpoint only use for get fees by fee names
	GetFee(context.Context, *RequestFee) (*FeeResponse, error)
	//this endpoint only use for get fees calculation result
	CalculateFullPayment(context.Context, *RequestCalculate) (*ResponseCalculate, error)
}

// UnimplementedFeeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFeeServiceServer struct {
}

func (*UnimplementedFeeServiceServer) AddFee(context.Context, *Fee) (*FeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFee not implemented")
}
func (*UnimplementedFeeServiceServer) EditFee(context.Context, *Fee) (*FeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditFee not implemented")
}
func (*UnimplementedFeeServiceServer) DetailFee(context.Context, *Fee) (*FeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailFee not implemented")
}
func (*UnimplementedFeeServiceServer) DeleteFee(context.Context, *Fee) (*FeeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFee not implemented")
}
func (*UnimplementedFeeServiceServer) ListFee(context.Context, *RequestFee) (*ResponseFeeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFee not implemented")
}
func (*UnimplementedFeeServiceServer) GetFeeByName(context.Context, *RequestFee) (*FeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeeByName not implemented")
}
func (*UnimplementedFeeServiceServer) GetFee(context.Context, *RequestFee) (*FeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFee not implemented")
}
func (*UnimplementedFeeServiceServer) CalculateFullPayment(context.Context, *RequestCalculate) (*ResponseCalculate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateFullPayment not implemented")
}

func RegisterFeeServiceServer(s *grpc.Server, srv FeeServiceServer) {
	s.RegisterService(&_FeeService_serviceDesc, srv)
}

func _FeeService_AddFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeeServiceServer).AddFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fee.FeeService/AddFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeeServiceServer).AddFee(ctx, req.(*Fee))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeeService_EditFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeeServiceServer).EditFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fee.FeeService/EditFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeeServiceServer).EditFee(ctx, req.(*Fee))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeeService_DetailFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeeServiceServer).DetailFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fee.FeeService/DetailFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeeServiceServer).DetailFee(ctx, req.(*Fee))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeeService_DeleteFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeeServiceServer).DeleteFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fee.FeeService/DeleteFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeeServiceServer).DeleteFee(ctx, req.(*Fee))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeeService_ListFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeeServiceServer).ListFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fee.FeeService/ListFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeeServiceServer).ListFee(ctx, req.(*RequestFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeeService_GetFeeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeeServiceServer).GetFeeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fee.FeeService/GetFeeByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeeServiceServer).GetFeeByName(ctx, req.(*RequestFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeeService_GetFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeeServiceServer).GetFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fee.FeeService/GetFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeeServiceServer).GetFee(ctx, req.(*RequestFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeeService_CalculateFullPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCalculate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeeServiceServer).CalculateFullPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fee.FeeService/CalculateFullPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeeServiceServer).CalculateFullPayment(ctx, req.(*RequestCalculate))
	}
	return interceptor(ctx, in, info, handler)
}

var _FeeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fee.FeeService",
	HandlerType: (*FeeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFee",
			Handler:    _FeeService_AddFee_Handler,
		},
		{
			MethodName: "EditFee",
			Handler:    _FeeService_EditFee_Handler,
		},
		{
			MethodName: "DetailFee",
			Handler:    _FeeService_DetailFee_Handler,
		},
		{
			MethodName: "DeleteFee",
			Handler:    _FeeService_DeleteFee_Handler,
		},
		{
			MethodName: "ListFee",
			Handler:    _FeeService_ListFee_Handler,
		},
		{
			MethodName: "GetFeeByName",
			Handler:    _FeeService_GetFeeByName_Handler,
		},
		{
			MethodName: "GetFee",
			Handler:    _FeeService_GetFee_Handler,
		},
		{
			MethodName: "CalculateFullPayment",
			Handler:    _FeeService_CalculateFullPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fee.proto",
}
