// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: pb/host.proto

package host

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type VerifiedStatus int32

const (
	VerifiedStatus_PENDING  VerifiedStatus = 0
	VerifiedStatus_ONREVIEW VerifiedStatus = 1
	VerifiedStatus_ACCEPTED VerifiedStatus = 2
	VerifiedStatus_REJECTED VerifiedStatus = 3
)

// Enum value maps for VerifiedStatus.
var (
	VerifiedStatus_name = map[int32]string{
		0: "PENDING",
		1: "ONREVIEW",
		2: "ACCEPTED",
		3: "REJECTED",
	}
	VerifiedStatus_value = map[string]int32{
		"PENDING":  0,
		"ONREVIEW": 1,
		"ACCEPTED": 2,
		"REJECTED": 3,
	}
)

func (x VerifiedStatus) Enum() *VerifiedStatus {
	p := new(VerifiedStatus)
	*p = x
	return p
}

func (x VerifiedStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerifiedStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_host_proto_enumTypes[0].Descriptor()
}

func (VerifiedStatus) Type() protoreflect.EnumType {
	return &file_pb_host_proto_enumTypes[0]
}

func (x VerifiedStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerifiedStatus.Descriptor instead.
func (VerifiedStatus) EnumDescriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{0}
}

type TourHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId            string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	FirstName         string                 `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName          string                 `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Gender            string                 `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`
	PhoneNumber       string                 `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	DateOfBirth       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	Password          string                 `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	ProfilePictureUrl string                 `protobuf:"bytes,8,opt,name=profile_picture_url,json=profilePictureUrl,proto3" json:"profile_picture_url,omitempty"`
	BusinessName      string                 `protobuf:"bytes,9,opt,name=business_name,json=businessName,proto3" json:"business_name,omitempty"`
	BusinessCategory  string                 `protobuf:"bytes,10,opt,name=business_category,json=businessCategory,proto3" json:"business_category,omitempty"`
	Address           string                 `protobuf:"bytes,11,opt,name=address,proto3" json:"address,omitempty"`
	BusinessAbout     string                 `protobuf:"bytes,12,opt,name=business_about,json=businessAbout,proto3" json:"business_about,omitempty"`
	CardIdType        string                 `protobuf:"bytes,13,opt,name=card_id_type,json=cardIdType,proto3" json:"card_id_type,omitempty"`
	CardId            string                 `protobuf:"bytes,14,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	PersonWithId      string                 `protobuf:"bytes,15,opt,name=person_with_id,json=personWithId,proto3" json:"person_with_id,omitempty"`
	BussinessIdType   string                 `protobuf:"bytes,16,opt,name=bussiness_id_type,json=bussinessIdType,proto3" json:"bussiness_id_type,omitempty"`
	BussinessId       string                 `protobuf:"bytes,17,opt,name=bussiness_id,json=bussinessId,proto3" json:"bussiness_id,omitempty"`
	IsVerified        bool                   `protobuf:"varint,18,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	AccountNumber     string                 `protobuf:"bytes,19,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	Balance           string                 `protobuf:"bytes,20,opt,name=balance,proto3" json:"balance,omitempty"`
	UserUid           string                 `protobuf:"bytes,21,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	Email             string                 `protobuf:"bytes,22,opt,name=email,proto3" json:"email,omitempty"`
	CardIdStatus      int32                  `protobuf:"varint,23,opt,name=card_id_status,json=cardIdStatus,proto3" json:"card_id_status,omitempty"`
	BussinessIdStatus int32                  `protobuf:"varint,24,opt,name=bussiness_id_status,json=bussinessIdStatus,proto3" json:"bussiness_id_status,omitempty"`
	CardNumber        string                 `protobuf:"bytes,25,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`
	BussinessNumber   string                 `protobuf:"bytes,26,opt,name=bussiness_number,json=bussinessNumber,proto3" json:"bussiness_number,omitempty"`
	Nationality       string                 `protobuf:"bytes,27,opt,name=nationality,proto3" json:"nationality,omitempty"`
	RejectionMessage  string                 `protobuf:"bytes,28,opt,name=rejection_message,json=rejectionMessage,proto3" json:"rejection_message,omitempty"`
	CountPackage      int32                  `protobuf:"varint,29,opt,name=count_package,json=countPackage,proto3" json:"count_package,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	VerifiedAt        *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=verified_at,json=verifiedAt,proto3" json:"verified_at,omitempty"`
}

func (x *TourHost) Reset() {
	*x = TourHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TourHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourHost) ProtoMessage() {}

func (x *TourHost) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourHost.ProtoReflect.Descriptor instead.
func (*TourHost) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{0}
}

func (x *TourHost) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *TourHost) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *TourHost) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *TourHost) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *TourHost) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *TourHost) GetDateOfBirth() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfBirth
	}
	return nil
}

func (x *TourHost) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *TourHost) GetProfilePictureUrl() string {
	if x != nil {
		return x.ProfilePictureUrl
	}
	return ""
}

func (x *TourHost) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *TourHost) GetBusinessCategory() string {
	if x != nil {
		return x.BusinessCategory
	}
	return ""
}

func (x *TourHost) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TourHost) GetBusinessAbout() string {
	if x != nil {
		return x.BusinessAbout
	}
	return ""
}

func (x *TourHost) GetCardIdType() string {
	if x != nil {
		return x.CardIdType
	}
	return ""
}

func (x *TourHost) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *TourHost) GetPersonWithId() string {
	if x != nil {
		return x.PersonWithId
	}
	return ""
}

func (x *TourHost) GetBussinessIdType() string {
	if x != nil {
		return x.BussinessIdType
	}
	return ""
}

func (x *TourHost) GetBussinessId() string {
	if x != nil {
		return x.BussinessId
	}
	return ""
}

func (x *TourHost) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

func (x *TourHost) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *TourHost) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *TourHost) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *TourHost) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *TourHost) GetCardIdStatus() int32 {
	if x != nil {
		return x.CardIdStatus
	}
	return 0
}

func (x *TourHost) GetBussinessIdStatus() int32 {
	if x != nil {
		return x.BussinessIdStatus
	}
	return 0
}

func (x *TourHost) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *TourHost) GetBussinessNumber() string {
	if x != nil {
		return x.BussinessNumber
	}
	return ""
}

func (x *TourHost) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *TourHost) GetRejectionMessage() string {
	if x != nil {
		return x.RejectionMessage
	}
	return ""
}

func (x *TourHost) GetCountPackage() int32 {
	if x != nil {
		return x.CountPackage
	}
	return 0
}

func (x *TourHost) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TourHost) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TourHost) GetVerifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VerifiedAt
	}
	return nil
}

type UpdateTourHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId               string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	FirstName            string                 `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string                 `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	PhoneNumber          string                 `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	DateOfBirth          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	OldPassword          string                 `protobuf:"bytes,6,opt,name=old_password,json=oldPassword,proto3" json:"old_password,omitempty"`
	Password             string                 `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	PasswordConfirmation string                 `protobuf:"bytes,8,opt,name=password_confirmation,json=passwordConfirmation,proto3" json:"password_confirmation,omitempty"`
	ProfilePictureUrl    string                 `protobuf:"bytes,9,opt,name=profile_picture_url,json=profilePictureUrl,proto3" json:"profile_picture_url,omitempty"`
	BusinessName         string                 `protobuf:"bytes,10,opt,name=business_name,json=businessName,proto3" json:"business_name,omitempty"`
	BusinessCategory     string                 `protobuf:"bytes,11,opt,name=business_category,json=businessCategory,proto3" json:"business_category,omitempty"`
	Address              string                 `protobuf:"bytes,12,opt,name=address,proto3" json:"address,omitempty"`
	BusinessAbout        string                 `protobuf:"bytes,13,opt,name=business_about,json=businessAbout,proto3" json:"business_about,omitempty"`
	UserUid              string                 `protobuf:"bytes,14,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	UpdatedAt            *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Email                string                 `protobuf:"bytes,16,opt,name=email,proto3" json:"email,omitempty"`
	Gender               string                 `protobuf:"bytes,17,opt,name=gender,proto3" json:"gender,omitempty"`
	ByAdmin              bool                   `protobuf:"varint,18,opt,name=by_admin,json=byAdmin,proto3" json:"by_admin,omitempty"`
	IsVerified           bool                   `protobuf:"varint,19,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	Nationality          string                 `protobuf:"bytes,20,opt,name=nationality,proto3" json:"nationality,omitempty"`
}

func (x *UpdateTourHostRequest) Reset() {
	*x = UpdateTourHostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTourHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTourHostRequest) ProtoMessage() {}

func (x *UpdateTourHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTourHostRequest.ProtoReflect.Descriptor instead.
func (*UpdateTourHostRequest) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateTourHostRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *UpdateTourHostRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UpdateTourHostRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UpdateTourHostRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UpdateTourHostRequest) GetDateOfBirth() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfBirth
	}
	return nil
}

func (x *UpdateTourHostRequest) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *UpdateTourHostRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UpdateTourHostRequest) GetPasswordConfirmation() string {
	if x != nil {
		return x.PasswordConfirmation
	}
	return ""
}

func (x *UpdateTourHostRequest) GetProfilePictureUrl() string {
	if x != nil {
		return x.ProfilePictureUrl
	}
	return ""
}

func (x *UpdateTourHostRequest) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *UpdateTourHostRequest) GetBusinessCategory() string {
	if x != nil {
		return x.BusinessCategory
	}
	return ""
}

func (x *UpdateTourHostRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UpdateTourHostRequest) GetBusinessAbout() string {
	if x != nil {
		return x.BusinessAbout
	}
	return ""
}

func (x *UpdateTourHostRequest) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *UpdateTourHostRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UpdateTourHostRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateTourHostRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *UpdateTourHostRequest) GetByAdmin() bool {
	if x != nil {
		return x.ByAdmin
	}
	return false
}

func (x *UpdateTourHostRequest) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

func (x *UpdateTourHostRequest) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

type UpdateTourHostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *UpdateTourHostRequest `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Code  string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Title string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *UpdateTourHostResponse) Reset() {
	*x = UpdateTourHostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTourHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTourHostResponse) ProtoMessage() {}

func (x *UpdateTourHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTourHostResponse.ProtoReflect.Descriptor instead.
func (*UpdateTourHostResponse) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateTourHostResponse) GetData() *UpdateTourHostRequest {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateTourHostResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UpdateTourHostResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type HostCardID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId       string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	CardId       string                 `protobuf:"bytes,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	PersonWithId string                 `protobuf:"bytes,3,opt,name=person_with_id,json=personWithId,proto3" json:"person_with_id,omitempty"`
	CardIdStatus VerifiedStatus         `protobuf:"varint,4,opt,name=card_id_status,json=cardIdStatus,proto3,enum=host.VerifiedStatus" json:"card_id_status,omitempty"`
	VerifiedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=verified_at,json=verifiedAt,proto3" json:"verified_at,omitempty"`
}

func (x *HostCardID) Reset() {
	*x = HostCardID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostCardID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostCardID) ProtoMessage() {}

func (x *HostCardID) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostCardID.ProtoReflect.Descriptor instead.
func (*HostCardID) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{3}
}

func (x *HostCardID) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *HostCardID) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *HostCardID) GetPersonWithId() string {
	if x != nil {
		return x.PersonWithId
	}
	return ""
}

func (x *HostCardID) GetCardIdStatus() VerifiedStatus {
	if x != nil {
		return x.CardIdStatus
	}
	return VerifiedStatus_PENDING
}

func (x *HostCardID) GetVerifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VerifiedAt
	}
	return nil
}

type HostBussinessID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId            string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	BussinessId       string                 `protobuf:"bytes,2,opt,name=bussiness_id,json=bussinessId,proto3" json:"bussiness_id,omitempty"`
	BussinessIdStatus VerifiedStatus         `protobuf:"varint,3,opt,name=bussiness_id_status,json=bussinessIdStatus,proto3,enum=host.VerifiedStatus" json:"bussiness_id_status,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *HostBussinessID) Reset() {
	*x = HostBussinessID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostBussinessID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostBussinessID) ProtoMessage() {}

func (x *HostBussinessID) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostBussinessID.ProtoReflect.Descriptor instead.
func (*HostBussinessID) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{4}
}

func (x *HostBussinessID) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *HostBussinessID) GetBussinessId() string {
	if x != nil {
		return x.BussinessId
	}
	return ""
}

func (x *HostBussinessID) GetBussinessIdStatus() VerifiedStatus {
	if x != nil {
		return x.BussinessIdStatus
	}
	return VerifiedStatus_PENDING
}

func (x *HostBussinessID) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type ResponseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ResponseMessage) Reset() {
	*x = ResponseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMessage) ProtoMessage() {}

func (x *ResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMessage.ProtoReflect.Descriptor instead.
func (*ResponseMessage) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{5}
}

func (x *ResponseMessage) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ResponseMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateTourHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId               string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	FirstName            string                 `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string                 `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	PhoneNumber          string                 `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	DateOfBirth          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	Password             string                 `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	PasswordConfirmation string                 `protobuf:"bytes,7,opt,name=password_confirmation,json=passwordConfirmation,proto3" json:"password_confirmation,omitempty"`
	BusinessName         string                 `protobuf:"bytes,8,opt,name=business_name,json=businessName,proto3" json:"business_name,omitempty"`
	BusinessCategory     string                 `protobuf:"bytes,9,opt,name=business_category,json=businessCategory,proto3" json:"business_category,omitempty"`
	Address              string                 `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`
	BusinessAbout        string                 `protobuf:"bytes,11,opt,name=business_about,json=businessAbout,proto3" json:"business_about,omitempty"`
	CardIdType           string                 `protobuf:"bytes,12,opt,name=card_id_type,json=cardIdType,proto3" json:"card_id_type,omitempty"`
	CardId               string                 `protobuf:"bytes,13,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	PersonWithId         string                 `protobuf:"bytes,14,opt,name=person_with_id,json=personWithId,proto3" json:"person_with_id,omitempty"`
	BussinessIdType      string                 `protobuf:"bytes,15,opt,name=bussiness_id_type,json=bussinessIdType,proto3" json:"bussiness_id_type,omitempty"`
	BussinessId          string                 `protobuf:"bytes,16,opt,name=bussiness_id,json=bussinessId,proto3" json:"bussiness_id,omitempty"`
	IsVerified           bool                   `protobuf:"varint,17,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	AccountNumber        string                 `protobuf:"bytes,18,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	Balance              string                 `protobuf:"bytes,19,opt,name=balance,proto3" json:"balance,omitempty"`
	UserUid              string                 `protobuf:"bytes,20,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Email                string                 `protobuf:"bytes,22,opt,name=email,proto3" json:"email,omitempty"`
	Gender               string                 `protobuf:"bytes,23,opt,name=gender,proto3" json:"gender,omitempty"`
	ByAdmin              bool                   `protobuf:"varint,24,opt,name=by_admin,json=byAdmin,proto3" json:"by_admin,omitempty"`
	CardIdStatus         int32                  `protobuf:"varint,25,opt,name=card_id_status,json=cardIdStatus,proto3" json:"card_id_status,omitempty"`
	BussinessIdStatus    int32                  `protobuf:"varint,26,opt,name=bussiness_id_status,json=bussinessIdStatus,proto3" json:"bussiness_id_status,omitempty"`
	CardNumber           string                 `protobuf:"bytes,27,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`
	BussinessNumber      string                 `protobuf:"bytes,28,opt,name=bussiness_number,json=bussinessNumber,proto3" json:"bussiness_number,omitempty"`
}

func (x *CreateTourHostRequest) Reset() {
	*x = CreateTourHostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTourHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTourHostRequest) ProtoMessage() {}

func (x *CreateTourHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTourHostRequest.ProtoReflect.Descriptor instead.
func (*CreateTourHostRequest) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{6}
}

func (x *CreateTourHostRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *CreateTourHostRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CreateTourHostRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CreateTourHostRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *CreateTourHostRequest) GetDateOfBirth() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfBirth
	}
	return nil
}

func (x *CreateTourHostRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateTourHostRequest) GetPasswordConfirmation() string {
	if x != nil {
		return x.PasswordConfirmation
	}
	return ""
}

func (x *CreateTourHostRequest) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *CreateTourHostRequest) GetBusinessCategory() string {
	if x != nil {
		return x.BusinessCategory
	}
	return ""
}

func (x *CreateTourHostRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateTourHostRequest) GetBusinessAbout() string {
	if x != nil {
		return x.BusinessAbout
	}
	return ""
}

func (x *CreateTourHostRequest) GetCardIdType() string {
	if x != nil {
		return x.CardIdType
	}
	return ""
}

func (x *CreateTourHostRequest) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *CreateTourHostRequest) GetPersonWithId() string {
	if x != nil {
		return x.PersonWithId
	}
	return ""
}

func (x *CreateTourHostRequest) GetBussinessIdType() string {
	if x != nil {
		return x.BussinessIdType
	}
	return ""
}

func (x *CreateTourHostRequest) GetBussinessId() string {
	if x != nil {
		return x.BussinessId
	}
	return ""
}

func (x *CreateTourHostRequest) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

func (x *CreateTourHostRequest) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *CreateTourHostRequest) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *CreateTourHostRequest) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *CreateTourHostRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateTourHostRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateTourHostRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *CreateTourHostRequest) GetByAdmin() bool {
	if x != nil {
		return x.ByAdmin
	}
	return false
}

func (x *CreateTourHostRequest) GetCardIdStatus() int32 {
	if x != nil {
		return x.CardIdStatus
	}
	return 0
}

func (x *CreateTourHostRequest) GetBussinessIdStatus() int32 {
	if x != nil {
		return x.BussinessIdStatus
	}
	return 0
}

func (x *CreateTourHostRequest) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *CreateTourHostRequest) GetBussinessNumber() string {
	if x != nil {
		return x.BussinessNumber
	}
	return ""
}

type CreateTourHostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *CreateTourHostRequest `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Code  string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Title string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *CreateTourHostResponse) Reset() {
	*x = CreateTourHostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTourHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTourHostResponse) ProtoMessage() {}

func (x *CreateTourHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTourHostResponse.ProtoReflect.Descriptor instead.
func (*CreateTourHostResponse) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{7}
}

func (x *CreateTourHostResponse) GetData() *CreateTourHostRequest {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateTourHostResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CreateTourHostResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type GetTourHostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TourHost `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTourHostResponse) Reset() {
	*x = GetTourHostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTourHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTourHostResponse) ProtoMessage() {}

func (x *GetTourHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTourHostResponse.ProtoReflect.Descriptor instead.
func (*GetTourHostResponse) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{8}
}

func (x *GetTourHostResponse) GetData() *TourHost {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetTourHostByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TourHost `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTourHostByIDResponse) Reset() {
	*x = GetTourHostByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTourHostByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTourHostByIDResponse) ProtoMessage() {}

func (x *GetTourHostByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTourHostByIDResponse.ProtoReflect.Descriptor instead.
func (*GetTourHostByIDResponse) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{9}
}

func (x *GetTourHostByIDResponse) GetData() *TourHost {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetTourHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId string `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
}

func (x *GetTourHostRequest) Reset() {
	*x = GetTourHostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTourHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTourHostRequest) ProtoMessage() {}

func (x *GetTourHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTourHostRequest.ProtoReflect.Descriptor instead.
func (*GetTourHostRequest) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{10}
}

func (x *GetTourHostRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

type GetTourHostRespone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TourHost `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTourHostRespone) Reset() {
	*x = GetTourHostRespone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTourHostRespone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTourHostRespone) ProtoMessage() {}

func (x *GetTourHostRespone) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTourHostRespone.ProtoReflect.Descriptor instead.
func (*GetTourHostRespone) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{11}
}

func (x *GetTourHostRespone) GetData() *TourHost {
	if x != nil {
		return x.Data
	}
	return nil
}

type SignUpAsHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUid          string `protobuf:"bytes,1,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	BusinessName     string `protobuf:"bytes,2,opt,name=business_name,json=businessName,proto3" json:"business_name,omitempty"`
	BusinessCategory string `protobuf:"bytes,3,opt,name=business_category,json=businessCategory,proto3" json:"business_category,omitempty"`
	Address          string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *SignUpAsHostRequest) Reset() {
	*x = SignUpAsHostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignUpAsHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignUpAsHostRequest) ProtoMessage() {}

func (x *SignUpAsHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignUpAsHostRequest.ProtoReflect.Descriptor instead.
func (*SignUpAsHostRequest) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{12}
}

func (x *SignUpAsHostRequest) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *SignUpAsHostRequest) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *SignUpAsHostRequest) GetBusinessCategory() string {
	if x != nil {
		return x.BusinessCategory
	}
	return ""
}

func (x *SignUpAsHostRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type SignUpAsHostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *SignUpAsHostRequest `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Code  string               `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Title string               `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *SignUpAsHostResponse) Reset() {
	*x = SignUpAsHostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignUpAsHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignUpAsHostResponse) ProtoMessage() {}

func (x *SignUpAsHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignUpAsHostResponse.ProtoReflect.Descriptor instead.
func (*SignUpAsHostResponse) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{13}
}

func (x *SignUpAsHostResponse) GetData() *SignUpAsHostRequest {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SignUpAsHostResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SignUpAsHostResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type RequestParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    string `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage string `protobuf:"bytes,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Param   string `protobuf:"bytes,3,opt,name=param,proto3" json:"param,omitempty"`
	Key     string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	SortBy  string `protobuf:"bytes,5,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
}

func (x *RequestParams) Reset() {
	*x = RequestParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestParams) ProtoMessage() {}

func (x *RequestParams) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestParams.ProtoReflect.Descriptor instead.
func (*RequestParams) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{14}
}

func (x *RequestParams) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *RequestParams) GetPerPage() string {
	if x != nil {
		return x.PerPage
	}
	return ""
}

func (x *RequestParams) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *RequestParams) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RequestParams) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

type Paginate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentPage int32 `protobuf:"varint,1,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	NextPage    int32 `protobuf:"varint,2,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	TotalPage   int32 `protobuf:"varint,3,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	PerPage     int32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Total       int32 `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Paginate) Reset() {
	*x = Paginate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paginate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paginate) ProtoMessage() {}

func (x *Paginate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paginate.ProtoReflect.Descriptor instead.
func (*Paginate) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{15}
}

func (x *Paginate) GetCurrentPage() int32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *Paginate) GetNextPage() int32 {
	if x != nil {
		return x.NextPage
	}
	return 0
}

func (x *Paginate) GetTotalPage() int32 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *Paginate) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *Paginate) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TourHostList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId      string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	FirstName   string                 `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName    string                 `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Gender      string                 `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`
	PhoneNumber string                 `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	DateOfBirth *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	//string password = 7;
	ProfilePictureUrl string `protobuf:"bytes,8,opt,name=profile_picture_url,json=profilePictureUrl,proto3" json:"profile_picture_url,omitempty"`
	IsVerified        bool   `protobuf:"varint,9,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	IsDeactivate      bool   `protobuf:"varint,10,opt,name=is_deactivate,json=isDeactivate,proto3" json:"is_deactivate,omitempty"`
	BusinessName      string `protobuf:"bytes,11,opt,name=business_name,json=businessName,proto3" json:"business_name,omitempty"`
	BusinessCategory  string `protobuf:"bytes,12,opt,name=business_category,json=businessCategory,proto3" json:"business_category,omitempty"`
	Address           string `protobuf:"bytes,13,opt,name=address,proto3" json:"address,omitempty"`
	BusinessAbout     string `protobuf:"bytes,14,opt,name=business_about,json=businessAbout,proto3" json:"business_about,omitempty"`
	CardIdType        string `protobuf:"bytes,15,opt,name=card_id_type,json=cardIdType,proto3" json:"card_id_type,omitempty"`
	CardId            string `protobuf:"bytes,16,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	PersonWithId      string `protobuf:"bytes,17,opt,name=person_with_id,json=personWithId,proto3" json:"person_with_id,omitempty"`
	BussinessIdType   string `protobuf:"bytes,18,opt,name=bussiness_id_type,json=bussinessIdType,proto3" json:"bussiness_id_type,omitempty"`
	BussinessId       string `protobuf:"bytes,19,opt,name=bussiness_id,json=bussinessId,proto3" json:"bussiness_id,omitempty"`
	//string account_number = 20;
	//string balance = 21;
	UserUid           string                 `protobuf:"bytes,22,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	Email             string                 `protobuf:"bytes,23,opt,name=email,proto3" json:"email,omitempty"`
	CardIdStatus      int32                  `protobuf:"varint,24,opt,name=card_id_status,json=cardIdStatus,proto3" json:"card_id_status,omitempty"`
	BussinessIdStatus int32                  `protobuf:"varint,25,opt,name=bussiness_id_status,json=bussinessIdStatus,proto3" json:"bussiness_id_status,omitempty"`
	CardNumber        string                 `protobuf:"bytes,26,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`
	BussinessNumber   string                 `protobuf:"bytes,27,opt,name=bussiness_number,json=bussinessNumber,proto3" json:"bussiness_number,omitempty"`
	Nationality       string                 `protobuf:"bytes,28,opt,name=nationality,proto3" json:"nationality,omitempty"`
	RejectionMessage  string                 `protobuf:"bytes,29,opt,name=rejection_message,json=rejectionMessage,proto3" json:"rejection_message,omitempty"`
	CountPackage      int32                  `protobuf:"varint,30,opt,name=count_package,json=countPackage,proto3" json:"count_package,omitempty"`
	IsHost            bool                   `protobuf:"varint,31,opt,name=is_host,json=isHost,proto3" json:"is_host,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,33,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	VerifiedAt        *timestamppb.Timestamp `protobuf:"bytes,34,opt,name=verified_at,json=verifiedAt,proto3" json:"verified_at,omitempty"`
}

func (x *TourHostList) Reset() {
	*x = TourHostList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TourHostList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourHostList) ProtoMessage() {}

func (x *TourHostList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourHostList.ProtoReflect.Descriptor instead.
func (*TourHostList) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{16}
}

func (x *TourHostList) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *TourHostList) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *TourHostList) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *TourHostList) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *TourHostList) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *TourHostList) GetDateOfBirth() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfBirth
	}
	return nil
}

func (x *TourHostList) GetProfilePictureUrl() string {
	if x != nil {
		return x.ProfilePictureUrl
	}
	return ""
}

func (x *TourHostList) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

func (x *TourHostList) GetIsDeactivate() bool {
	if x != nil {
		return x.IsDeactivate
	}
	return false
}

func (x *TourHostList) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *TourHostList) GetBusinessCategory() string {
	if x != nil {
		return x.BusinessCategory
	}
	return ""
}

func (x *TourHostList) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TourHostList) GetBusinessAbout() string {
	if x != nil {
		return x.BusinessAbout
	}
	return ""
}

func (x *TourHostList) GetCardIdType() string {
	if x != nil {
		return x.CardIdType
	}
	return ""
}

func (x *TourHostList) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *TourHostList) GetPersonWithId() string {
	if x != nil {
		return x.PersonWithId
	}
	return ""
}

func (x *TourHostList) GetBussinessIdType() string {
	if x != nil {
		return x.BussinessIdType
	}
	return ""
}

func (x *TourHostList) GetBussinessId() string {
	if x != nil {
		return x.BussinessId
	}
	return ""
}

func (x *TourHostList) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *TourHostList) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *TourHostList) GetCardIdStatus() int32 {
	if x != nil {
		return x.CardIdStatus
	}
	return 0
}

func (x *TourHostList) GetBussinessIdStatus() int32 {
	if x != nil {
		return x.BussinessIdStatus
	}
	return 0
}

func (x *TourHostList) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *TourHostList) GetBussinessNumber() string {
	if x != nil {
		return x.BussinessNumber
	}
	return ""
}

func (x *TourHostList) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *TourHostList) GetRejectionMessage() string {
	if x != nil {
		return x.RejectionMessage
	}
	return ""
}

func (x *TourHostList) GetCountPackage() int32 {
	if x != nil {
		return x.CountPackage
	}
	return 0
}

func (x *TourHostList) GetIsHost() bool {
	if x != nil {
		return x.IsHost
	}
	return false
}

func (x *TourHostList) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TourHostList) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TourHostList) GetVerifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VerifiedAt
	}
	return nil
}

type ResponseTourHostList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title    string          `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data     []*TourHostList `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Paginate *Paginate       `protobuf:"bytes,4,opt,name=paginate,proto3" json:"paginate,omitempty"`
}

func (x *ResponseTourHostList) Reset() {
	*x = ResponseTourHostList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTourHostList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTourHostList) ProtoMessage() {}

func (x *ResponseTourHostList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTourHostList.ProtoReflect.Descriptor instead.
func (*ResponseTourHostList) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{17}
}

func (x *ResponseTourHostList) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseTourHostList) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseTourHostList) GetData() []*TourHostList {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponseTourHostList) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

type RequestVerified struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hosts []*HostIDS `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
}

func (x *RequestVerified) Reset() {
	*x = RequestVerified{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestVerified) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVerified) ProtoMessage() {}

func (x *RequestVerified) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVerified.ProtoReflect.Descriptor instead.
func (*RequestVerified) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{18}
}

func (x *RequestVerified) GetHosts() []*HostIDS {
	if x != nil {
		return x.Hosts
	}
	return nil
}

type HostIDS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId     string `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	IsVerified bool   `protobuf:"varint,2,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
}

func (x *HostIDS) Reset() {
	*x = HostIDS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostIDS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostIDS) ProtoMessage() {}

func (x *HostIDS) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostIDS.ProtoReflect.Descriptor instead.
func (*HostIDS) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{19}
}

func (x *HostIDS) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *HostIDS) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

type ResponseVerified struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string      `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data  []*TourHost `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseVerified) Reset() {
	*x = ResponseVerified{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseVerified) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseVerified) ProtoMessage() {}

func (x *ResponseVerified) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseVerified.ProtoReflect.Descriptor instead.
func (*ResponseVerified) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{20}
}

func (x *ResponseVerified) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseVerified) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseVerified) GetData() []*TourHost {
	if x != nil {
		return x.Data
	}
	return nil
}

type RequestBusinessCardID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId            string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	CardId            string                 `protobuf:"bytes,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	PersonWithId      string                 `protobuf:"bytes,3,opt,name=person_with_id,json=personWithId,proto3" json:"person_with_id,omitempty"`
	CardIdStatus      VerifiedStatus         `protobuf:"varint,4,opt,name=card_id_status,json=cardIdStatus,proto3,enum=host.VerifiedStatus" json:"card_id_status,omitempty"`
	BussinessId       string                 `protobuf:"bytes,5,opt,name=bussiness_id,json=bussinessId,proto3" json:"bussiness_id,omitempty"`
	BussinessIdStatus VerifiedStatus         `protobuf:"varint,6,opt,name=bussiness_id_status,json=bussinessIdStatus,proto3,enum=host.VerifiedStatus" json:"bussiness_id_status,omitempty"`
	RejectionMessage  string                 `protobuf:"bytes,7,opt,name=rejection_message,json=rejectionMessage,proto3" json:"rejection_message,omitempty"`
	IsVerified        bool                   `protobuf:"varint,8,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	VerifiedAt        *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=verified_at,json=verifiedAt,proto3" json:"verified_at,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *RequestBusinessCardID) Reset() {
	*x = RequestBusinessCardID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBusinessCardID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBusinessCardID) ProtoMessage() {}

func (x *RequestBusinessCardID) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBusinessCardID.ProtoReflect.Descriptor instead.
func (*RequestBusinessCardID) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{21}
}

func (x *RequestBusinessCardID) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *RequestBusinessCardID) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *RequestBusinessCardID) GetPersonWithId() string {
	if x != nil {
		return x.PersonWithId
	}
	return ""
}

func (x *RequestBusinessCardID) GetCardIdStatus() VerifiedStatus {
	if x != nil {
		return x.CardIdStatus
	}
	return VerifiedStatus_PENDING
}

func (x *RequestBusinessCardID) GetBussinessId() string {
	if x != nil {
		return x.BussinessId
	}
	return ""
}

func (x *RequestBusinessCardID) GetBussinessIdStatus() VerifiedStatus {
	if x != nil {
		return x.BussinessIdStatus
	}
	return VerifiedStatus_PENDING
}

func (x *RequestBusinessCardID) GetRejectionMessage() string {
	if x != nil {
		return x.RejectionMessage
	}
	return ""
}

func (x *RequestBusinessCardID) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

func (x *RequestBusinessCardID) GetVerifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VerifiedAt
	}
	return nil
}

func (x *RequestBusinessCardID) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ResponseBusinessCardID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string    `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data  *TourHost `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseBusinessCardID) Reset() {
	*x = ResponseBusinessCardID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseBusinessCardID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseBusinessCardID) ProtoMessage() {}

func (x *ResponseBusinessCardID) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseBusinessCardID.ProtoReflect.Descriptor instead.
func (*ResponseBusinessCardID) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{22}
}

func (x *ResponseBusinessCardID) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseBusinessCardID) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseBusinessCardID) GetData() *TourHost {
	if x != nil {
		return x.Data
	}
	return nil
}

type RequestAdministratorUpdateHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUid           string                 `protobuf:"bytes,1,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	BusinessName      string                 `protobuf:"bytes,2,opt,name=business_name,json=businessName,proto3" json:"business_name,omitempty"`
	BusinessCategory  string                 `protobuf:"bytes,3,opt,name=business_category,json=businessCategory,proto3" json:"business_category,omitempty"`
	Address           string                 `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	BusinessAbout     string                 `protobuf:"bytes,5,opt,name=business_about,json=businessAbout,proto3" json:"business_about,omitempty"`
	CardIdType        string                 `protobuf:"bytes,6,opt,name=card_id_type,json=cardIdType,proto3" json:"card_id_type,omitempty"`
	CardId            string                 `protobuf:"bytes,7,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	CardIdStatus      VerifiedStatus         `protobuf:"varint,8,opt,name=card_id_status,json=cardIdStatus,proto3,enum=host.VerifiedStatus" json:"card_id_status,omitempty"`
	PersonWithId      string                 `protobuf:"bytes,9,opt,name=person_with_id,json=personWithId,proto3" json:"person_with_id,omitempty"`
	BussinessIdType   string                 `protobuf:"bytes,10,opt,name=bussiness_id_type,json=bussinessIdType,proto3" json:"bussiness_id_type,omitempty"`
	BussinessId       string                 `protobuf:"bytes,11,opt,name=bussiness_id,json=bussinessId,proto3" json:"bussiness_id,omitempty"`
	BussinessIdStatus VerifiedStatus         `protobuf:"varint,12,opt,name=bussiness_id_status,json=bussinessIdStatus,proto3,enum=host.VerifiedStatus" json:"bussiness_id_status,omitempty"`
	IsVerified        bool                   `protobuf:"varint,13,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	ByAdmin           bool                   `protobuf:"varint,14,opt,name=by_admin,json=byAdmin,proto3" json:"by_admin,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *RequestAdministratorUpdateHost) Reset() {
	*x = RequestAdministratorUpdateHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestAdministratorUpdateHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAdministratorUpdateHost) ProtoMessage() {}

func (x *RequestAdministratorUpdateHost) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAdministratorUpdateHost.ProtoReflect.Descriptor instead.
func (*RequestAdministratorUpdateHost) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{23}
}

func (x *RequestAdministratorUpdateHost) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *RequestAdministratorUpdateHost) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *RequestAdministratorUpdateHost) GetBusinessCategory() string {
	if x != nil {
		return x.BusinessCategory
	}
	return ""
}

func (x *RequestAdministratorUpdateHost) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RequestAdministratorUpdateHost) GetBusinessAbout() string {
	if x != nil {
		return x.BusinessAbout
	}
	return ""
}

func (x *RequestAdministratorUpdateHost) GetCardIdType() string {
	if x != nil {
		return x.CardIdType
	}
	return ""
}

func (x *RequestAdministratorUpdateHost) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *RequestAdministratorUpdateHost) GetCardIdStatus() VerifiedStatus {
	if x != nil {
		return x.CardIdStatus
	}
	return VerifiedStatus_PENDING
}

func (x *RequestAdministratorUpdateHost) GetPersonWithId() string {
	if x != nil {
		return x.PersonWithId
	}
	return ""
}

func (x *RequestAdministratorUpdateHost) GetBussinessIdType() string {
	if x != nil {
		return x.BussinessIdType
	}
	return ""
}

func (x *RequestAdministratorUpdateHost) GetBussinessId() string {
	if x != nil {
		return x.BussinessId
	}
	return ""
}

func (x *RequestAdministratorUpdateHost) GetBussinessIdStatus() VerifiedStatus {
	if x != nil {
		return x.BussinessIdStatus
	}
	return VerifiedStatus_PENDING
}

func (x *RequestAdministratorUpdateHost) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

func (x *RequestAdministratorUpdateHost) GetByAdmin() bool {
	if x != nil {
		return x.ByAdmin
	}
	return false
}

func (x *RequestAdministratorUpdateHost) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *RequestAdministratorUpdateHost) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type ResponseAdministratorUpdateHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string    `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data  *TourHost `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseAdministratorUpdateHost) Reset() {
	*x = ResponseAdministratorUpdateHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_host_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseAdministratorUpdateHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseAdministratorUpdateHost) ProtoMessage() {}

func (x *ResponseAdministratorUpdateHost) ProtoReflect() protoreflect.Message {
	mi := &file_pb_host_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseAdministratorUpdateHost.ProtoReflect.Descriptor instead.
func (*ResponseAdministratorUpdateHost) Descriptor() ([]byte, []int) {
	return file_pb_host_proto_rawDescGZIP(), []int{24}
}

func (x *ResponseAdministratorUpdateHost) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseAdministratorUpdateHost) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseAdministratorUpdateHost) GetData() *TourHost {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_pb_host_proto protoreflect.FileDescriptor

var file_pb_host_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x62, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x09, 0x0a, 0x08, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a,
	0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x62, 0x6f, 0x75, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75,
	0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x75, 0x73,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x75,
	0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x3b, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe8, 0x05, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x21,
	0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x33, 0x0a,
	0x15, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x79, 0x5f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x79, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x73, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75,
	0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xdd, 0x01, 0x0a,
	0x0a, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x68, 0x6f,
	0x73, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3b, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x22, 0xce, 0x01, 0x0a,
	0x0f, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44,
	0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x73,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x13,
	0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x68, 0x6f, 0x73, 0x74,
	0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x11, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x43, 0x0a,
	0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x86, 0x08, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75,
	0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68,
	0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42,
	0x69, 0x72, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x33, 0x0a, 0x15, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x75, 0x73,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x73,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x79, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x62, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x62, 0x75,
	0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x29, 0x0a, 0x10, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x73, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x73, 0x0a, 0x16, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x22, 0x39, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x75,
	0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72,
	0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2d, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x65, 0x12,
	0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x68, 0x6f, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x9c, 0x01, 0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x41, 0x73,
	0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x6f, 0x0a, 0x14, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x41, 0x73, 0x48, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x41, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x22, 0x7f, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f,
	0x72, 0x74, 0x42, 0x79, 0x22, 0x9a, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0xaa, 0x09, 0x0a, 0x0c, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72,
	0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x44, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62,
	0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x22, 0x94,
	0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x48,
	0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x6f,
	0x73, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x22, 0x36, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x49, 0x44, 0x53, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x43, 0x0a,
	0x07, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x53, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x22, 0x60, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xda, 0x03, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x17,
	0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x13, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x66, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb2, 0x05, 0x0a, 0x1e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x68, 0x6f, 0x73, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x73, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x13, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x62, 0x75, 0x73, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x79, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x62, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x6f,
	0x0a, 0x1f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x6f, 0x73, 0x74,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x2a,
	0x47, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x4f, 0x4e, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x32, 0xec, 0x0a, 0x0a, 0x0f, 0x54, 0x6f, 0x75,
	0x72, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x0e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1b,
	0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x68, 0x6f,
	0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x20, 0x32, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x68,
	0x6f, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01,
	0x2a, 0x12, 0x65, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x0e, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72,
	0x48, 0x6f, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x2f, 0x7b,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x69, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x68, 0x6f, 0x73,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x68, 0x6f, 0x73, 0x74, 0x73,
	0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x10, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x1a, 0x15, 0x2e, 0x68, 0x6f, 0x73, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x32, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x2f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x2d, 0x63, 0x61, 0x72, 0x64, 0x2f, 0x7b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x7e, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x42, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x15, 0x2e,
	0x68, 0x6f, 0x73, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x49, 0x44, 0x1a, 0x15, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x31, 0x32, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75,
	0x72, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2d, 0x62, 0x75,
	0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f, 0x7b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x45, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x41, 0x73,
	0x48, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x55, 0x70, 0x41, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x41, 0x73, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x68,
	0x6f, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x6d, 0x65, 0x12,
	0x6c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x55, 0x49, 0x44, 0x12, 0x0e, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x54,
	0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x2f, 0x67, 0x65,
	0x74, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x6f, 0x0a,
	0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x79, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x12, 0x15, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0x16, 0x2e, 0x68, 0x6f,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x32, 0x1e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x2d, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x66,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x79,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x13, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1a, 0x2e, 0x68, 0x6f, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f,
	0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x68, 0x6f, 0x73, 0x74,
	0x73, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x90, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x61, 0x72, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x44, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1b, 0x2e, 0x68,
	0x6f, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x1a, 0x1c, 0x2e, 0x68, 0x6f, 0x73, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x32,
	0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x68, 0x6f, 0x73,
	0x74, 0x73, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x9b, 0x01, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x79, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x12, 0x24, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x68, 0x6f, 0x73, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x32, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x3a, 0x01, 0x2a, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_host_proto_rawDescOnce sync.Once
	file_pb_host_proto_rawDescData = file_pb_host_proto_rawDesc
)

func file_pb_host_proto_rawDescGZIP() []byte {
	file_pb_host_proto_rawDescOnce.Do(func() {
		file_pb_host_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_host_proto_rawDescData)
	})
	return file_pb_host_proto_rawDescData
}

var file_pb_host_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pb_host_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_pb_host_proto_goTypes = []interface{}{
	(VerifiedStatus)(0),                     // 0: host.VerifiedStatus
	(*TourHost)(nil),                        // 1: host.TourHost
	(*UpdateTourHostRequest)(nil),           // 2: host.UpdateTourHostRequest
	(*UpdateTourHostResponse)(nil),          // 3: host.UpdateTourHostResponse
	(*HostCardID)(nil),                      // 4: host.HostCardID
	(*HostBussinessID)(nil),                 // 5: host.HostBussinessID
	(*ResponseMessage)(nil),                 // 6: host.ResponseMessage
	(*CreateTourHostRequest)(nil),           // 7: host.CreateTourHostRequest
	(*CreateTourHostResponse)(nil),          // 8: host.CreateTourHostResponse
	(*GetTourHostResponse)(nil),             // 9: host.GetTourHostResponse
	(*GetTourHostByIDResponse)(nil),         // 10: host.GetTourHostByIDResponse
	(*GetTourHostRequest)(nil),              // 11: host.GetTourHostRequest
	(*GetTourHostRespone)(nil),              // 12: host.GetTourHostRespone
	(*SignUpAsHostRequest)(nil),             // 13: host.SignUpAsHostRequest
	(*SignUpAsHostResponse)(nil),            // 14: host.SignUpAsHostResponse
	(*RequestParams)(nil),                   // 15: host.RequestParams
	(*Paginate)(nil),                        // 16: host.Paginate
	(*TourHostList)(nil),                    // 17: host.TourHostList
	(*ResponseTourHostList)(nil),            // 18: host.ResponseTourHostList
	(*RequestVerified)(nil),                 // 19: host.RequestVerified
	(*HostIDS)(nil),                         // 20: host.HostIDS
	(*ResponseVerified)(nil),                // 21: host.ResponseVerified
	(*RequestBusinessCardID)(nil),           // 22: host.RequestBusinessCardID
	(*ResponseBusinessCardID)(nil),          // 23: host.ResponseBusinessCardID
	(*RequestAdministratorUpdateHost)(nil),  // 24: host.RequestAdministratorUpdateHost
	(*ResponseAdministratorUpdateHost)(nil), // 25: host.ResponseAdministratorUpdateHost
	(*timestamppb.Timestamp)(nil),           // 26: google.protobuf.Timestamp
}
var file_pb_host_proto_depIdxs = []int32{
	26, // 0: host.TourHost.date_of_birth:type_name -> google.protobuf.Timestamp
	26, // 1: host.TourHost.updated_at:type_name -> google.protobuf.Timestamp
	26, // 2: host.TourHost.created_at:type_name -> google.protobuf.Timestamp
	26, // 3: host.TourHost.verified_at:type_name -> google.protobuf.Timestamp
	26, // 4: host.UpdateTourHostRequest.date_of_birth:type_name -> google.protobuf.Timestamp
	26, // 5: host.UpdateTourHostRequest.updated_at:type_name -> google.protobuf.Timestamp
	2,  // 6: host.UpdateTourHostResponse.data:type_name -> host.UpdateTourHostRequest
	0,  // 7: host.HostCardID.card_id_status:type_name -> host.VerifiedStatus
	26, // 8: host.HostCardID.verified_at:type_name -> google.protobuf.Timestamp
	0,  // 9: host.HostBussinessID.bussiness_id_status:type_name -> host.VerifiedStatus
	26, // 10: host.HostBussinessID.created_at:type_name -> google.protobuf.Timestamp
	26, // 11: host.CreateTourHostRequest.date_of_birth:type_name -> google.protobuf.Timestamp
	26, // 12: host.CreateTourHostRequest.created_at:type_name -> google.protobuf.Timestamp
	7,  // 13: host.CreateTourHostResponse.data:type_name -> host.CreateTourHostRequest
	1,  // 14: host.GetTourHostResponse.data:type_name -> host.TourHost
	1,  // 15: host.GetTourHostByIDResponse.data:type_name -> host.TourHost
	1,  // 16: host.GetTourHostRespone.data:type_name -> host.TourHost
	13, // 17: host.SignUpAsHostResponse.data:type_name -> host.SignUpAsHostRequest
	26, // 18: host.TourHostList.date_of_birth:type_name -> google.protobuf.Timestamp
	26, // 19: host.TourHostList.updated_at:type_name -> google.protobuf.Timestamp
	26, // 20: host.TourHostList.created_at:type_name -> google.protobuf.Timestamp
	26, // 21: host.TourHostList.verified_at:type_name -> google.protobuf.Timestamp
	17, // 22: host.ResponseTourHostList.data:type_name -> host.TourHostList
	16, // 23: host.ResponseTourHostList.paginate:type_name -> host.Paginate
	20, // 24: host.RequestVerified.hosts:type_name -> host.HostIDS
	1,  // 25: host.ResponseVerified.data:type_name -> host.TourHost
	0,  // 26: host.RequestBusinessCardID.card_id_status:type_name -> host.VerifiedStatus
	0,  // 27: host.RequestBusinessCardID.bussiness_id_status:type_name -> host.VerifiedStatus
	26, // 28: host.RequestBusinessCardID.verified_at:type_name -> google.protobuf.Timestamp
	26, // 29: host.RequestBusinessCardID.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 30: host.ResponseBusinessCardID.data:type_name -> host.TourHost
	0,  // 31: host.RequestAdministratorUpdateHost.card_id_status:type_name -> host.VerifiedStatus
	0,  // 32: host.RequestAdministratorUpdateHost.bussiness_id_status:type_name -> host.VerifiedStatus
	26, // 33: host.RequestAdministratorUpdateHost.updated_at:type_name -> google.protobuf.Timestamp
	26, // 34: host.RequestAdministratorUpdateHost.created_at:type_name -> google.protobuf.Timestamp
	1,  // 35: host.ResponseAdministratorUpdateHost.data:type_name -> host.TourHost
	2,  // 36: host.TourHostService.UpdateTourHost:input_type -> host.UpdateTourHostRequest
	1,  // 37: host.TourHostService.GetTourHostByID:input_type -> host.TourHost
	7,  // 38: host.TourHostService.CreateTourHost:input_type -> host.CreateTourHostRequest
	4,  // 39: host.TourHostService.UpdateHostCardID:input_type -> host.HostCardID
	5,  // 40: host.TourHostService.UpdateHostBussinessID:input_type -> host.HostBussinessID
	13, // 41: host.TourHostService.SignUpAsHost:input_type -> host.SignUpAsHostRequest
	1,  // 42: host.TourHostService.GetTourHostInfo:input_type -> host.TourHost
	1,  // 43: host.TourHostService.GetTourHostByUserUID:input_type -> host.TourHost
	19, // 44: host.TourHostService.VerifiedHostByAdmin:input_type -> host.RequestVerified
	15, // 45: host.TourHostService.ListTourHostByAdmin:input_type -> host.RequestParams
	22, // 46: host.TourHostService.UpdateStatusCardBusinessIDByAdmin:input_type -> host.RequestBusinessCardID
	24, // 47: host.TourHostService.UpdateTourHostByAdmin:input_type -> host.RequestAdministratorUpdateHost
	3,  // 48: host.TourHostService.UpdateTourHost:output_type -> host.UpdateTourHostResponse
	10, // 49: host.TourHostService.GetTourHostByID:output_type -> host.GetTourHostByIDResponse
	8,  // 50: host.TourHostService.CreateTourHost:output_type -> host.CreateTourHostResponse
	6,  // 51: host.TourHostService.UpdateHostCardID:output_type -> host.ResponseMessage
	6,  // 52: host.TourHostService.UpdateHostBussinessID:output_type -> host.ResponseMessage
	14, // 53: host.TourHostService.SignUpAsHost:output_type -> host.SignUpAsHostResponse
	9,  // 54: host.TourHostService.GetTourHostInfo:output_type -> host.GetTourHostResponse
	9,  // 55: host.TourHostService.GetTourHostByUserUID:output_type -> host.GetTourHostResponse
	21, // 56: host.TourHostService.VerifiedHostByAdmin:output_type -> host.ResponseVerified
	18, // 57: host.TourHostService.ListTourHostByAdmin:output_type -> host.ResponseTourHostList
	23, // 58: host.TourHostService.UpdateStatusCardBusinessIDByAdmin:output_type -> host.ResponseBusinessCardID
	25, // 59: host.TourHostService.UpdateTourHostByAdmin:output_type -> host.ResponseAdministratorUpdateHost
	48, // [48:60] is the sub-list for method output_type
	36, // [36:48] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_pb_host_proto_init() }
func file_pb_host_proto_init() {
	if File_pb_host_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_host_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TourHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTourHostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTourHostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostCardID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostBussinessID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTourHostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTourHostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTourHostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTourHostByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTourHostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTourHostRespone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignUpAsHostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignUpAsHostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paginate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TourHostList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTourHostList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestVerified); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostIDS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseVerified); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBusinessCardID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseBusinessCardID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestAdministratorUpdateHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_host_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseAdministratorUpdateHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_host_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_host_proto_goTypes,
		DependencyIndexes: file_pb_host_proto_depIdxs,
		EnumInfos:         file_pb_host_proto_enumTypes,
		MessageInfos:      file_pb_host_proto_msgTypes,
	}.Build()
	File_pb_host_proto = out.File
	file_pb_host_proto_rawDesc = nil
	file_pb_host_proto_goTypes = nil
	file_pb_host_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TourHostServiceClient is the client API for TourHostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TourHostServiceClient interface {
	UpdateTourHost(ctx context.Context, in *UpdateTourHostRequest, opts ...grpc.CallOption) (*UpdateTourHostResponse, error)
	GetTourHostByID(ctx context.Context, in *TourHost, opts ...grpc.CallOption) (*GetTourHostByIDResponse, error)
	CreateTourHost(ctx context.Context, in *CreateTourHostRequest, opts ...grpc.CallOption) (*CreateTourHostResponse, error)
	UpdateHostCardID(ctx context.Context, in *HostCardID, opts ...grpc.CallOption) (*ResponseMessage, error)
	UpdateHostBussinessID(ctx context.Context, in *HostBussinessID, opts ...grpc.CallOption) (*ResponseMessage, error)
	// this endpoint only use for handling to sign up guest as host
	SignUpAsHost(ctx context.Context, in *SignUpAsHostRequest, opts ...grpc.CallOption) (*SignUpAsHostResponse, error)
	GetTourHostInfo(ctx context.Context, in *TourHost, opts ...grpc.CallOption) (*GetTourHostResponse, error)
	GetTourHostByUserUID(ctx context.Context, in *TourHost, opts ...grpc.CallOption) (*GetTourHostResponse, error)
	VerifiedHostByAdmin(ctx context.Context, in *RequestVerified, opts ...grpc.CallOption) (*ResponseVerified, error)
	ListTourHostByAdmin(ctx context.Context, in *RequestParams, opts ...grpc.CallOption) (*ResponseTourHostList, error)
	UpdateStatusCardBusinessIDByAdmin(ctx context.Context, in *RequestBusinessCardID, opts ...grpc.CallOption) (*ResponseBusinessCardID, error)
	UpdateTourHostByAdmin(ctx context.Context, in *RequestAdministratorUpdateHost, opts ...grpc.CallOption) (*ResponseAdministratorUpdateHost, error)
}

type tourHostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTourHostServiceClient(cc grpc.ClientConnInterface) TourHostServiceClient {
	return &tourHostServiceClient{cc}
}

func (c *tourHostServiceClient) UpdateTourHost(ctx context.Context, in *UpdateTourHostRequest, opts ...grpc.CallOption) (*UpdateTourHostResponse, error) {
	out := new(UpdateTourHostResponse)
	err := c.cc.Invoke(ctx, "/host.TourHostService/UpdateTourHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourHostServiceClient) GetTourHostByID(ctx context.Context, in *TourHost, opts ...grpc.CallOption) (*GetTourHostByIDResponse, error) {
	out := new(GetTourHostByIDResponse)
	err := c.cc.Invoke(ctx, "/host.TourHostService/GetTourHostByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourHostServiceClient) CreateTourHost(ctx context.Context, in *CreateTourHostRequest, opts ...grpc.CallOption) (*CreateTourHostResponse, error) {
	out := new(CreateTourHostResponse)
	err := c.cc.Invoke(ctx, "/host.TourHostService/CreateTourHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourHostServiceClient) UpdateHostCardID(ctx context.Context, in *HostCardID, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/host.TourHostService/UpdateHostCardID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourHostServiceClient) UpdateHostBussinessID(ctx context.Context, in *HostBussinessID, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/host.TourHostService/UpdateHostBussinessID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourHostServiceClient) SignUpAsHost(ctx context.Context, in *SignUpAsHostRequest, opts ...grpc.CallOption) (*SignUpAsHostResponse, error) {
	out := new(SignUpAsHostResponse)
	err := c.cc.Invoke(ctx, "/host.TourHostService/SignUpAsHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourHostServiceClient) GetTourHostInfo(ctx context.Context, in *TourHost, opts ...grpc.CallOption) (*GetTourHostResponse, error) {
	out := new(GetTourHostResponse)
	err := c.cc.Invoke(ctx, "/host.TourHostService/GetTourHostInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourHostServiceClient) GetTourHostByUserUID(ctx context.Context, in *TourHost, opts ...grpc.CallOption) (*GetTourHostResponse, error) {
	out := new(GetTourHostResponse)
	err := c.cc.Invoke(ctx, "/host.TourHostService/GetTourHostByUserUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourHostServiceClient) VerifiedHostByAdmin(ctx context.Context, in *RequestVerified, opts ...grpc.CallOption) (*ResponseVerified, error) {
	out := new(ResponseVerified)
	err := c.cc.Invoke(ctx, "/host.TourHostService/VerifiedHostByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourHostServiceClient) ListTourHostByAdmin(ctx context.Context, in *RequestParams, opts ...grpc.CallOption) (*ResponseTourHostList, error) {
	out := new(ResponseTourHostList)
	err := c.cc.Invoke(ctx, "/host.TourHostService/ListTourHostByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourHostServiceClient) UpdateStatusCardBusinessIDByAdmin(ctx context.Context, in *RequestBusinessCardID, opts ...grpc.CallOption) (*ResponseBusinessCardID, error) {
	out := new(ResponseBusinessCardID)
	err := c.cc.Invoke(ctx, "/host.TourHostService/UpdateStatusCardBusinessIDByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourHostServiceClient) UpdateTourHostByAdmin(ctx context.Context, in *RequestAdministratorUpdateHost, opts ...grpc.CallOption) (*ResponseAdministratorUpdateHost, error) {
	out := new(ResponseAdministratorUpdateHost)
	err := c.cc.Invoke(ctx, "/host.TourHostService/UpdateTourHostByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TourHostServiceServer is the server API for TourHostService service.
type TourHostServiceServer interface {
	UpdateTourHost(context.Context, *UpdateTourHostRequest) (*UpdateTourHostResponse, error)
	GetTourHostByID(context.Context, *TourHost) (*GetTourHostByIDResponse, error)
	CreateTourHost(context.Context, *CreateTourHostRequest) (*CreateTourHostResponse, error)
	UpdateHostCardID(context.Context, *HostCardID) (*ResponseMessage, error)
	UpdateHostBussinessID(context.Context, *HostBussinessID) (*ResponseMessage, error)
	// this endpoint only use for handling to sign up guest as host
	SignUpAsHost(context.Context, *SignUpAsHostRequest) (*SignUpAsHostResponse, error)
	GetTourHostInfo(context.Context, *TourHost) (*GetTourHostResponse, error)
	GetTourHostByUserUID(context.Context, *TourHost) (*GetTourHostResponse, error)
	VerifiedHostByAdmin(context.Context, *RequestVerified) (*ResponseVerified, error)
	ListTourHostByAdmin(context.Context, *RequestParams) (*ResponseTourHostList, error)
	UpdateStatusCardBusinessIDByAdmin(context.Context, *RequestBusinessCardID) (*ResponseBusinessCardID, error)
	UpdateTourHostByAdmin(context.Context, *RequestAdministratorUpdateHost) (*ResponseAdministratorUpdateHost, error)
}

// UnimplementedTourHostServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTourHostServiceServer struct {
}

func (*UnimplementedTourHostServiceServer) UpdateTourHost(context.Context, *UpdateTourHostRequest) (*UpdateTourHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTourHost not implemented")
}
func (*UnimplementedTourHostServiceServer) GetTourHostByID(context.Context, *TourHost) (*GetTourHostByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTourHostByID not implemented")
}
func (*UnimplementedTourHostServiceServer) CreateTourHost(context.Context, *CreateTourHostRequest) (*CreateTourHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTourHost not implemented")
}
func (*UnimplementedTourHostServiceServer) UpdateHostCardID(context.Context, *HostCardID) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostCardID not implemented")
}
func (*UnimplementedTourHostServiceServer) UpdateHostBussinessID(context.Context, *HostBussinessID) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostBussinessID not implemented")
}
func (*UnimplementedTourHostServiceServer) SignUpAsHost(context.Context, *SignUpAsHostRequest) (*SignUpAsHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpAsHost not implemented")
}
func (*UnimplementedTourHostServiceServer) GetTourHostInfo(context.Context, *TourHost) (*GetTourHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTourHostInfo not implemented")
}
func (*UnimplementedTourHostServiceServer) GetTourHostByUserUID(context.Context, *TourHost) (*GetTourHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTourHostByUserUID not implemented")
}
func (*UnimplementedTourHostServiceServer) VerifiedHostByAdmin(context.Context, *RequestVerified) (*ResponseVerified, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifiedHostByAdmin not implemented")
}
func (*UnimplementedTourHostServiceServer) ListTourHostByAdmin(context.Context, *RequestParams) (*ResponseTourHostList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTourHostByAdmin not implemented")
}
func (*UnimplementedTourHostServiceServer) UpdateStatusCardBusinessIDByAdmin(context.Context, *RequestBusinessCardID) (*ResponseBusinessCardID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatusCardBusinessIDByAdmin not implemented")
}
func (*UnimplementedTourHostServiceServer) UpdateTourHostByAdmin(context.Context, *RequestAdministratorUpdateHost) (*ResponseAdministratorUpdateHost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTourHostByAdmin not implemented")
}

func RegisterTourHostServiceServer(s *grpc.Server, srv TourHostServiceServer) {
	s.RegisterService(&_TourHostService_serviceDesc, srv)
}

func _TourHostService_UpdateTourHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTourHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourHostServiceServer).UpdateTourHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/host.TourHostService/UpdateTourHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourHostServiceServer).UpdateTourHost(ctx, req.(*UpdateTourHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourHostService_GetTourHostByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourHost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourHostServiceServer).GetTourHostByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/host.TourHostService/GetTourHostByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourHostServiceServer).GetTourHostByID(ctx, req.(*TourHost))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourHostService_CreateTourHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTourHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourHostServiceServer).CreateTourHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/host.TourHostService/CreateTourHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourHostServiceServer).CreateTourHost(ctx, req.(*CreateTourHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourHostService_UpdateHostCardID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostCardID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourHostServiceServer).UpdateHostCardID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/host.TourHostService/UpdateHostCardID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourHostServiceServer).UpdateHostCardID(ctx, req.(*HostCardID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourHostService_UpdateHostBussinessID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostBussinessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourHostServiceServer).UpdateHostBussinessID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/host.TourHostService/UpdateHostBussinessID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourHostServiceServer).UpdateHostBussinessID(ctx, req.(*HostBussinessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourHostService_SignUpAsHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpAsHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourHostServiceServer).SignUpAsHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/host.TourHostService/SignUpAsHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourHostServiceServer).SignUpAsHost(ctx, req.(*SignUpAsHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourHostService_GetTourHostInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourHost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourHostServiceServer).GetTourHostInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/host.TourHostService/GetTourHostInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourHostServiceServer).GetTourHostInfo(ctx, req.(*TourHost))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourHostService_GetTourHostByUserUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourHost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourHostServiceServer).GetTourHostByUserUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/host.TourHostService/GetTourHostByUserUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourHostServiceServer).GetTourHostByUserUID(ctx, req.(*TourHost))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourHostService_VerifiedHostByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVerified)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourHostServiceServer).VerifiedHostByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/host.TourHostService/VerifiedHostByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourHostServiceServer).VerifiedHostByAdmin(ctx, req.(*RequestVerified))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourHostService_ListTourHostByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourHostServiceServer).ListTourHostByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/host.TourHostService/ListTourHostByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourHostServiceServer).ListTourHostByAdmin(ctx, req.(*RequestParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourHostService_UpdateStatusCardBusinessIDByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBusinessCardID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourHostServiceServer).UpdateStatusCardBusinessIDByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/host.TourHostService/UpdateStatusCardBusinessIDByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourHostServiceServer).UpdateStatusCardBusinessIDByAdmin(ctx, req.(*RequestBusinessCardID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourHostService_UpdateTourHostByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAdministratorUpdateHost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourHostServiceServer).UpdateTourHostByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/host.TourHostService/UpdateTourHostByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourHostServiceServer).UpdateTourHostByAdmin(ctx, req.(*RequestAdministratorUpdateHost))
	}
	return interceptor(ctx, in, info, handler)
}

var _TourHostService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "host.TourHostService",
	HandlerType: (*TourHostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateTourHost",
			Handler:    _TourHostService_UpdateTourHost_Handler,
		},
		{
			MethodName: "GetTourHostByID",
			Handler:    _TourHostService_GetTourHostByID_Handler,
		},
		{
			MethodName: "CreateTourHost",
			Handler:    _TourHostService_CreateTourHost_Handler,
		},
		{
			MethodName: "UpdateHostCardID",
			Handler:    _TourHostService_UpdateHostCardID_Handler,
		},
		{
			MethodName: "UpdateHostBussinessID",
			Handler:    _TourHostService_UpdateHostBussinessID_Handler,
		},
		{
			MethodName: "SignUpAsHost",
			Handler:    _TourHostService_SignUpAsHost_Handler,
		},
		{
			MethodName: "GetTourHostInfo",
			Handler:    _TourHostService_GetTourHostInfo_Handler,
		},
		{
			MethodName: "GetTourHostByUserUID",
			Handler:    _TourHostService_GetTourHostByUserUID_Handler,
		},
		{
			MethodName: "VerifiedHostByAdmin",
			Handler:    _TourHostService_VerifiedHostByAdmin_Handler,
		},
		{
			MethodName: "ListTourHostByAdmin",
			Handler:    _TourHostService_ListTourHostByAdmin_Handler,
		},
		{
			MethodName: "UpdateStatusCardBusinessIDByAdmin",
			Handler:    _TourHostService_UpdateStatusCardBusinessIDByAdmin_Handler,
		},
		{
			MethodName: "UpdateTourHostByAdmin",
			Handler:    _TourHostService_UpdateTourHostByAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/host.proto",
}
