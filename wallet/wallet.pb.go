// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.1
// source: wallet.proto

package wallet

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type LogType int32

const (
	LogType_withdraw_request LogType = 0
	LogType_withdraw_success LogType = 1
	LogType_withdraw_failed  LogType = 2
	LogType_refund           LogType = 3
	LogType_dp               LogType = 4
	LogType_full_payment     LogType = 5
)

// Enum value maps for LogType.
var (
	LogType_name = map[int32]string{
		0: "withdraw_request",
		1: "withdraw_success",
		2: "withdraw_failed",
		3: "refund",
		4: "dp",
		5: "full_payment",
	}
	LogType_value = map[string]int32{
		"withdraw_request": 0,
		"withdraw_success": 1,
		"withdraw_failed":  2,
		"refund":           3,
		"dp":               4,
		"full_payment":     5,
	}
)

func (x LogType) Enum() *LogType {
	p := new(LogType)
	*p = x
	return p
}

func (x LogType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogType) Descriptor() protoreflect.EnumDescriptor {
	return file_wallet_proto_enumTypes[0].Descriptor()
}

func (LogType) Type() protoreflect.EnumType {
	return &file_wallet_proto_enumTypes[0]
}

func (x LogType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogType.Descriptor instead.
func (LogType) EnumDescriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{0}
}

type TransactionType int32

const (
	TransactionType_money_in  TransactionType = 0
	TransactionType_money_out TransactionType = 1
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0: "money_in",
		1: "money_out",
	}
	TransactionType_value = map[string]int32{
		"money_in":  0,
		"money_out": 1,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_wallet_proto_enumTypes[1].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_wallet_proto_enumTypes[1]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{1}
}

type TransactionStatus int32

const (
	TransactionStatus_success TransactionStatus = 0
	TransactionStatus_failed  TransactionStatus = 1
	TransactionStatus_pending TransactionStatus = 2
)

// Enum value maps for TransactionStatus.
var (
	TransactionStatus_name = map[int32]string{
		0: "success",
		1: "failed",
		2: "pending",
	}
	TransactionStatus_value = map[string]int32{
		"success": 0,
		"failed":  1,
		"pending": 2,
	}
)

func (x TransactionStatus) Enum() *TransactionStatus {
	p := new(TransactionStatus)
	*p = x
	return p
}

func (x TransactionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_wallet_proto_enumTypes[2].Descriptor()
}

func (TransactionStatus) Type() protoreflect.EnumType {
	return &file_wallet_proto_enumTypes[2]
}

func (x TransactionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionStatus.Descriptor instead.
func (TransactionStatus) EnumDescriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{2}
}

type ReqWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BalanceUid        string `protobuf:"bytes,1,opt,name=balance_uid,json=balanceUid,proto3" json:"balance_uid,omitempty"` // hold balanceid
	TourId            string `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	ScheduleId        string `protobuf:"bytes,3,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Amount            int32  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	AdminFee          int32  `protobuf:"varint,5,opt,name=admin_fee,json=adminFee,proto3" json:"admin_fee,omitempty"`
	BankCode          string `protobuf:"bytes,6,opt,name=bank_code,json=bankCode,proto3" json:"bank_code,omitempty"`
	AccountHolderName string `protobuf:"bytes,7,opt,name=account_holder_name,json=accountHolderName,proto3" json:"account_holder_name,omitempty"`
	AccountNumber     string `protobuf:"bytes,8,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	Description       string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	BankName          string `protobuf:"bytes,10,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
}

func (x *ReqWithdraw) Reset() {
	*x = ReqWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqWithdraw) ProtoMessage() {}

func (x *ReqWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqWithdraw.ProtoReflect.Descriptor instead.
func (*ReqWithdraw) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{0}
}

func (x *ReqWithdraw) GetBalanceUid() string {
	if x != nil {
		return x.BalanceUid
	}
	return ""
}

func (x *ReqWithdraw) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *ReqWithdraw) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *ReqWithdraw) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ReqWithdraw) GetAdminFee() int32 {
	if x != nil {
		return x.AdminFee
	}
	return 0
}

func (x *ReqWithdraw) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

func (x *ReqWithdraw) GetAccountHolderName() string {
	if x != nil {
		return x.AccountHolderName
	}
	return ""
}

func (x *ReqWithdraw) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *ReqWithdraw) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ReqWithdraw) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

type Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BussinessName string `protobuf:"bytes,3,opt,name=bussiness_name,json=bussinessName,proto3" json:"bussiness_name,omitempty"`
	Email         string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Contact       string `protobuf:"bytes,5,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (x *Host) Reset() {
	*x = Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host) ProtoMessage() {}

func (x *Host) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Host.ProtoReflect.Descriptor instead.
func (*Host) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{1}
}

func (x *Host) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Host) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Host) GetBussinessName() string {
	if x != nil {
		return x.BussinessName
	}
	return ""
}

func (x *Host) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Host) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

type DeletedUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *DeletedUser) Reset() {
	*x = DeletedUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletedUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletedUser) ProtoMessage() {}

func (x *DeletedUser) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletedUser.ProtoReflect.Descriptor instead.
func (*DeletedUser) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{2}
}

func (x *DeletedUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeletedUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeletedUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type HostWithdrawCallback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId                  string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExternalId              string                 `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Amount                  int32                  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	BankCode                string                 `protobuf:"bytes,5,opt,name=bank_code,json=bankCode,proto3" json:"bank_code,omitempty"`
	AccountHolderName       string                 `protobuf:"bytes,6,opt,name=account_holder_name,json=accountHolderName,proto3" json:"account_holder_name,omitempty"`
	DisbursementDescription string                 `protobuf:"bytes,7,opt,name=disbursement_description,json=disbursementDescription,proto3" json:"disbursement_description,omitempty"`
	FailureCode             string                 `protobuf:"bytes,8,opt,name=failure_code,json=failureCode,proto3" json:"failure_code,omitempty"`
	IsInstant               bool                   `protobuf:"varint,9,opt,name=is_instant,json=isInstant,proto3" json:"is_instant,omitempty"`
	Status                  string                 `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	Created                 *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created,proto3" json:"created,omitempty"`
	Updated                 *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated,proto3" json:"updated,omitempty"`
	EmailTo                 []string               `protobuf:"bytes,13,rep,name=email_to,json=emailTo,proto3" json:"email_to,omitempty"`
	EmailCc                 []string               `protobuf:"bytes,14,rep,name=email_cc,json=emailCc,proto3" json:"email_cc,omitempty"`
	EmailBcc                []string               `protobuf:"bytes,15,rep,name=email_bcc,json=emailBcc,proto3" json:"email_bcc,omitempty"`
}

func (x *HostWithdrawCallback) Reset() {
	*x = HostWithdrawCallback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostWithdrawCallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostWithdrawCallback) ProtoMessage() {}

func (x *HostWithdrawCallback) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostWithdrawCallback.ProtoReflect.Descriptor instead.
func (*HostWithdrawCallback) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{3}
}

func (x *HostWithdrawCallback) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HostWithdrawCallback) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *HostWithdrawCallback) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *HostWithdrawCallback) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *HostWithdrawCallback) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

func (x *HostWithdrawCallback) GetAccountHolderName() string {
	if x != nil {
		return x.AccountHolderName
	}
	return ""
}

func (x *HostWithdrawCallback) GetDisbursementDescription() string {
	if x != nil {
		return x.DisbursementDescription
	}
	return ""
}

func (x *HostWithdrawCallback) GetFailureCode() string {
	if x != nil {
		return x.FailureCode
	}
	return ""
}

func (x *HostWithdrawCallback) GetIsInstant() bool {
	if x != nil {
		return x.IsInstant
	}
	return false
}

func (x *HostWithdrawCallback) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HostWithdrawCallback) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *HostWithdrawCallback) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *HostWithdrawCallback) GetEmailTo() []string {
	if x != nil {
		return x.EmailTo
	}
	return nil
}

func (x *HostWithdrawCallback) GetEmailCc() []string {
	if x != nil {
		return x.EmailCc
	}
	return nil
}

func (x *HostWithdrawCallback) GetEmailBcc() []string {
	if x != nil {
		return x.EmailBcc
	}
	return nil
}

type HostWithdrawCallbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *HostWithdrawCallbackResponse) Reset() {
	*x = HostWithdrawCallbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostWithdrawCallbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostWithdrawCallbackResponse) ProtoMessage() {}

func (x *HostWithdrawCallbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostWithdrawCallbackResponse.ProtoReflect.Descriptor instead.
func (*HostWithdrawCallbackResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{4}
}

func (x *HostWithdrawCallbackResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type Balance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	UserUid   string                 `protobuf:"bytes,2,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	Amount    int32                  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	UserType  string                 `protobuf:"bytes,4,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Balance) Reset() {
	*x = Balance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balance) ProtoMessage() {}

func (x *Balance) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balance.ProtoReflect.Descriptor instead.
func (*Balance) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{5}
}

func (x *Balance) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Balance) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *Balance) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Balance) GetUserType() string {
	if x != nil {
		return x.UserType
	}
	return ""
}

func (x *Balance) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Balances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balances []*Balance `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty"`
}

func (x *Balances) Reset() {
	*x = Balances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balances) ProtoMessage() {}

func (x *Balances) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balances.ProtoReflect.Descriptor instead.
func (*Balances) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{6}
}

func (x *Balances) GetBalances() []*Balance {
	if x != nil {
		return x.Balances
	}
	return nil
}

type BalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Balance `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BalanceResponse) Reset() {
	*x = BalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceResponse) ProtoMessage() {}

func (x *BalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceResponse.ProtoReflect.Descriptor instead.
func (*BalanceResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{7}
}

func (x *BalanceResponse) GetData() *Balance {
	if x != nil {
		return x.Data
	}
	return nil
}

type BalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUid  string `protobuf:"bytes,1,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	UserType string `protobuf:"bytes,2,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`
}

func (x *BalanceRequest) Reset() {
	*x = BalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceRequest) ProtoMessage() {}

func (x *BalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceRequest.ProtoReflect.Descriptor instead.
func (*BalanceRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{8}
}

func (x *BalanceRequest) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *BalanceRequest) GetUserType() string {
	if x != nil {
		return x.UserType
	}
	return ""
}

type LokavenBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LokavenBalanceRequest) Reset() {
	*x = LokavenBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LokavenBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LokavenBalanceRequest) ProtoMessage() {}

func (x *LokavenBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LokavenBalanceRequest.ProtoReflect.Descriptor instead.
func (*LokavenBalanceRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{9}
}

type Tour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourTitle     string                 `protobuf:"bytes,1,opt,name=tour_title,json=tourTitle,proto3" json:"tour_title,omitempty"`
	TourStartDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=tour_start_date,json=tourStartDate,proto3" json:"tour_start_date,omitempty"`
	TourEndDate   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=tour_end_date,json=tourEndDate,proto3" json:"tour_end_date,omitempty"`
	ScheduleId    string                 `protobuf:"bytes,4,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	TourId        string                 `protobuf:"bytes,5,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
}

func (x *Tour) Reset() {
	*x = Tour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tour) ProtoMessage() {}

func (x *Tour) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tour.ProtoReflect.Descriptor instead.
func (*Tour) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{10}
}

func (x *Tour) GetTourTitle() string {
	if x != nil {
		return x.TourTitle
	}
	return ""
}

func (x *Tour) GetTourStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TourStartDate
	}
	return nil
}

func (x *Tour) GetTourEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TourEndDate
	}
	return nil
}

func (x *Tour) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *Tour) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

type LogBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid               string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	BalanceUid        string                 `protobuf:"bytes,2,opt,name=balance_uid,json=balanceUid,proto3" json:"balance_uid,omitempty"`
	UserUid           string                 `protobuf:"bytes,3,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	Tour              *Tour                  `protobuf:"bytes,4,opt,name=tour,proto3" json:"tour,omitempty"`
	Amount            int32                  `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Type              LogType                `protobuf:"varint,6,opt,name=type,proto3,enum=wallet.LogType" json:"type,omitempty"`
	Message           string                 `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	TransactionId     string                 `protobuf:"bytes,8,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	TransactionType   TransactionType        `protobuf:"varint,9,opt,name=transaction_type,json=transactionType,proto3,enum=wallet.TransactionType" json:"transaction_type,omitempty"`
	Status            TransactionStatus      `protobuf:"varint,10,opt,name=status,proto3,enum=wallet.TransactionStatus" json:"status,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	AdministrationFee int32                  `protobuf:"varint,12,opt,name=administration_fee,json=administrationFee,proto3" json:"administration_fee,omitempty"`
	BankName          string                 `protobuf:"bytes,13,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	AccountNumber     string                 `protobuf:"bytes,14,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	UserType          string                 `protobuf:"bytes,15,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`
	OrderId           string                 `protobuf:"bytes,16,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *LogBalance) Reset() {
	*x = LogBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogBalance) ProtoMessage() {}

func (x *LogBalance) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogBalance.ProtoReflect.Descriptor instead.
func (*LogBalance) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{11}
}

func (x *LogBalance) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *LogBalance) GetBalanceUid() string {
	if x != nil {
		return x.BalanceUid
	}
	return ""
}

func (x *LogBalance) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *LogBalance) GetTour() *Tour {
	if x != nil {
		return x.Tour
	}
	return nil
}

func (x *LogBalance) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *LogBalance) GetType() LogType {
	if x != nil {
		return x.Type
	}
	return LogType_withdraw_request
}

func (x *LogBalance) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LogBalance) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *LogBalance) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_money_in
}

func (x *LogBalance) GetStatus() TransactionStatus {
	if x != nil {
		return x.Status
	}
	return TransactionStatus_success
}

func (x *LogBalance) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LogBalance) GetAdministrationFee() int32 {
	if x != nil {
		return x.AdministrationFee
	}
	return 0
}

func (x *LogBalance) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *LogBalance) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *LogBalance) GetUserType() string {
	if x != nil {
		return x.UserType
	}
	return ""
}

func (x *LogBalance) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type LogBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid               string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	BalanceUid        string                 `protobuf:"bytes,2,opt,name=balance_uid,json=balanceUid,proto3" json:"balance_uid,omitempty"`
	UserUid           string                 `protobuf:"bytes,3,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	Tour              *Tour                  `protobuf:"bytes,4,opt,name=tour,proto3" json:"tour,omitempty"`
	Amount            int32                  `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Type              string                 `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Message           string                 `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	TransactionId     string                 `protobuf:"bytes,8,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	TransactionType   string                 `protobuf:"bytes,9,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	Status            string                 `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	AdministrationFee int32                  `protobuf:"varint,12,opt,name=administration_fee,json=administrationFee,proto3" json:"administration_fee,omitempty"`
	WithdrawalFee     int32                  `protobuf:"varint,13,opt,name=withdrawal_fee,json=withdrawalFee,proto3" json:"withdrawal_fee,omitempty"`
	PaymentFee        int32                  `protobuf:"varint,14,opt,name=payment_fee,json=paymentFee,proto3" json:"payment_fee,omitempty"`
	Pph23             int32                  `protobuf:"varint,15,opt,name=pph23,proto3" json:"pph23,omitempty"`
	Commission        int32                  `protobuf:"varint,16,opt,name=commission,proto3" json:"commission,omitempty"`
	TotalTax          int32                  `protobuf:"varint,17,opt,name=total_tax,json=totalTax,proto3" json:"total_tax,omitempty"`
	BankName          string                 `protobuf:"bytes,18,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	AccountNumber     string                 `protobuf:"bytes,19,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UserType          string                 `protobuf:"bytes,21,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`
}

func (x *LogBalanceResponse) Reset() {
	*x = LogBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogBalanceResponse) ProtoMessage() {}

func (x *LogBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogBalanceResponse.ProtoReflect.Descriptor instead.
func (*LogBalanceResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{12}
}

func (x *LogBalanceResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *LogBalanceResponse) GetBalanceUid() string {
	if x != nil {
		return x.BalanceUid
	}
	return ""
}

func (x *LogBalanceResponse) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *LogBalanceResponse) GetTour() *Tour {
	if x != nil {
		return x.Tour
	}
	return nil
}

func (x *LogBalanceResponse) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *LogBalanceResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LogBalanceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LogBalanceResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *LogBalanceResponse) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *LogBalanceResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *LogBalanceResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LogBalanceResponse) GetAdministrationFee() int32 {
	if x != nil {
		return x.AdministrationFee
	}
	return 0
}

func (x *LogBalanceResponse) GetWithdrawalFee() int32 {
	if x != nil {
		return x.WithdrawalFee
	}
	return 0
}

func (x *LogBalanceResponse) GetPaymentFee() int32 {
	if x != nil {
		return x.PaymentFee
	}
	return 0
}

func (x *LogBalanceResponse) GetPph23() int32 {
	if x != nil {
		return x.Pph23
	}
	return 0
}

func (x *LogBalanceResponse) GetCommission() int32 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *LogBalanceResponse) GetTotalTax() int32 {
	if x != nil {
		return x.TotalTax
	}
	return 0
}

func (x *LogBalanceResponse) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *LogBalanceResponse) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *LogBalanceResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *LogBalanceResponse) GetUserType() string {
	if x != nil {
		return x.UserType
	}
	return ""
}

type SingleLogBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *LogBalanceResponse `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SingleLogBalanceResponse) Reset() {
	*x = SingleLogBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleLogBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleLogBalanceResponse) ProtoMessage() {}

func (x *SingleLogBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleLogBalanceResponse.ProtoReflect.Descriptor instead.
func (*SingleLogBalanceResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{13}
}

func (x *SingleLogBalanceResponse) GetData() *LogBalanceResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type LogsBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*LogBalanceResponse `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *LogsBalanceResponse) Reset() {
	*x = LogsBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogsBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogsBalanceResponse) ProtoMessage() {}

func (x *LogsBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogsBalanceResponse.ProtoReflect.Descriptor instead.
func (*LogsBalanceResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{14}
}

func (x *LogsBalanceResponse) GetData() []*LogBalanceResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type TransactionInHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Type        LogType                `protobuf:"varint,2,opt,name=type,proto3,enum=wallet.LogType" json:"type,omitempty"`
	Amount      string                 `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Status      TransactionStatus      `protobuf:"varint,4,opt,name=status,proto3,enum=wallet.TransactionStatus" json:"status,omitempty"`
	Tour        *Tour                  `protobuf:"bytes,5,opt,name=tour,proto3" json:"tour,omitempty"`
	Host        *Host                  `protobuf:"bytes,6,opt,name=host,proto3" json:"host,omitempty"`
	DeletedUser *DeletedUser           `protobuf:"bytes,7,opt,name=deleted_user,json=deletedUser,proto3" json:"deleted_user,omitempty"`
}

func (x *TransactionInHistoryResponse) Reset() {
	*x = TransactionInHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionInHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionInHistoryResponse) ProtoMessage() {}

func (x *TransactionInHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionInHistoryResponse.ProtoReflect.Descriptor instead.
func (*TransactionInHistoryResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{15}
}

func (x *TransactionInHistoryResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TransactionInHistoryResponse) GetType() LogType {
	if x != nil {
		return x.Type
	}
	return LogType_withdraw_request
}

func (x *TransactionInHistoryResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *TransactionInHistoryResponse) GetStatus() TransactionStatus {
	if x != nil {
		return x.Status
	}
	return TransactionStatus_success
}

func (x *TransactionInHistoryResponse) GetTour() *Tour {
	if x != nil {
		return x.Tour
	}
	return nil
}

func (x *TransactionInHistoryResponse) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *TransactionInHistoryResponse) GetDeletedUser() *DeletedUser {
	if x != nil {
		return x.DeletedUser
	}
	return nil
}

type LogBalancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserType string `protobuf:"bytes,2,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`
	Limit    int32  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int32  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *LogBalancesRequest) Reset() {
	*x = LogBalancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogBalancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogBalancesRequest) ProtoMessage() {}

func (x *LogBalancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogBalancesRequest.ProtoReflect.Descriptor instead.
func (*LogBalancesRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{16}
}

func (x *LogBalancesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LogBalancesRequest) GetUserType() string {
	if x != nil {
		return x.UserType
	}
	return ""
}

func (x *LogBalancesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *LogBalancesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type LogHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Limit  int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Page   int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Search string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	Order  string `protobuf:"bytes,5,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *LogHistoryRequest) Reset() {
	*x = LogHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogHistoryRequest) ProtoMessage() {}

func (x *LogHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogHistoryRequest.ProtoReflect.Descriptor instead.
func (*LogHistoryRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{17}
}

func (x *LogHistoryRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *LogHistoryRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *LogHistoryRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *LogHistoryRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *LogHistoryRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type LogBalancesRequestWithSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TourId        string `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	ScheduleId    string `protobuf:"bytes,3,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	TransactionId string `protobuf:"bytes,4,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	OrderId       string `protobuf:"bytes,5,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Type          string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *LogBalancesRequestWithSchedule) Reset() {
	*x = LogBalancesRequestWithSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogBalancesRequestWithSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogBalancesRequestWithSchedule) ProtoMessage() {}

func (x *LogBalancesRequestWithSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogBalancesRequestWithSchedule.ProtoReflect.Descriptor instead.
func (*LogBalancesRequestWithSchedule) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{18}
}

func (x *LogBalancesRequestWithSchedule) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LogBalancesRequestWithSchedule) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *LogBalancesRequestWithSchedule) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *LogBalancesRequestWithSchedule) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *LogBalancesRequestWithSchedule) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *LogBalancesRequestWithSchedule) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type AllTransactionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     []*LogBalanceResponse `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Paginate *Paginate             `protobuf:"bytes,2,opt,name=paginate,proto3" json:"paginate,omitempty"`
}

func (x *AllTransactionListResponse) Reset() {
	*x = AllTransactionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTransactionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTransactionListResponse) ProtoMessage() {}

func (x *AllTransactionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTransactionListResponse.ProtoReflect.Descriptor instead.
func (*AllTransactionListResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{19}
}

func (x *AllTransactionListResponse) GetData() []*LogBalanceResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AllTransactionListResponse) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

type Paginate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentPage int32 `protobuf:"varint,1,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	NextPage    int32 `protobuf:"varint,2,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	TotalPage   int32 `protobuf:"varint,3,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	PerPage     int32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *Paginate) Reset() {
	*x = Paginate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paginate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paginate) ProtoMessage() {}

func (x *Paginate) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paginate.ProtoReflect.Descriptor instead.
func (*Paginate) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{20}
}

func (x *Paginate) GetCurrentPage() int32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *Paginate) GetNextPage() int32 {
	if x != nil {
		return x.NextPage
	}
	return 0
}

func (x *Paginate) GetTotalPage() int32 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *Paginate) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field    string `protobuf:"bytes,1,opt,name=Field,proto3" json:"Field,omitempty"`
	Operator string `protobuf:"bytes,2,opt,name=Operator,proto3" json:"Operator,omitempty"`
	Value    string `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{21}
}

func (x *Filter) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Filter) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *Filter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type BrowseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*Filter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	Limit   int32     `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32     `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *BrowseRequest) Reset() {
	*x = BrowseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowseRequest) ProtoMessage() {}

func (x *BrowseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowseRequest.ProtoReflect.Descriptor instead.
func (*BrowseRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{22}
}

func (x *BrowseRequest) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *BrowseRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *BrowseRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type AllTransactionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query   string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	PerPage int32  `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Page    int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *AllTransactionListRequest) Reset() {
	*x = AllTransactionListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTransactionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTransactionListRequest) ProtoMessage() {}

func (x *AllTransactionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTransactionListRequest.ProtoReflect.Descriptor instead.
func (*AllTransactionListRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{23}
}

func (x *AllTransactionListRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *AllTransactionListRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *AllTransactionListRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type TransactionDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourId     string `protobuf:"bytes,1,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	ScheduleId string `protobuf:"bytes,2,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *TransactionDetailRequest) Reset() {
	*x = TransactionDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionDetailRequest) ProtoMessage() {}

func (x *TransactionDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionDetailRequest.ProtoReflect.Descriptor instead.
func (*TransactionDetailRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{24}
}

func (x *TransactionDetailRequest) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *TransactionDetailRequest) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

type TransactionDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title       string          `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	BookingInfo *BookingInfo    `protobuf:"bytes,3,opt,name=booking_info,json=bookingInfo,proto3" json:"booking_info,omitempty"`
	DpDetail    *DPDetail       `protobuf:"bytes,4,opt,name=dp_detail,json=dpDetail,proto3" json:"dp_detail,omitempty"`
	FpDetail    *FPDetail       `protobuf:"bytes,5,opt,name=fp_detail,json=fpDetail,proto3" json:"fp_detail,omitempty"`
	WdDetail    *WithdrawDetail `protobuf:"bytes,6,opt,name=wd_detail,json=wdDetail,proto3" json:"wd_detail,omitempty"`
}

func (x *TransactionDetailResponse) Reset() {
	*x = TransactionDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionDetailResponse) ProtoMessage() {}

func (x *TransactionDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionDetailResponse.ProtoReflect.Descriptor instead.
func (*TransactionDetailResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{25}
}

func (x *TransactionDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TransactionDetailResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TransactionDetailResponse) GetBookingInfo() *BookingInfo {
	if x != nil {
		return x.BookingInfo
	}
	return nil
}

func (x *TransactionDetailResponse) GetDpDetail() *DPDetail {
	if x != nil {
		return x.DpDetail
	}
	return nil
}

func (x *TransactionDetailResponse) GetFpDetail() *FPDetail {
	if x != nil {
		return x.FpDetail
	}
	return nil
}

func (x *TransactionDetailResponse) GetWdDetail() *WithdrawDetail {
	if x != nil {
		return x.WdDetail
	}
	return nil
}

type DPDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date            *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	InvoiceNumber   string                 `protobuf:"bytes,2,opt,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	Type            string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	TransactionType string                 `protobuf:"bytes,4,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	Total           int32                  `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
	HostName        string                 `protobuf:"bytes,7,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	Email           string                 `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	TourTitle       string                 `protobuf:"bytes,9,opt,name=tour_title,json=tourTitle,proto3" json:"tour_title,omitempty"`
	ScheduleInfo    *PackageSchedule       `protobuf:"bytes,10,opt,name=schedule_info,json=scheduleInfo,proto3" json:"schedule_info,omitempty"`
	Link            string                 `protobuf:"bytes,11,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *DPDetail) Reset() {
	*x = DPDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DPDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DPDetail) ProtoMessage() {}

func (x *DPDetail) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DPDetail.ProtoReflect.Descriptor instead.
func (*DPDetail) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{26}
}

func (x *DPDetail) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *DPDetail) GetInvoiceNumber() string {
	if x != nil {
		return x.InvoiceNumber
	}
	return ""
}

func (x *DPDetail) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DPDetail) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *DPDetail) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DPDetail) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *DPDetail) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *DPDetail) GetTourTitle() string {
	if x != nil {
		return x.TourTitle
	}
	return ""
}

func (x *DPDetail) GetScheduleInfo() *PackageSchedule {
	if x != nil {
		return x.ScheduleInfo
	}
	return nil
}

func (x *DPDetail) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type FPDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date            *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	InvoiceNumber   string                 `protobuf:"bytes,2,opt,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	Type            string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	TransactionType string                 `protobuf:"bytes,4,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	Total           int32                  `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
	HostName        string                 `protobuf:"bytes,7,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	Email           string                 `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	TourTitle       string                 `protobuf:"bytes,9,opt,name=tour_title,json=tourTitle,proto3" json:"tour_title,omitempty"`
	ScheduleInfo    *PackageSchedule       `protobuf:"bytes,10,opt,name=schedule_info,json=scheduleInfo,proto3" json:"schedule_info,omitempty"`
	Link            string                 `protobuf:"bytes,11,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *FPDetail) Reset() {
	*x = FPDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FPDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FPDetail) ProtoMessage() {}

func (x *FPDetail) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FPDetail.ProtoReflect.Descriptor instead.
func (*FPDetail) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{27}
}

func (x *FPDetail) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *FPDetail) GetInvoiceNumber() string {
	if x != nil {
		return x.InvoiceNumber
	}
	return ""
}

func (x *FPDetail) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FPDetail) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *FPDetail) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FPDetail) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *FPDetail) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *FPDetail) GetTourTitle() string {
	if x != nil {
		return x.TourTitle
	}
	return ""
}

func (x *FPDetail) GetScheduleInfo() *PackageSchedule {
	if x != nil {
		return x.ScheduleInfo
	}
	return nil
}

func (x *FPDetail) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type WithdrawDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date            *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	InvoiceNumber   string                 `protobuf:"bytes,2,opt,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	Type            string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	TransactionType string                 `protobuf:"bytes,4,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	Total           int32                  `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
	HostName        string                 `protobuf:"bytes,7,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	Email           string                 `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	TourTitle       string                 `protobuf:"bytes,9,opt,name=tour_title,json=tourTitle,proto3" json:"tour_title,omitempty"`
	ScheduleInfo    *PackageSchedule       `protobuf:"bytes,10,opt,name=schedule_info,json=scheduleInfo,proto3" json:"schedule_info,omitempty"`
	Bank            string                 `protobuf:"bytes,11,opt,name=bank,proto3" json:"bank,omitempty"`
	BankAccount     string                 `protobuf:"bytes,12,opt,name=bank_account,json=bankAccount,proto3" json:"bank_account,omitempty"`
	Link            string                 `protobuf:"bytes,13,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *WithdrawDetail) Reset() {
	*x = WithdrawDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawDetail) ProtoMessage() {}

func (x *WithdrawDetail) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawDetail.ProtoReflect.Descriptor instead.
func (*WithdrawDetail) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{28}
}

func (x *WithdrawDetail) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *WithdrawDetail) GetInvoiceNumber() string {
	if x != nil {
		return x.InvoiceNumber
	}
	return ""
}

func (x *WithdrawDetail) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WithdrawDetail) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *WithdrawDetail) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *WithdrawDetail) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *WithdrawDetail) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *WithdrawDetail) GetTourTitle() string {
	if x != nil {
		return x.TourTitle
	}
	return ""
}

func (x *WithdrawDetail) GetScheduleInfo() *PackageSchedule {
	if x != nil {
		return x.ScheduleInfo
	}
	return nil
}

func (x *WithdrawDetail) GetBank() string {
	if x != nil {
		return x.Bank
	}
	return ""
}

func (x *WithdrawDetail) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *WithdrawDetail) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type BookingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentDate       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`
	InvoiceNumber     string                 `protobuf:"bytes,2,opt,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	TotalPaidPrice    int32                  `protobuf:"varint,3,opt,name=total_paid_price,json=totalPaidPrice,proto3" json:"total_paid_price,omitempty"`
	Discount          float64                `protobuf:"fixed64,4,opt,name=discount,proto3" json:"discount,omitempty"`
	Tax               float64                `protobuf:"fixed64,5,opt,name=tax,proto3" json:"tax,omitempty"`
	Name              string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Email             string                 `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	TourTitle         string                 `protobuf:"bytes,8,opt,name=tour_title,json=tourTitle,proto3" json:"tour_title,omitempty"`
	ScheduleInfo      *PackageSchedule       `protobuf:"bytes,9,opt,name=schedule_info,json=scheduleInfo,proto3" json:"schedule_info,omitempty"`
	TotalParticipants int32                  `protobuf:"varint,10,opt,name=total_participants,json=totalParticipants,proto3" json:"total_participants,omitempty"`
}

func (x *BookingInfo) Reset() {
	*x = BookingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingInfo) ProtoMessage() {}

func (x *BookingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingInfo.ProtoReflect.Descriptor instead.
func (*BookingInfo) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{29}
}

func (x *BookingInfo) GetPaymentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDate
	}
	return nil
}

func (x *BookingInfo) GetInvoiceNumber() string {
	if x != nil {
		return x.InvoiceNumber
	}
	return ""
}

func (x *BookingInfo) GetTotalPaidPrice() int32 {
	if x != nil {
		return x.TotalPaidPrice
	}
	return 0
}

func (x *BookingInfo) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *BookingInfo) GetTax() float64 {
	if x != nil {
		return x.Tax
	}
	return 0
}

func (x *BookingInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BookingInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *BookingInfo) GetTourTitle() string {
	if x != nil {
		return x.TourTitle
	}
	return ""
}

func (x *BookingInfo) GetScheduleInfo() *PackageSchedule {
	if x != nil {
		return x.ScheduleInfo
	}
	return nil
}

func (x *BookingInfo) GetTotalParticipants() int32 {
	if x != nil {
		return x.TotalParticipants
	}
	return 0
}

type PackageSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId    string                 `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	TourId        string                 `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	TourStartDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=tour_start_date,json=tourStartDate,proto3" json:"tour_start_date,omitempty"`
	TourEndDate   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=tour_end_date,json=tourEndDate,proto3" json:"tour_end_date,omitempty"`
}

func (x *PackageSchedule) Reset() {
	*x = PackageSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageSchedule) ProtoMessage() {}

func (x *PackageSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageSchedule.ProtoReflect.Descriptor instead.
func (*PackageSchedule) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{30}
}

func (x *PackageSchedule) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *PackageSchedule) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *PackageSchedule) GetTourStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TourStartDate
	}
	return nil
}

func (x *PackageSchedule) GetTourEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TourEndDate
	}
	return nil
}

type TransactionTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Booking     []*TransactionBKTotal `protobuf:"bytes,1,rep,name=booking,proto3" json:"booking,omitempty"`
	DownPayment []*TransactionDPTotal `protobuf:"bytes,2,rep,name=down_payment,json=downPayment,proto3" json:"down_payment,omitempty"`
	FullPayment []*TransactionFPTotal `protobuf:"bytes,3,rep,name=full_payment,json=fullPayment,proto3" json:"full_payment,omitempty"`
	Withdraw    []*TransactionWDTotal `protobuf:"bytes,4,rep,name=withdraw,proto3" json:"withdraw,omitempty"`
}

func (x *TransactionTotal) Reset() {
	*x = TransactionTotal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionTotal) ProtoMessage() {}

func (x *TransactionTotal) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionTotal.ProtoReflect.Descriptor instead.
func (*TransactionTotal) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{31}
}

func (x *TransactionTotal) GetBooking() []*TransactionBKTotal {
	if x != nil {
		return x.Booking
	}
	return nil
}

func (x *TransactionTotal) GetDownPayment() []*TransactionDPTotal {
	if x != nil {
		return x.DownPayment
	}
	return nil
}

func (x *TransactionTotal) GetFullPayment() []*TransactionFPTotal {
	if x != nil {
		return x.FullPayment
	}
	return nil
}

func (x *TransactionTotal) GetWithdraw() []*TransactionWDTotal {
	if x != nil {
		return x.Withdraw
	}
	return nil
}

type TransactionBKTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date         string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	TotalBooking int32  `protobuf:"varint,2,opt,name=total_booking,json=totalBooking,proto3" json:"total_booking,omitempty"`
}

func (x *TransactionBKTotal) Reset() {
	*x = TransactionBKTotal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionBKTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBKTotal) ProtoMessage() {}

func (x *TransactionBKTotal) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBKTotal.ProtoReflect.Descriptor instead.
func (*TransactionBKTotal) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{32}
}

func (x *TransactionBKTotal) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *TransactionBKTotal) GetTotalBooking() int32 {
	if x != nil {
		return x.TotalBooking
	}
	return 0
}

type TransactionDPTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	TotalDp int32                  `protobuf:"varint,2,opt,name=total_dp,json=totalDp,proto3" json:"total_dp,omitempty"`
	Type    string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Status  string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TransactionDPTotal) Reset() {
	*x = TransactionDPTotal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionDPTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionDPTotal) ProtoMessage() {}

func (x *TransactionDPTotal) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionDPTotal.ProtoReflect.Descriptor instead.
func (*TransactionDPTotal) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{33}
}

func (x *TransactionDPTotal) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *TransactionDPTotal) GetTotalDp() int32 {
	if x != nil {
		return x.TotalDp
	}
	return 0
}

func (x *TransactionDPTotal) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TransactionDPTotal) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type TransactionFPTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date             *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	TotalFullpayment int32                  `protobuf:"varint,2,opt,name=total_fullpayment,json=totalFullpayment,proto3" json:"total_fullpayment,omitempty"`
	Type             string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Status           string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TransactionFPTotal) Reset() {
	*x = TransactionFPTotal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionFPTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionFPTotal) ProtoMessage() {}

func (x *TransactionFPTotal) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionFPTotal.ProtoReflect.Descriptor instead.
func (*TransactionFPTotal) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{34}
}

func (x *TransactionFPTotal) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *TransactionFPTotal) GetTotalFullpayment() int32 {
	if x != nil {
		return x.TotalFullpayment
	}
	return 0
}

func (x *TransactionFPTotal) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TransactionFPTotal) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type TransactionWDTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	TotalWithdraw int32                  `protobuf:"varint,2,opt,name=total_withdraw,json=totalWithdraw,proto3" json:"total_withdraw,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Status        string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TransactionWDTotal) Reset() {
	*x = TransactionWDTotal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionWDTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionWDTotal) ProtoMessage() {}

func (x *TransactionWDTotal) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionWDTotal.ProtoReflect.Descriptor instead.
func (*TransactionWDTotal) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{35}
}

func (x *TransactionWDTotal) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *TransactionWDTotal) GetTotalWithdraw() int32 {
	if x != nil {
		return x.TotalWithdraw
	}
	return 0
}

func (x *TransactionWDTotal) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TransactionWDTotal) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type TransactionTotalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title   string              `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data    *TransactionTotal   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Summary *SummaryTransaction `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *TransactionTotalResponse) Reset() {
	*x = TransactionTotalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionTotalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionTotalResponse) ProtoMessage() {}

func (x *TransactionTotalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionTotalResponse.ProtoReflect.Descriptor instead.
func (*TransactionTotalResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{36}
}

func (x *TransactionTotalResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TransactionTotalResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TransactionTotalResponse) GetData() *TransactionTotal {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TransactionTotalResponse) GetSummary() *SummaryTransaction {
	if x != nil {
		return x.Summary
	}
	return nil
}

type AccountingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debit   int32 `protobuf:"varint,2,opt,name=debit,proto3" json:"debit,omitempty"`
	Credit  int32 `protobuf:"varint,3,opt,name=credit,proto3" json:"credit,omitempty"`
	Balance int32 `protobuf:"varint,4,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *AccountingInfo) Reset() {
	*x = AccountingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountingInfo) ProtoMessage() {}

func (x *AccountingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountingInfo.ProtoReflect.Descriptor instead.
func (*AccountingInfo) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{37}
}

func (x *AccountingInfo) GetDebit() int32 {
	if x != nil {
		return x.Debit
	}
	return 0
}

func (x *AccountingInfo) GetCredit() int32 {
	if x != nil {
		return x.Credit
	}
	return 0
}

func (x *AccountingInfo) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type SummaryTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalBooking         int32           `protobuf:"varint,1,opt,name=total_booking,json=totalBooking,proto3" json:"total_booking,omitempty"`
	TotalDp              int32           `protobuf:"varint,2,opt,name=total_dp,json=totalDp,proto3" json:"total_dp,omitempty"`
	TotalFullpayment     int32           `protobuf:"varint,3,opt,name=total_fullpayment,json=totalFullpayment,proto3" json:"total_fullpayment,omitempty"`
	TotalWithdrawSuccess int32           `protobuf:"varint,4,opt,name=total_withdraw_success,json=totalWithdrawSuccess,proto3" json:"total_withdraw_success,omitempty"`
	AccountingInfo       *AccountingInfo `protobuf:"bytes,5,opt,name=accounting_info,json=accountingInfo,proto3" json:"accounting_info,omitempty"`
}

func (x *SummaryTransaction) Reset() {
	*x = SummaryTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryTransaction) ProtoMessage() {}

func (x *SummaryTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryTransaction.ProtoReflect.Descriptor instead.
func (*SummaryTransaction) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{38}
}

func (x *SummaryTransaction) GetTotalBooking() int32 {
	if x != nil {
		return x.TotalBooking
	}
	return 0
}

func (x *SummaryTransaction) GetTotalDp() int32 {
	if x != nil {
		return x.TotalDp
	}
	return 0
}

func (x *SummaryTransaction) GetTotalFullpayment() int32 {
	if x != nil {
		return x.TotalFullpayment
	}
	return 0
}

func (x *SummaryTransaction) GetTotalWithdrawSuccess() int32 {
	if x != nil {
		return x.TotalWithdrawSuccess
	}
	return 0
}

func (x *SummaryTransaction) GetAccountingInfo() *AccountingInfo {
	if x != nil {
		return x.AccountingInfo
	}
	return nil
}

type RequestDP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestUid    string                 `protobuf:"bytes,1,opt,name=request_uid,json=requestUid,proto3" json:"request_uid,omitempty"`
	UserUid       string                 `protobuf:"bytes,2,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	HostId        string                 `protobuf:"bytes,3,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	TourTitle     string                 `protobuf:"bytes,4,opt,name=tour_title,json=tourTitle,proto3" json:"tour_title,omitempty"`
	TourId        string                 `protobuf:"bytes,5,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	ScheduleId    string                 `protobuf:"bytes,6,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	TourStartDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=tour_start_date,json=tourStartDate,proto3" json:"tour_start_date,omitempty"`
	TourEndDate   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=tour_end_date,json=tourEndDate,proto3" json:"tour_end_date,omitempty"`
	Amount        int32                  `protobuf:"varint,9,opt,name=amount,proto3" json:"amount,omitempty"`
	DateRequest   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=date_request,json=dateRequest,proto3" json:"date_request,omitempty"`
}

func (x *RequestDP) Reset() {
	*x = RequestDP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestDP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDP) ProtoMessage() {}

func (x *RequestDP) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDP.ProtoReflect.Descriptor instead.
func (*RequestDP) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{39}
}

func (x *RequestDP) GetRequestUid() string {
	if x != nil {
		return x.RequestUid
	}
	return ""
}

func (x *RequestDP) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *RequestDP) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *RequestDP) GetTourTitle() string {
	if x != nil {
		return x.TourTitle
	}
	return ""
}

func (x *RequestDP) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *RequestDP) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *RequestDP) GetTourStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TourStartDate
	}
	return nil
}

func (x *RequestDP) GetTourEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TourEndDate
	}
	return nil
}

func (x *RequestDP) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RequestDP) GetDateRequest() *timestamppb.Timestamp {
	if x != nil {
		return x.DateRequest
	}
	return nil
}

type ResponseDP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string     `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data  *RequestDP `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseDP) Reset() {
	*x = ResponseDP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseDP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseDP) ProtoMessage() {}

func (x *ResponseDP) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseDP.ProtoReflect.Descriptor instead.
func (*ResponseDP) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{40}
}

func (x *ResponseDP) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseDP) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseDP) GetData() *RequestDP {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_wallet_proto protoreflect.FileDescriptor

var file_wallet_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x04, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62,
	0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x47, 0x0a, 0x0b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x99, 0x04, 0x0a, 0x14, 0x48, 0x6f, 0x73, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x18, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x63, 0x63, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x43, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x62, 0x63,
	0x63, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x63,
	0x63, 0x22, 0x32, 0x0a, 0x1c, 0x48, 0x6f, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa6, 0x01, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x37,
	0x0a, 0x08, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x0f, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x48, 0x0a, 0x0e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x4c, 0x6f, 0x6b,
	0x61, 0x76, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x04, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x75, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x6f, 0x75, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x74, 0x6f,
	0x75, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x74, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e,
	0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x22, 0xd7, 0x04, 0x0a, 0x0a, 0x4c, 0x6f, 0x67,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x6f, 0x75, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x6f, 0x75,
	0x72, 0x52, 0x04, 0x74, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xd5, 0x05, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x6f, 0x75, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54,
	0x6f, 0x75, 0x72, 0x52, 0x04, 0x74, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x70, 0x68, 0x32, 0x33, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x70, 0x68, 0x32,
	0x33, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x18, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x4c, 0x6f,
	0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x45, 0x0a, 0x13, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc5, 0x02,
	0x0a, 0x1c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2e, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x6f, 0x75,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x52, 0x04, 0x74, 0x6f, 0x75, 0x72, 0x12, 0x20, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x22, 0x78, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0x83, 0x01, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xc9, 0x01, 0x0a, 0x1e, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x7a, 0x0a, 0x1a, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x2c, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x22, 0x84, 0x01,
	0x0a, 0x08, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x22, 0x50, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x67, 0x0a, 0x0d, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0x60, 0x0a, 0x19, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x22, 0x54, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x90, 0x02, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x36, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x09, 0x64, 0x70, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x44, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x64, 0x70,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x0a, 0x09, 0x66, 0x70, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x46, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x66, 0x70, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x33, 0x0a, 0x09, 0x77, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x08, 0x77, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xda, 0x02, 0x0a, 0x08, 0x44,
	0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0xda, 0x02, 0x0a, 0x08, 0x46, 0x50, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x97, 0x03, 0x0a, 0x0e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x81,
	0x03, 0x0a, 0x0b, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d,
	0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61,
	0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x74, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64,
	0x12, 0x42, 0x0a, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x45, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x07, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x4b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x3d, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x50, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d,
	0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x50, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x44, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x08, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x22, 0x4d, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x4b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x22, 0x8b, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x50, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x50, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x75, 0x6c, 0x6c, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x44, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa8, 0x01, 0x0a,
	0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x58, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x62, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0xf8, 0x01, 0x0a, 0x12, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x75, 0x6c, 0x6c, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x94, 0x03, 0x0a,
	0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x50, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x74, 0x6f, 0x75, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x74,
	0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0d,
	0x74, 0x6f, 0x75, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x74, 0x6f, 0x75, 0x72, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x50, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x50, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x2a, 0x70, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x64, 0x70,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x05, 0x2a, 0x2e, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x5f, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x6f,
	0x75, 0x74, 0x10, 0x01, 0x2a, 0x39, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x32,
	0xca, 0x0e, 0x0a, 0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x64, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x41, 0x64, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2e, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x17, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x68, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64,
	0x7d, 0x12, 0x73, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c,
	0x6f, 0x6b, 0x61, 0x76, 0x65, 0x6e, 0x12, 0x1d, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x4c, 0x6f, 0x6b, 0x61, 0x76, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x6c,
	0x6f, 0x6b, 0x61, 0x76, 0x65, 0x6e, 0x12, 0x67, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x6f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x1a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x74, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x26, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x20, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x64, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x4c,
	0x6f, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x20, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x4c,
	0x6f, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x20, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6c, 0x0a, 0x0f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x13, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x1a, 0x20, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x3a, 0x01, 0x2a, 0x12, 0x87, 0x01,
	0x0a, 0x14, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1c, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x1a, 0x24, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x48, 0x6f,
	0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x2d, 0x63, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a, 0x12, 0x41, 0x6c, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x6c, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x61, 0x6c,
	0x6c, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0xc0, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x20, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x62, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5c, 0x12, 0x5a, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x73, 0x2f, 0x7b, 0x74, 0x6f,
	0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0x20, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x33, 0x12, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x66, 0x0a, 0x12, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x50, 0x1a, 0x12, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x50, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2f, 0x64, 0x6f, 0x77, 0x6e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wallet_proto_rawDescOnce sync.Once
	file_wallet_proto_rawDescData = file_wallet_proto_rawDesc
)

func file_wallet_proto_rawDescGZIP() []byte {
	file_wallet_proto_rawDescOnce.Do(func() {
		file_wallet_proto_rawDescData = protoimpl.X.CompressGZIP(file_wallet_proto_rawDescData)
	})
	return file_wallet_proto_rawDescData
}

var file_wallet_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_wallet_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_wallet_proto_goTypes = []interface{}{
	(LogType)(0),                           // 0: wallet.LogType
	(TransactionType)(0),                   // 1: wallet.TransactionType
	(TransactionStatus)(0),                 // 2: wallet.TransactionStatus
	(*ReqWithdraw)(nil),                    // 3: wallet.ReqWithdraw
	(*Host)(nil),                           // 4: wallet.Host
	(*DeletedUser)(nil),                    // 5: wallet.DeletedUser
	(*HostWithdrawCallback)(nil),           // 6: wallet.HostWithdrawCallback
	(*HostWithdrawCallbackResponse)(nil),   // 7: wallet.HostWithdrawCallbackResponse
	(*Balance)(nil),                        // 8: wallet.Balance
	(*Balances)(nil),                       // 9: wallet.Balances
	(*BalanceResponse)(nil),                // 10: wallet.BalanceResponse
	(*BalanceRequest)(nil),                 // 11: wallet.BalanceRequest
	(*LokavenBalanceRequest)(nil),          // 12: wallet.LokavenBalanceRequest
	(*Tour)(nil),                           // 13: wallet.Tour
	(*LogBalance)(nil),                     // 14: wallet.LogBalance
	(*LogBalanceResponse)(nil),             // 15: wallet.LogBalanceResponse
	(*SingleLogBalanceResponse)(nil),       // 16: wallet.SingleLogBalanceResponse
	(*LogsBalanceResponse)(nil),            // 17: wallet.LogsBalanceResponse
	(*TransactionInHistoryResponse)(nil),   // 18: wallet.TransactionInHistoryResponse
	(*LogBalancesRequest)(nil),             // 19: wallet.LogBalancesRequest
	(*LogHistoryRequest)(nil),              // 20: wallet.LogHistoryRequest
	(*LogBalancesRequestWithSchedule)(nil), // 21: wallet.LogBalancesRequestWithSchedule
	(*AllTransactionListResponse)(nil),     // 22: wallet.AllTransactionListResponse
	(*Paginate)(nil),                       // 23: wallet.Paginate
	(*Filter)(nil),                         // 24: wallet.Filter
	(*BrowseRequest)(nil),                  // 25: wallet.BrowseRequest
	(*AllTransactionListRequest)(nil),      // 26: wallet.AllTransactionListRequest
	(*TransactionDetailRequest)(nil),       // 27: wallet.TransactionDetailRequest
	(*TransactionDetailResponse)(nil),      // 28: wallet.TransactionDetailResponse
	(*DPDetail)(nil),                       // 29: wallet.DPDetail
	(*FPDetail)(nil),                       // 30: wallet.FPDetail
	(*WithdrawDetail)(nil),                 // 31: wallet.WithdrawDetail
	(*BookingInfo)(nil),                    // 32: wallet.BookingInfo
	(*PackageSchedule)(nil),                // 33: wallet.PackageSchedule
	(*TransactionTotal)(nil),               // 34: wallet.TransactionTotal
	(*TransactionBKTotal)(nil),             // 35: wallet.TransactionBKTotal
	(*TransactionDPTotal)(nil),             // 36: wallet.TransactionDPTotal
	(*TransactionFPTotal)(nil),             // 37: wallet.TransactionFPTotal
	(*TransactionWDTotal)(nil),             // 38: wallet.TransactionWDTotal
	(*TransactionTotalResponse)(nil),       // 39: wallet.TransactionTotalResponse
	(*AccountingInfo)(nil),                 // 40: wallet.AccountingInfo
	(*SummaryTransaction)(nil),             // 41: wallet.SummaryTransaction
	(*RequestDP)(nil),                      // 42: wallet.RequestDP
	(*ResponseDP)(nil),                     // 43: wallet.ResponseDP
	(*timestamppb.Timestamp)(nil),          // 44: google.protobuf.Timestamp
}
var file_wallet_proto_depIdxs = []int32{
	44, // 0: wallet.HostWithdrawCallback.created:type_name -> google.protobuf.Timestamp
	44, // 1: wallet.HostWithdrawCallback.updated:type_name -> google.protobuf.Timestamp
	44, // 2: wallet.Balance.updated_at:type_name -> google.protobuf.Timestamp
	8,  // 3: wallet.Balances.balances:type_name -> wallet.Balance
	8,  // 4: wallet.BalanceResponse.data:type_name -> wallet.Balance
	44, // 5: wallet.Tour.tour_start_date:type_name -> google.protobuf.Timestamp
	44, // 6: wallet.Tour.tour_end_date:type_name -> google.protobuf.Timestamp
	13, // 7: wallet.LogBalance.tour:type_name -> wallet.Tour
	0,  // 8: wallet.LogBalance.type:type_name -> wallet.LogType
	1,  // 9: wallet.LogBalance.transaction_type:type_name -> wallet.TransactionType
	2,  // 10: wallet.LogBalance.status:type_name -> wallet.TransactionStatus
	44, // 11: wallet.LogBalance.updated_at:type_name -> google.protobuf.Timestamp
	13, // 12: wallet.LogBalanceResponse.tour:type_name -> wallet.Tour
	44, // 13: wallet.LogBalanceResponse.updated_at:type_name -> google.protobuf.Timestamp
	44, // 14: wallet.LogBalanceResponse.created_at:type_name -> google.protobuf.Timestamp
	15, // 15: wallet.SingleLogBalanceResponse.data:type_name -> wallet.LogBalanceResponse
	15, // 16: wallet.LogsBalanceResponse.data:type_name -> wallet.LogBalanceResponse
	44, // 17: wallet.TransactionInHistoryResponse.created_at:type_name -> google.protobuf.Timestamp
	0,  // 18: wallet.TransactionInHistoryResponse.type:type_name -> wallet.LogType
	2,  // 19: wallet.TransactionInHistoryResponse.status:type_name -> wallet.TransactionStatus
	13, // 20: wallet.TransactionInHistoryResponse.tour:type_name -> wallet.Tour
	4,  // 21: wallet.TransactionInHistoryResponse.host:type_name -> wallet.Host
	5,  // 22: wallet.TransactionInHistoryResponse.deleted_user:type_name -> wallet.DeletedUser
	15, // 23: wallet.AllTransactionListResponse.data:type_name -> wallet.LogBalanceResponse
	23, // 24: wallet.AllTransactionListResponse.paginate:type_name -> wallet.Paginate
	24, // 25: wallet.BrowseRequest.filters:type_name -> wallet.Filter
	32, // 26: wallet.TransactionDetailResponse.booking_info:type_name -> wallet.BookingInfo
	29, // 27: wallet.TransactionDetailResponse.dp_detail:type_name -> wallet.DPDetail
	30, // 28: wallet.TransactionDetailResponse.fp_detail:type_name -> wallet.FPDetail
	31, // 29: wallet.TransactionDetailResponse.wd_detail:type_name -> wallet.WithdrawDetail
	44, // 30: wallet.DPDetail.date:type_name -> google.protobuf.Timestamp
	33, // 31: wallet.DPDetail.schedule_info:type_name -> wallet.PackageSchedule
	44, // 32: wallet.FPDetail.date:type_name -> google.protobuf.Timestamp
	33, // 33: wallet.FPDetail.schedule_info:type_name -> wallet.PackageSchedule
	44, // 34: wallet.WithdrawDetail.date:type_name -> google.protobuf.Timestamp
	33, // 35: wallet.WithdrawDetail.schedule_info:type_name -> wallet.PackageSchedule
	44, // 36: wallet.BookingInfo.payment_date:type_name -> google.protobuf.Timestamp
	33, // 37: wallet.BookingInfo.schedule_info:type_name -> wallet.PackageSchedule
	44, // 38: wallet.PackageSchedule.tour_start_date:type_name -> google.protobuf.Timestamp
	44, // 39: wallet.PackageSchedule.tour_end_date:type_name -> google.protobuf.Timestamp
	35, // 40: wallet.TransactionTotal.booking:type_name -> wallet.TransactionBKTotal
	36, // 41: wallet.TransactionTotal.down_payment:type_name -> wallet.TransactionDPTotal
	37, // 42: wallet.TransactionTotal.full_payment:type_name -> wallet.TransactionFPTotal
	38, // 43: wallet.TransactionTotal.withdraw:type_name -> wallet.TransactionWDTotal
	44, // 44: wallet.TransactionDPTotal.date:type_name -> google.protobuf.Timestamp
	44, // 45: wallet.TransactionFPTotal.date:type_name -> google.protobuf.Timestamp
	44, // 46: wallet.TransactionWDTotal.date:type_name -> google.protobuf.Timestamp
	34, // 47: wallet.TransactionTotalResponse.data:type_name -> wallet.TransactionTotal
	41, // 48: wallet.TransactionTotalResponse.summary:type_name -> wallet.SummaryTransaction
	40, // 49: wallet.SummaryTransaction.accounting_info:type_name -> wallet.AccountingInfo
	44, // 50: wallet.RequestDP.tour_start_date:type_name -> google.protobuf.Timestamp
	44, // 51: wallet.RequestDP.tour_end_date:type_name -> google.protobuf.Timestamp
	44, // 52: wallet.RequestDP.date_request:type_name -> google.protobuf.Timestamp
	42, // 53: wallet.ResponseDP.data:type_name -> wallet.RequestDP
	14, // 54: wallet.WalletService.CreateOrAddBalance:input_type -> wallet.LogBalance
	11, // 55: wallet.WalletService.GetBalance:input_type -> wallet.BalanceRequest
	12, // 56: wallet.WalletService.GetBalanceLokaven:input_type -> wallet.LokavenBalanceRequest
	11, // 57: wallet.WalletService.GetBalanceByUserType:input_type -> wallet.BalanceRequest
	19, // 58: wallet.WalletService.GetLogBalances:input_type -> wallet.LogBalancesRequest
	20, // 59: wallet.WalletService.TransactionInHistory:input_type -> wallet.LogHistoryRequest
	21, // 60: wallet.WalletService.GetLogBalancesSchedule:input_type -> wallet.LogBalancesRequestWithSchedule
	21, // 61: wallet.WalletService.GetLogBalanceTransaction:input_type -> wallet.LogBalancesRequestWithSchedule
	21, // 62: wallet.WalletService.GetLogBalanceOrder:input_type -> wallet.LogBalancesRequestWithSchedule
	3,  // 63: wallet.WalletService.WithdrawHostReq:input_type -> wallet.ReqWithdraw
	6,  // 64: wallet.WalletService.WithdrawHostCallback:input_type -> wallet.HostWithdrawCallback
	26, // 65: wallet.WalletService.AllTransactionList:input_type -> wallet.AllTransactionListRequest
	27, // 66: wallet.WalletService.GetTransactionDetails:input_type -> wallet.TransactionDetailRequest
	34, // 67: wallet.WalletService.GetTransactionTotal:input_type -> wallet.TransactionTotal
	42, // 68: wallet.WalletService.DownPaymentRequest:input_type -> wallet.RequestDP
	10, // 69: wallet.WalletService.CreateOrAddBalance:output_type -> wallet.BalanceResponse
	10, // 70: wallet.WalletService.GetBalance:output_type -> wallet.BalanceResponse
	10, // 71: wallet.WalletService.GetBalanceLokaven:output_type -> wallet.BalanceResponse
	10, // 72: wallet.WalletService.GetBalanceByUserType:output_type -> wallet.BalanceResponse
	17, // 73: wallet.WalletService.GetLogBalances:output_type -> wallet.LogsBalanceResponse
	18, // 74: wallet.WalletService.TransactionInHistory:output_type -> wallet.TransactionInHistoryResponse
	16, // 75: wallet.WalletService.GetLogBalancesSchedule:output_type -> wallet.SingleLogBalanceResponse
	16, // 76: wallet.WalletService.GetLogBalanceTransaction:output_type -> wallet.SingleLogBalanceResponse
	16, // 77: wallet.WalletService.GetLogBalanceOrder:output_type -> wallet.SingleLogBalanceResponse
	16, // 78: wallet.WalletService.WithdrawHostReq:output_type -> wallet.SingleLogBalanceResponse
	7,  // 79: wallet.WalletService.WithdrawHostCallback:output_type -> wallet.HostWithdrawCallbackResponse
	22, // 80: wallet.WalletService.AllTransactionList:output_type -> wallet.AllTransactionListResponse
	28, // 81: wallet.WalletService.GetTransactionDetails:output_type -> wallet.TransactionDetailResponse
	39, // 82: wallet.WalletService.GetTransactionTotal:output_type -> wallet.TransactionTotalResponse
	43, // 83: wallet.WalletService.DownPaymentRequest:output_type -> wallet.ResponseDP
	69, // [69:84] is the sub-list for method output_type
	54, // [54:69] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_wallet_proto_init() }
func file_wallet_proto_init() {
	if File_wallet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wallet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletedUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostWithdrawCallback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostWithdrawCallbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LokavenBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleLogBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogsBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionInHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogBalancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogBalancesRequestWithSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllTransactionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paginate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllTransactionListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DPDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FPDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionTotal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionBKTotal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionDPTotal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionFPTotal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionWDTotal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionTotalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestDP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseDP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wallet_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wallet_proto_goTypes,
		DependencyIndexes: file_wallet_proto_depIdxs,
		EnumInfos:         file_wallet_proto_enumTypes,
		MessageInfos:      file_wallet_proto_msgTypes,
	}.Build()
	File_wallet_proto = out.File
	file_wallet_proto_rawDesc = nil
	file_wallet_proto_goTypes = nil
	file_wallet_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalletServiceClient interface {
	CreateOrAddBalance(ctx context.Context, in *LogBalance, opts ...grpc.CallOption) (*BalanceResponse, error)
	GetBalance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	GetBalanceLokaven(ctx context.Context, in *LokavenBalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	GetBalanceByUserType(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	GetLogBalances(ctx context.Context, in *LogBalancesRequest, opts ...grpc.CallOption) (*LogsBalanceResponse, error)
	TransactionInHistory(ctx context.Context, in *LogHistoryRequest, opts ...grpc.CallOption) (*TransactionInHistoryResponse, error)
	GetLogBalancesSchedule(ctx context.Context, in *LogBalancesRequestWithSchedule, opts ...grpc.CallOption) (*SingleLogBalanceResponse, error)
	GetLogBalanceTransaction(ctx context.Context, in *LogBalancesRequestWithSchedule, opts ...grpc.CallOption) (*SingleLogBalanceResponse, error)
	GetLogBalanceOrder(ctx context.Context, in *LogBalancesRequestWithSchedule, opts ...grpc.CallOption) (*SingleLogBalanceResponse, error)
	WithdrawHostReq(ctx context.Context, in *ReqWithdraw, opts ...grpc.CallOption) (*SingleLogBalanceResponse, error)
	WithdrawHostCallback(ctx context.Context, in *HostWithdrawCallback, opts ...grpc.CallOption) (*HostWithdrawCallbackResponse, error)
	AllTransactionList(ctx context.Context, in *AllTransactionListRequest, opts ...grpc.CallOption) (*AllTransactionListResponse, error)
	GetTransactionDetails(ctx context.Context, in *TransactionDetailRequest, opts ...grpc.CallOption) (*TransactionDetailResponse, error)
	GetTransactionTotal(ctx context.Context, in *TransactionTotal, opts ...grpc.CallOption) (*TransactionTotalResponse, error)
	DownPaymentRequest(ctx context.Context, in *RequestDP, opts ...grpc.CallOption) (*ResponseDP, error)
}

type walletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServiceClient(cc grpc.ClientConnInterface) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) CreateOrAddBalance(ctx context.Context, in *LogBalance, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, "/wallet.WalletService/CreateOrAddBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetBalance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, "/wallet.WalletService/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetBalanceLokaven(ctx context.Context, in *LokavenBalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, "/wallet.WalletService/GetBalanceLokaven", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetBalanceByUserType(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, "/wallet.WalletService/GetBalanceByUserType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetLogBalances(ctx context.Context, in *LogBalancesRequest, opts ...grpc.CallOption) (*LogsBalanceResponse, error) {
	out := new(LogsBalanceResponse)
	err := c.cc.Invoke(ctx, "/wallet.WalletService/GetLogBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) TransactionInHistory(ctx context.Context, in *LogHistoryRequest, opts ...grpc.CallOption) (*TransactionInHistoryResponse, error) {
	out := new(TransactionInHistoryResponse)
	err := c.cc.Invoke(ctx, "/wallet.WalletService/TransactionInHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetLogBalancesSchedule(ctx context.Context, in *LogBalancesRequestWithSchedule, opts ...grpc.CallOption) (*SingleLogBalanceResponse, error) {
	out := new(SingleLogBalanceResponse)
	err := c.cc.Invoke(ctx, "/wallet.WalletService/GetLogBalancesSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetLogBalanceTransaction(ctx context.Context, in *LogBalancesRequestWithSchedule, opts ...grpc.CallOption) (*SingleLogBalanceResponse, error) {
	out := new(SingleLogBalanceResponse)
	err := c.cc.Invoke(ctx, "/wallet.WalletService/GetLogBalanceTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetLogBalanceOrder(ctx context.Context, in *LogBalancesRequestWithSchedule, opts ...grpc.CallOption) (*SingleLogBalanceResponse, error) {
	out := new(SingleLogBalanceResponse)
	err := c.cc.Invoke(ctx, "/wallet.WalletService/GetLogBalanceOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) WithdrawHostReq(ctx context.Context, in *ReqWithdraw, opts ...grpc.CallOption) (*SingleLogBalanceResponse, error) {
	out := new(SingleLogBalanceResponse)
	err := c.cc.Invoke(ctx, "/wallet.WalletService/WithdrawHostReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) WithdrawHostCallback(ctx context.Context, in *HostWithdrawCallback, opts ...grpc.CallOption) (*HostWithdrawCallbackResponse, error) {
	out := new(HostWithdrawCallbackResponse)
	err := c.cc.Invoke(ctx, "/wallet.WalletService/WithdrawHostCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) AllTransactionList(ctx context.Context, in *AllTransactionListRequest, opts ...grpc.CallOption) (*AllTransactionListResponse, error) {
	out := new(AllTransactionListResponse)
	err := c.cc.Invoke(ctx, "/wallet.WalletService/AllTransactionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetTransactionDetails(ctx context.Context, in *TransactionDetailRequest, opts ...grpc.CallOption) (*TransactionDetailResponse, error) {
	out := new(TransactionDetailResponse)
	err := c.cc.Invoke(ctx, "/wallet.WalletService/GetTransactionDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetTransactionTotal(ctx context.Context, in *TransactionTotal, opts ...grpc.CallOption) (*TransactionTotalResponse, error) {
	out := new(TransactionTotalResponse)
	err := c.cc.Invoke(ctx, "/wallet.WalletService/GetTransactionTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) DownPaymentRequest(ctx context.Context, in *RequestDP, opts ...grpc.CallOption) (*ResponseDP, error) {
	out := new(ResponseDP)
	err := c.cc.Invoke(ctx, "/wallet.WalletService/DownPaymentRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServiceServer is the server API for WalletService service.
type WalletServiceServer interface {
	CreateOrAddBalance(context.Context, *LogBalance) (*BalanceResponse, error)
	GetBalance(context.Context, *BalanceRequest) (*BalanceResponse, error)
	GetBalanceLokaven(context.Context, *LokavenBalanceRequest) (*BalanceResponse, error)
	GetBalanceByUserType(context.Context, *BalanceRequest) (*BalanceResponse, error)
	GetLogBalances(context.Context, *LogBalancesRequest) (*LogsBalanceResponse, error)
	TransactionInHistory(context.Context, *LogHistoryRequest) (*TransactionInHistoryResponse, error)
	GetLogBalancesSchedule(context.Context, *LogBalancesRequestWithSchedule) (*SingleLogBalanceResponse, error)
	GetLogBalanceTransaction(context.Context, *LogBalancesRequestWithSchedule) (*SingleLogBalanceResponse, error)
	GetLogBalanceOrder(context.Context, *LogBalancesRequestWithSchedule) (*SingleLogBalanceResponse, error)
	WithdrawHostReq(context.Context, *ReqWithdraw) (*SingleLogBalanceResponse, error)
	WithdrawHostCallback(context.Context, *HostWithdrawCallback) (*HostWithdrawCallbackResponse, error)
	AllTransactionList(context.Context, *AllTransactionListRequest) (*AllTransactionListResponse, error)
	GetTransactionDetails(context.Context, *TransactionDetailRequest) (*TransactionDetailResponse, error)
	GetTransactionTotal(context.Context, *TransactionTotal) (*TransactionTotalResponse, error)
	DownPaymentRequest(context.Context, *RequestDP) (*ResponseDP, error)
}

// UnimplementedWalletServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWalletServiceServer struct {
}

func (*UnimplementedWalletServiceServer) CreateOrAddBalance(context.Context, *LogBalance) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrAddBalance not implemented")
}
func (*UnimplementedWalletServiceServer) GetBalance(context.Context, *BalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (*UnimplementedWalletServiceServer) GetBalanceLokaven(context.Context, *LokavenBalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceLokaven not implemented")
}
func (*UnimplementedWalletServiceServer) GetBalanceByUserType(context.Context, *BalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceByUserType not implemented")
}
func (*UnimplementedWalletServiceServer) GetLogBalances(context.Context, *LogBalancesRequest) (*LogsBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogBalances not implemented")
}
func (*UnimplementedWalletServiceServer) TransactionInHistory(context.Context, *LogHistoryRequest) (*TransactionInHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionInHistory not implemented")
}
func (*UnimplementedWalletServiceServer) GetLogBalancesSchedule(context.Context, *LogBalancesRequestWithSchedule) (*SingleLogBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogBalancesSchedule not implemented")
}
func (*UnimplementedWalletServiceServer) GetLogBalanceTransaction(context.Context, *LogBalancesRequestWithSchedule) (*SingleLogBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogBalanceTransaction not implemented")
}
func (*UnimplementedWalletServiceServer) GetLogBalanceOrder(context.Context, *LogBalancesRequestWithSchedule) (*SingleLogBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogBalanceOrder not implemented")
}
func (*UnimplementedWalletServiceServer) WithdrawHostReq(context.Context, *ReqWithdraw) (*SingleLogBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawHostReq not implemented")
}
func (*UnimplementedWalletServiceServer) WithdrawHostCallback(context.Context, *HostWithdrawCallback) (*HostWithdrawCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawHostCallback not implemented")
}
func (*UnimplementedWalletServiceServer) AllTransactionList(context.Context, *AllTransactionListRequest) (*AllTransactionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllTransactionList not implemented")
}
func (*UnimplementedWalletServiceServer) GetTransactionDetails(context.Context, *TransactionDetailRequest) (*TransactionDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionDetails not implemented")
}
func (*UnimplementedWalletServiceServer) GetTransactionTotal(context.Context, *TransactionTotal) (*TransactionTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionTotal not implemented")
}
func (*UnimplementedWalletServiceServer) DownPaymentRequest(context.Context, *RequestDP) (*ResponseDP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownPaymentRequest not implemented")
}

func RegisterWalletServiceServer(s *grpc.Server, srv WalletServiceServer) {
	s.RegisterService(&_WalletService_serviceDesc, srv)
}

func _WalletService_CreateOrAddBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CreateOrAddBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.WalletService/CreateOrAddBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CreateOrAddBalance(ctx, req.(*LogBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.WalletService/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetBalance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetBalanceLokaven_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LokavenBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetBalanceLokaven(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.WalletService/GetBalanceLokaven",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetBalanceLokaven(ctx, req.(*LokavenBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetBalanceByUserType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetBalanceByUserType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.WalletService/GetBalanceByUserType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetBalanceByUserType(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetLogBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetLogBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.WalletService/GetLogBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetLogBalances(ctx, req.(*LogBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_TransactionInHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).TransactionInHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.WalletService/TransactionInHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).TransactionInHistory(ctx, req.(*LogHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetLogBalancesSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogBalancesRequestWithSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetLogBalancesSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.WalletService/GetLogBalancesSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetLogBalancesSchedule(ctx, req.(*LogBalancesRequestWithSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetLogBalanceTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogBalancesRequestWithSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetLogBalanceTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.WalletService/GetLogBalanceTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetLogBalanceTransaction(ctx, req.(*LogBalancesRequestWithSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetLogBalanceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogBalancesRequestWithSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetLogBalanceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.WalletService/GetLogBalanceOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetLogBalanceOrder(ctx, req.(*LogBalancesRequestWithSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_WithdrawHostReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).WithdrawHostReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.WalletService/WithdrawHostReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).WithdrawHostReq(ctx, req.(*ReqWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_WithdrawHostCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostWithdrawCallback)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).WithdrawHostCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.WalletService/WithdrawHostCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).WithdrawHostCallback(ctx, req.(*HostWithdrawCallback))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_AllTransactionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllTransactionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).AllTransactionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.WalletService/AllTransactionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).AllTransactionList(ctx, req.(*AllTransactionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetTransactionDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetTransactionDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.WalletService/GetTransactionDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetTransactionDetails(ctx, req.(*TransactionDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetTransactionTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionTotal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetTransactionTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.WalletService/GetTransactionTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetTransactionTotal(ctx, req.(*TransactionTotal))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_DownPaymentRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).DownPaymentRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.WalletService/DownPaymentRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).DownPaymentRequest(ctx, req.(*RequestDP))
	}
	return interceptor(ctx, in, info, handler)
}

var _WalletService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wallet.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrAddBalance",
			Handler:    _WalletService_CreateOrAddBalance_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _WalletService_GetBalance_Handler,
		},
		{
			MethodName: "GetBalanceLokaven",
			Handler:    _WalletService_GetBalanceLokaven_Handler,
		},
		{
			MethodName: "GetBalanceByUserType",
			Handler:    _WalletService_GetBalanceByUserType_Handler,
		},
		{
			MethodName: "GetLogBalances",
			Handler:    _WalletService_GetLogBalances_Handler,
		},
		{
			MethodName: "TransactionInHistory",
			Handler:    _WalletService_TransactionInHistory_Handler,
		},
		{
			MethodName: "GetLogBalancesSchedule",
			Handler:    _WalletService_GetLogBalancesSchedule_Handler,
		},
		{
			MethodName: "GetLogBalanceTransaction",
			Handler:    _WalletService_GetLogBalanceTransaction_Handler,
		},
		{
			MethodName: "GetLogBalanceOrder",
			Handler:    _WalletService_GetLogBalanceOrder_Handler,
		},
		{
			MethodName: "WithdrawHostReq",
			Handler:    _WalletService_WithdrawHostReq_Handler,
		},
		{
			MethodName: "WithdrawHostCallback",
			Handler:    _WalletService_WithdrawHostCallback_Handler,
		},
		{
			MethodName: "AllTransactionList",
			Handler:    _WalletService_AllTransactionList_Handler,
		},
		{
			MethodName: "GetTransactionDetails",
			Handler:    _WalletService_GetTransactionDetails_Handler,
		},
		{
			MethodName: "GetTransactionTotal",
			Handler:    _WalletService_GetTransactionTotal_Handler,
		},
		{
			MethodName: "DownPaymentRequest",
			Handler:    _WalletService_DownPaymentRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallet.proto",
}
