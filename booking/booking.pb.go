// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: pb/booking/booking.proto

package booking

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Booking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId              string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderNumber          string                 `protobuf:"bytes,2,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	InvoiceNumber        string                 `protobuf:"bytes,3,opt,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	UserUid              string                 `protobuf:"bytes,4,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	TourId               string                 `protobuf:"bytes,5,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Title                string                 `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Schedules            []*PackageSchedule     `protobuf:"bytes,7,rep,name=schedules,proto3" json:"schedules,omitempty"`
	Addons               []*PackageAddon        `protobuf:"bytes,8,rep,name=addons,proto3" json:"addons,omitempty"`
	Prices               []*PackagePrice        `protobuf:"bytes,9,rep,name=prices,proto3" json:"prices,omitempty"`
	AdditionalCost       *AdditionalCost        `protobuf:"bytes,10,opt,name=additional_cost,json=additionalCost,proto3" json:"additional_cost,omitempty"`
	QtyAdults            string                 `protobuf:"bytes,11,opt,name=qty_adults,json=qtyAdults,proto3" json:"qty_adults,omitempty"`
	QtyKids              string                 `protobuf:"bytes,12,opt,name=qty_kids,json=qtyKids,proto3" json:"qty_kids,omitempty"`
	ContactInfo          *ContactInfo           `protobuf:"bytes,13,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
	Participants         []*Participant         `protobuf:"bytes,14,rep,name=participants,proto3" json:"participants,omitempty"`
	SubPriceParticipants string                 `protobuf:"bytes,15,opt,name=sub_price_participants,json=subPriceParticipants,proto3" json:"sub_price_participants,omitempty"`
	TotalPrice           string                 `protobuf:"bytes,16,opt,name=total_price,json=totalPrice,proto3" json:"total_price,omitempty"`
	Status               string                 `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
	HostId               string                 `protobuf:"bytes,18,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	EndDate              *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	TypeTour             string                 `protobuf:"bytes,21,opt,name=type_tour,json=typeTour,proto3" json:"type_tour,omitempty"`
	ReceiptNumber        string                 `protobuf:"bytes,22,opt,name=receipt_number,json=receiptNumber,proto3" json:"receipt_number,omitempty"`
	TotalPaidPrice       string                 `protobuf:"bytes,23,opt,name=total_paid_price,json=totalPaidPrice,proto3" json:"total_paid_price,omitempty"`
	SubPriceAddons       string                 `protobuf:"bytes,24,opt,name=sub_price_addons,json=subPriceAddons,proto3" json:"sub_price_addons,omitempty"`
	Location             string                 `protobuf:"bytes,25,opt,name=location,proto3" json:"location,omitempty"`
	Reason               string                 `protobuf:"bytes,26,opt,name=reason,proto3" json:"reason,omitempty"`
	PaymentDate          *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`
	CancelAt             *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=cancel_at,json=cancelAt,proto3" json:"cancel_at,omitempty"`
	Badge                bool                   `protobuf:"varint,29,opt,name=badge,proto3" json:"badge,omitempty"`
	IsRefund             bool                   `protobuf:"varint,30,opt,name=is_refund,json=isRefund,proto3" json:"is_refund,omitempty"`
	IsReviewed           bool                   `protobuf:"varint,31,opt,name=is_reviewed,json=isReviewed,proto3" json:"is_reviewed,omitempty"`
	PromoCode            string                 `protobuf:"bytes,33,opt,name=promo_code,json=promoCode,proto3" json:"promo_code,omitempty"`
	Discount             float64                `protobuf:"fixed64,34,opt,name=discount,proto3" json:"discount,omitempty"`
}

func (x *Booking) Reset() {
	*x = Booking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Booking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Booking) ProtoMessage() {}

func (x *Booking) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Booking.ProtoReflect.Descriptor instead.
func (*Booking) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{0}
}

func (x *Booking) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *Booking) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *Booking) GetInvoiceNumber() string {
	if x != nil {
		return x.InvoiceNumber
	}
	return ""
}

func (x *Booking) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *Booking) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *Booking) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Booking) GetSchedules() []*PackageSchedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *Booking) GetAddons() []*PackageAddon {
	if x != nil {
		return x.Addons
	}
	return nil
}

func (x *Booking) GetPrices() []*PackagePrice {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *Booking) GetAdditionalCost() *AdditionalCost {
	if x != nil {
		return x.AdditionalCost
	}
	return nil
}

func (x *Booking) GetQtyAdults() string {
	if x != nil {
		return x.QtyAdults
	}
	return ""
}

func (x *Booking) GetQtyKids() string {
	if x != nil {
		return x.QtyKids
	}
	return ""
}

func (x *Booking) GetContactInfo() *ContactInfo {
	if x != nil {
		return x.ContactInfo
	}
	return nil
}

func (x *Booking) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *Booking) GetSubPriceParticipants() string {
	if x != nil {
		return x.SubPriceParticipants
	}
	return ""
}

func (x *Booking) GetTotalPrice() string {
	if x != nil {
		return x.TotalPrice
	}
	return ""
}

func (x *Booking) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Booking) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *Booking) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Booking) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *Booking) GetTypeTour() string {
	if x != nil {
		return x.TypeTour
	}
	return ""
}

func (x *Booking) GetReceiptNumber() string {
	if x != nil {
		return x.ReceiptNumber
	}
	return ""
}

func (x *Booking) GetTotalPaidPrice() string {
	if x != nil {
		return x.TotalPaidPrice
	}
	return ""
}

func (x *Booking) GetSubPriceAddons() string {
	if x != nil {
		return x.SubPriceAddons
	}
	return ""
}

func (x *Booking) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Booking) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Booking) GetPaymentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDate
	}
	return nil
}

func (x *Booking) GetCancelAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CancelAt
	}
	return nil
}

func (x *Booking) GetBadge() bool {
	if x != nil {
		return x.Badge
	}
	return false
}

func (x *Booking) GetIsRefund() bool {
	if x != nil {
		return x.IsRefund
	}
	return false
}

func (x *Booking) GetIsReviewed() bool {
	if x != nil {
		return x.IsReviewed
	}
	return false
}

func (x *Booking) GetPromoCode() string {
	if x != nil {
		return x.PromoCode
	}
	return ""
}

func (x *Booking) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

type DetailBookingHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId        string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	InvoiceNumber  string                 `protobuf:"bytes,2,opt,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	UserUid        string                 `protobuf:"bytes,3,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	TourId         string                 `protobuf:"bytes,4,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	HostId         string                 `protobuf:"bytes,5,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Title          string                 `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	EndDate        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	StartDate      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	Durations      string                 `protobuf:"bytes,9,opt,name=durations,proto3" json:"durations,omitempty"`
	Location       string                 `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty"`
	Medias         []*PackageMedia        `protobuf:"bytes,11,rep,name=medias,proto3" json:"medias,omitempty"`
	UserInfo       *UserInfo              `protobuf:"bytes,12,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	QtyAdults      string                 `protobuf:"bytes,13,opt,name=qty_adults,json=qtyAdults,proto3" json:"qty_adults,omitempty"`
	QtyKids        string                 `protobuf:"bytes,14,opt,name=qty_kids,json=qtyKids,proto3" json:"qty_kids,omitempty"`
	AdditionalCost *AdditionalCost        `protobuf:"bytes,15,opt,name=additional_cost,json=additionalCost,proto3" json:"additional_cost,omitempty"`
	TotalPaidPrice string                 `protobuf:"bytes,16,opt,name=total_paid_price,json=totalPaidPrice,proto3" json:"total_paid_price,omitempty"`
	MinQuota       *wrapperspb.Int32Value `protobuf:"bytes,17,opt,name=min_quota,json=minQuota,proto3" json:"min_quota,omitempty"`
	RemainingTime  *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=remaining_time,json=remainingTime,proto3" json:"remaining_time,omitempty"`
	PaymentDate    *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`
	Reason         string                 `protobuf:"bytes,20,opt,name=reason,proto3" json:"reason,omitempty"`
	Status         string                 `protobuf:"bytes,21,opt,name=status,proto3" json:"status,omitempty"`
	ShowLink       *wrapperspb.BoolValue  `protobuf:"bytes,22,opt,name=show_link,json=showLink,proto3" json:"show_link,omitempty"`
	PromoCode      string                 `protobuf:"bytes,23,opt,name=promo_code,json=promoCode,proto3" json:"promo_code,omitempty"`
	Discount       float64                `protobuf:"fixed64,24,opt,name=discount,proto3" json:"discount,omitempty"`
}

func (x *DetailBookingHost) Reset() {
	*x = DetailBookingHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailBookingHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailBookingHost) ProtoMessage() {}

func (x *DetailBookingHost) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailBookingHost.ProtoReflect.Descriptor instead.
func (*DetailBookingHost) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{1}
}

func (x *DetailBookingHost) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *DetailBookingHost) GetInvoiceNumber() string {
	if x != nil {
		return x.InvoiceNumber
	}
	return ""
}

func (x *DetailBookingHost) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *DetailBookingHost) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *DetailBookingHost) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *DetailBookingHost) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DetailBookingHost) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *DetailBookingHost) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *DetailBookingHost) GetDurations() string {
	if x != nil {
		return x.Durations
	}
	return ""
}

func (x *DetailBookingHost) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *DetailBookingHost) GetMedias() []*PackageMedia {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *DetailBookingHost) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *DetailBookingHost) GetQtyAdults() string {
	if x != nil {
		return x.QtyAdults
	}
	return ""
}

func (x *DetailBookingHost) GetQtyKids() string {
	if x != nil {
		return x.QtyKids
	}
	return ""
}

func (x *DetailBookingHost) GetAdditionalCost() *AdditionalCost {
	if x != nil {
		return x.AdditionalCost
	}
	return nil
}

func (x *DetailBookingHost) GetTotalPaidPrice() string {
	if x != nil {
		return x.TotalPaidPrice
	}
	return ""
}

func (x *DetailBookingHost) GetMinQuota() *wrapperspb.Int32Value {
	if x != nil {
		return x.MinQuota
	}
	return nil
}

func (x *DetailBookingHost) GetRemainingTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RemainingTime
	}
	return nil
}

func (x *DetailBookingHost) GetPaymentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDate
	}
	return nil
}

func (x *DetailBookingHost) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *DetailBookingHost) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DetailBookingHost) GetShowLink() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowLink
	}
	return nil
}

func (x *DetailBookingHost) GetPromoCode() string {
	if x != nil {
		return x.PromoCode
	}
	return ""
}

func (x *DetailBookingHost) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

type DetailBookingGuest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId              string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderNumber          string                 `protobuf:"bytes,2,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	InvoiceNumber        string                 `protobuf:"bytes,3,opt,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	Title                string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	EndDate              *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	StartDate            *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	HostName             string                 `protobuf:"bytes,7,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	UserUid              string                 `protobuf:"bytes,8,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	Status               string                 `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	Medias               []*PackageMedia        `protobuf:"bytes,10,rep,name=medias,proto3" json:"medias,omitempty"`
	Addons               []*PackageAddon        `protobuf:"bytes,12,rep,name=addons,proto3" json:"addons,omitempty"`
	Prices               []*PackagePrice        `protobuf:"bytes,13,rep,name=prices,proto3" json:"prices,omitempty"`
	AdditionalCost       *AdditionalCost        `protobuf:"bytes,14,opt,name=additional_cost,json=additionalCost,proto3" json:"additional_cost,omitempty"`
	QtyAdults            string                 `protobuf:"bytes,15,opt,name=qty_adults,json=qtyAdults,proto3" json:"qty_adults,omitempty"`
	QtyKids              string                 `protobuf:"bytes,16,opt,name=qty_kids,json=qtyKids,proto3" json:"qty_kids,omitempty"`
	ContactInfo          *ContactInfo           `protobuf:"bytes,17,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
	Participants         []*Participant         `protobuf:"bytes,18,rep,name=participants,proto3" json:"participants,omitempty"`
	SubPriceParticipants string                 `protobuf:"bytes,19,opt,name=sub_price_participants,json=subPriceParticipants,proto3" json:"sub_price_participants,omitempty"`
	TotalPrice           string                 `protobuf:"bytes,20,opt,name=total_price,json=totalPrice,proto3" json:"total_price,omitempty"`
	HostId               string                 `protobuf:"bytes,21,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	TypeTour             string                 `protobuf:"bytes,24,opt,name=type_tour,json=typeTour,proto3" json:"type_tour,omitempty"`
	ReceiptNumber        string                 `protobuf:"bytes,25,opt,name=receipt_number,json=receiptNumber,proto3" json:"receipt_number,omitempty"`
	TotalPaidPrice       string                 `protobuf:"bytes,26,opt,name=total_paid_price,json=totalPaidPrice,proto3" json:"total_paid_price,omitempty"`
	SubPriceAddons       string                 `protobuf:"bytes,27,opt,name=sub_price_addons,json=subPriceAddons,proto3" json:"sub_price_addons,omitempty"`
	Location             string                 `protobuf:"bytes,28,opt,name=location,proto3" json:"location,omitempty"`
	Reason               string                 `protobuf:"bytes,29,opt,name=reason,proto3" json:"reason,omitempty"`
	PaymentDate          *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`
	CancelAt             *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=cancel_at,json=cancelAt,proto3" json:"cancel_at,omitempty"`
	Badge                bool                   `protobuf:"varint,32,opt,name=badge,proto3" json:"badge,omitempty"`
	IsRefund             bool                   `protobuf:"varint,33,opt,name=is_refund,json=isRefund,proto3" json:"is_refund,omitempty"`
	IsReviewed           bool                   `protobuf:"varint,34,opt,name=is_reviewed,json=isReviewed,proto3" json:"is_reviewed,omitempty"`
	PromoCode            string                 `protobuf:"bytes,35,opt,name=promo_code,json=promoCode,proto3" json:"promo_code,omitempty"`
	Discount             float64                `protobuf:"fixed64,36,opt,name=discount,proto3" json:"discount,omitempty"`
}

func (x *DetailBookingGuest) Reset() {
	*x = DetailBookingGuest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailBookingGuest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailBookingGuest) ProtoMessage() {}

func (x *DetailBookingGuest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailBookingGuest.ProtoReflect.Descriptor instead.
func (*DetailBookingGuest) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{2}
}

func (x *DetailBookingGuest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *DetailBookingGuest) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *DetailBookingGuest) GetInvoiceNumber() string {
	if x != nil {
		return x.InvoiceNumber
	}
	return ""
}

func (x *DetailBookingGuest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DetailBookingGuest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *DetailBookingGuest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *DetailBookingGuest) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *DetailBookingGuest) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *DetailBookingGuest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DetailBookingGuest) GetMedias() []*PackageMedia {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *DetailBookingGuest) GetAddons() []*PackageAddon {
	if x != nil {
		return x.Addons
	}
	return nil
}

func (x *DetailBookingGuest) GetPrices() []*PackagePrice {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *DetailBookingGuest) GetAdditionalCost() *AdditionalCost {
	if x != nil {
		return x.AdditionalCost
	}
	return nil
}

func (x *DetailBookingGuest) GetQtyAdults() string {
	if x != nil {
		return x.QtyAdults
	}
	return ""
}

func (x *DetailBookingGuest) GetQtyKids() string {
	if x != nil {
		return x.QtyKids
	}
	return ""
}

func (x *DetailBookingGuest) GetContactInfo() *ContactInfo {
	if x != nil {
		return x.ContactInfo
	}
	return nil
}

func (x *DetailBookingGuest) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *DetailBookingGuest) GetSubPriceParticipants() string {
	if x != nil {
		return x.SubPriceParticipants
	}
	return ""
}

func (x *DetailBookingGuest) GetTotalPrice() string {
	if x != nil {
		return x.TotalPrice
	}
	return ""
}

func (x *DetailBookingGuest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *DetailBookingGuest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DetailBookingGuest) GetTypeTour() string {
	if x != nil {
		return x.TypeTour
	}
	return ""
}

func (x *DetailBookingGuest) GetReceiptNumber() string {
	if x != nil {
		return x.ReceiptNumber
	}
	return ""
}

func (x *DetailBookingGuest) GetTotalPaidPrice() string {
	if x != nil {
		return x.TotalPaidPrice
	}
	return ""
}

func (x *DetailBookingGuest) GetSubPriceAddons() string {
	if x != nil {
		return x.SubPriceAddons
	}
	return ""
}

func (x *DetailBookingGuest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *DetailBookingGuest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *DetailBookingGuest) GetPaymentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDate
	}
	return nil
}

func (x *DetailBookingGuest) GetCancelAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CancelAt
	}
	return nil
}

func (x *DetailBookingGuest) GetBadge() bool {
	if x != nil {
		return x.Badge
	}
	return false
}

func (x *DetailBookingGuest) GetIsRefund() bool {
	if x != nil {
		return x.IsRefund
	}
	return false
}

func (x *DetailBookingGuest) GetIsReviewed() bool {
	if x != nil {
		return x.IsReviewed
	}
	return false
}

func (x *DetailBookingGuest) GetPromoCode() string {
	if x != nil {
		return x.PromoCode
	}
	return ""
}

func (x *DetailBookingGuest) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Image string `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	Age   string `protobuf:"bytes,5,opt,name=age,proto3" json:"age,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{3}
}

func (x *UserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserInfo) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *UserInfo) GetAge() string {
	if x != nil {
		return x.Age
	}
	return ""
}

type TourPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourId           string                 `protobuf:"bytes,1,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Title            string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Medias           []*PackageMedia        `protobuf:"bytes,3,rep,name=medias,proto3" json:"medias,omitempty"`
	Schedules        []*PackageSchedule     `protobuf:"bytes,4,rep,name=schedules,proto3" json:"schedules,omitempty"`
	Description      string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Categories       []string               `protobuf:"bytes,7,rep,name=categories,proto3" json:"categories,omitempty"`
	Tags             []string               `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	Location         string                 `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
	Rate             string                 `protobuf:"bytes,10,opt,name=rate,proto3" json:"rate,omitempty"`
	Review           string                 `protobuf:"bytes,11,opt,name=review,proto3" json:"review,omitempty"`
	Addons           []*PackageAddon        `protobuf:"bytes,12,rep,name=addons,proto3" json:"addons,omitempty"`
	IsCurated        bool                   `protobuf:"varint,13,opt,name=is_curated,json=isCurated,proto3" json:"is_curated,omitempty"`
	IsFeatured       bool                   `protobuf:"varint,14,opt,name=is_featured,json=isFeatured,proto3" json:"is_featured,omitempty"`
	IsRefundable     bool                   `protobuf:"varint,15,opt,name=is_refundable,json=isRefundable,proto3" json:"is_refundable,omitempty"`
	HostId           string                 `protobuf:"bytes,16,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	TypeTour         string                 `protobuf:"bytes,17,opt,name=type_tour,json=typeTour,proto3" json:"type_tour,omitempty"`
	Prices           []*PackagePrice        `protobuf:"bytes,18,rep,name=prices,proto3" json:"prices,omitempty"`
	TermsOfService   string                 `protobuf:"bytes,19,opt,name=terms_of_service,json=termsOfService,proto3" json:"terms_of_service,omitempty"`
	CustomPolicies   []*CustomPolicy        `protobuf:"bytes,20,rep,name=custom_policies,json=customPolicies,proto3" json:"custom_policies,omitempty"`
	AgeRestriction   string                 `protobuf:"bytes,21,opt,name=age_restriction,json=ageRestriction,proto3" json:"age_restriction,omitempty"`
	CostForeignGuest string                 `protobuf:"bytes,22,opt,name=cost_foreign_guest,json=costForeignGuest,proto3" json:"cost_foreign_guest,omitempty"`
	Itinerary        string                 `protobuf:"bytes,23,opt,name=itinerary,proto3" json:"itinerary,omitempty"`
	PolicyTitle      string                 `protobuf:"bytes,24,opt,name=policy_title,json=policyTitle,proto3" json:"policy_title,omitempty"`
	Policy           string                 `protobuf:"bytes,25,opt,name=policy,proto3" json:"policy,omitempty"`
	AdditionalCost   *AdditionalCost        `protobuf:"bytes,26,opt,name=additional_cost,json=additionalCost,proto3" json:"additional_cost,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *TourPackage) Reset() {
	*x = TourPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TourPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourPackage) ProtoMessage() {}

func (x *TourPackage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourPackage.ProtoReflect.Descriptor instead.
func (*TourPackage) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{4}
}

func (x *TourPackage) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *TourPackage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TourPackage) GetMedias() []*PackageMedia {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *TourPackage) GetSchedules() []*PackageSchedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *TourPackage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TourPackage) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *TourPackage) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TourPackage) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *TourPackage) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *TourPackage) GetReview() string {
	if x != nil {
		return x.Review
	}
	return ""
}

func (x *TourPackage) GetAddons() []*PackageAddon {
	if x != nil {
		return x.Addons
	}
	return nil
}

func (x *TourPackage) GetIsCurated() bool {
	if x != nil {
		return x.IsCurated
	}
	return false
}

func (x *TourPackage) GetIsFeatured() bool {
	if x != nil {
		return x.IsFeatured
	}
	return false
}

func (x *TourPackage) GetIsRefundable() bool {
	if x != nil {
		return x.IsRefundable
	}
	return false
}

func (x *TourPackage) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *TourPackage) GetTypeTour() string {
	if x != nil {
		return x.TypeTour
	}
	return ""
}

func (x *TourPackage) GetPrices() []*PackagePrice {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *TourPackage) GetTermsOfService() string {
	if x != nil {
		return x.TermsOfService
	}
	return ""
}

func (x *TourPackage) GetCustomPolicies() []*CustomPolicy {
	if x != nil {
		return x.CustomPolicies
	}
	return nil
}

func (x *TourPackage) GetAgeRestriction() string {
	if x != nil {
		return x.AgeRestriction
	}
	return ""
}

func (x *TourPackage) GetCostForeignGuest() string {
	if x != nil {
		return x.CostForeignGuest
	}
	return ""
}

func (x *TourPackage) GetItinerary() string {
	if x != nil {
		return x.Itinerary
	}
	return ""
}

func (x *TourPackage) GetPolicyTitle() string {
	if x != nil {
		return x.PolicyTitle
	}
	return ""
}

func (x *TourPackage) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *TourPackage) GetAdditionalCost() *AdditionalCost {
	if x != nil {
		return x.AdditionalCost
	}
	return nil
}

func (x *TourPackage) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type CustomPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyName string `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	Policy     string `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	TourId     string `protobuf:"bytes,3,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
}

func (x *CustomPolicy) Reset() {
	*x = CustomPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomPolicy) ProtoMessage() {}

func (x *CustomPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomPolicy.ProtoReflect.Descriptor instead.
func (*CustomPolicy) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{5}
}

func (x *CustomPolicy) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *CustomPolicy) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *CustomPolicy) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

type BookingByContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderByContactId    string                 `protobuf:"bytes,1,opt,name=order_by_contact_id,json=orderByContactId,proto3" json:"order_by_contact_id,omitempty"`
	UserUid             string                 `protobuf:"bytes,2,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	TourId              string                 `protobuf:"bytes,3,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	FirstName           string                 `protobuf:"bytes,4,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName            string                 `protobuf:"bytes,5,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	PhoneNumber         string                 `protobuf:"bytes,6,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Email               string                 `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	NumberOfParticipant int32                  `protobuf:"varint,8,opt,name=number_of_participant,json=numberOfParticipant,proto3" json:"number_of_participant,omitempty"`
	Status              string                 `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	HostId              string                 `protobuf:"bytes,10,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Info                string                 `protobuf:"bytes,11,opt,name=info,proto3" json:"info,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt           *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *BookingByContact) Reset() {
	*x = BookingByContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingByContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingByContact) ProtoMessage() {}

func (x *BookingByContact) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingByContact.ProtoReflect.Descriptor instead.
func (*BookingByContact) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{6}
}

func (x *BookingByContact) GetOrderByContactId() string {
	if x != nil {
		return x.OrderByContactId
	}
	return ""
}

func (x *BookingByContact) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *BookingByContact) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *BookingByContact) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *BookingByContact) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *BookingByContact) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *BookingByContact) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *BookingByContact) GetNumberOfParticipant() int32 {
	if x != nil {
		return x.NumberOfParticipant
	}
	return 0
}

func (x *BookingByContact) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BookingByContact) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *BookingByContact) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *BookingByContact) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BookingByContact) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *BookingByContact) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type ListBooking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId        string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderNumber    string                 `protobuf:"bytes,2,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	Medias         []*PackageMedia        `protobuf:"bytes,3,rep,name=medias,proto3" json:"medias,omitempty"`
	Title          string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Location       string                 `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	StartDate      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	HostName       string                 `protobuf:"bytes,8,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	TypeTour       string                 `protobuf:"bytes,9,opt,name=type_tour,json=typeTour,proto3" json:"type_tour,omitempty"`
	Status         string                 `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	TourStatus     string                 `protobuf:"bytes,11,opt,name=tour_status,json=tourStatus,proto3" json:"tour_status,omitempty"`
	QuotaLeft      string                 `protobuf:"bytes,12,opt,name=quota_left,json=quotaLeft,proto3" json:"quota_left,omitempty"`
	Awaiting       string                 `protobuf:"bytes,13,opt,name=awaiting,proto3" json:"awaiting,omitempty"`
	Ongoing        string                 `protobuf:"bytes,14,opt,name=ongoing,proto3" json:"ongoing,omitempty"`
	EndPaymentDate *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=end_payment_date,json=endPaymentDate,proto3" json:"end_payment_date,omitempty"`
	PaymentDate    *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`
	CancelAt       *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=cancel_at,json=cancelAt,proto3" json:"cancel_at,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ScheduleId     string                 `protobuf:"bytes,19,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Reason         string                 `protobuf:"bytes,20,opt,name=reason,proto3" json:"reason,omitempty"`
	PromoCode      string                 `protobuf:"bytes,21,opt,name=promo_code,json=promoCode,proto3" json:"promo_code,omitempty"`
	Discount       float64                `protobuf:"fixed64,22,opt,name=discount,proto3" json:"discount,omitempty"`
}

func (x *ListBooking) Reset() {
	*x = ListBooking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBooking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBooking) ProtoMessage() {}

func (x *ListBooking) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBooking.ProtoReflect.Descriptor instead.
func (*ListBooking) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{7}
}

func (x *ListBooking) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ListBooking) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *ListBooking) GetMedias() []*PackageMedia {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *ListBooking) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ListBooking) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ListBooking) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ListBooking) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ListBooking) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *ListBooking) GetTypeTour() string {
	if x != nil {
		return x.TypeTour
	}
	return ""
}

func (x *ListBooking) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListBooking) GetTourStatus() string {
	if x != nil {
		return x.TourStatus
	}
	return ""
}

func (x *ListBooking) GetQuotaLeft() string {
	if x != nil {
		return x.QuotaLeft
	}
	return ""
}

func (x *ListBooking) GetAwaiting() string {
	if x != nil {
		return x.Awaiting
	}
	return ""
}

func (x *ListBooking) GetOngoing() string {
	if x != nil {
		return x.Ongoing
	}
	return ""
}

func (x *ListBooking) GetEndPaymentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndPaymentDate
	}
	return nil
}

func (x *ListBooking) GetPaymentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDate
	}
	return nil
}

func (x *ListBooking) GetCancelAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CancelAt
	}
	return nil
}

func (x *ListBooking) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListBooking) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *ListBooking) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ListBooking) GetPromoCode() string {
	if x != nil {
		return x.PromoCode
	}
	return ""
}

func (x *ListBooking) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

type RequestCancelTourHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cancel     bool   `protobuf:"varint,1,opt,name=cancel,proto3" json:"cancel,omitempty"`
	ScheduleId string `protobuf:"bytes,2,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	HostId     string `protobuf:"bytes,3,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
}

func (x *RequestCancelTourHost) Reset() {
	*x = RequestCancelTourHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCancelTourHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCancelTourHost) ProtoMessage() {}

func (x *RequestCancelTourHost) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCancelTourHost.ProtoReflect.Descriptor instead.
func (*RequestCancelTourHost) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{8}
}

func (x *RequestCancelTourHost) GetCancel() bool {
	if x != nil {
		return x.Cancel
	}
	return false
}

func (x *RequestCancelTourHost) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *RequestCancelTourHost) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

type ResponseCancelTourHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *ResponseCancelTourHost) Reset() {
	*x = ResponseCancelTourHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseCancelTourHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseCancelTourHost) ProtoMessage() {}

func (x *ResponseCancelTourHost) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseCancelTourHost.ProtoReflect.Descriptor instead.
func (*ResponseCancelTourHost) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{9}
}

func (x *ResponseCancelTourHost) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseCancelTourHost) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type ListIncomingBooking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId           string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	TourId            string                 `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Medias            []*PackageMedia        `protobuf:"bytes,3,rep,name=medias,proto3" json:"medias,omitempty"`
	Title             string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Location          string                 `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	ScheduleId        string                 `protobuf:"bytes,6,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	StartDate         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate           *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	HostName          string                 `protobuf:"bytes,9,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	TypeTour          string                 `protobuf:"bytes,10,opt,name=type_tour,json=typeTour,proto3" json:"type_tour,omitempty"`
	Status            string                 `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	TourStatus        string                 `protobuf:"bytes,12,opt,name=tour_status,json=tourStatus,proto3" json:"tour_status,omitempty"`
	Badge             bool                   `protobuf:"varint,13,opt,name=badge,proto3" json:"badge,omitempty"`
	TotalParticipants string                 `protobuf:"bytes,14,opt,name=total_participants,json=totalParticipants,proto3" json:"total_participants,omitempty"`
	TotalBooks        string                 `protobuf:"bytes,15,opt,name=total_books,json=totalBooks,proto3" json:"total_books,omitempty"`
	QuotaLeft         string                 `protobuf:"bytes,16,opt,name=quota_left,json=quotaLeft,proto3" json:"quota_left,omitempty"`
	Awaiting          string                 `protobuf:"bytes,17,opt,name=awaiting,proto3" json:"awaiting,omitempty"`
	Ongoing           string                 `protobuf:"bytes,18,opt,name=ongoing,proto3" json:"ongoing,omitempty"`
	AskHost           bool                   `protobuf:"varint,19,opt,name=ask_host,json=askHost,proto3" json:"ask_host,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	PromoCode         string                 `protobuf:"bytes,21,opt,name=promo_code,json=promoCode,proto3" json:"promo_code,omitempty"`
	Discount          float64                `protobuf:"fixed64,22,opt,name=discount,proto3" json:"discount,omitempty"`
}

func (x *ListIncomingBooking) Reset() {
	*x = ListIncomingBooking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIncomingBooking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIncomingBooking) ProtoMessage() {}

func (x *ListIncomingBooking) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIncomingBooking.ProtoReflect.Descriptor instead.
func (*ListIncomingBooking) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{10}
}

func (x *ListIncomingBooking) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ListIncomingBooking) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *ListIncomingBooking) GetMedias() []*PackageMedia {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *ListIncomingBooking) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ListIncomingBooking) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ListIncomingBooking) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *ListIncomingBooking) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ListIncomingBooking) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ListIncomingBooking) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *ListIncomingBooking) GetTypeTour() string {
	if x != nil {
		return x.TypeTour
	}
	return ""
}

func (x *ListIncomingBooking) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListIncomingBooking) GetTourStatus() string {
	if x != nil {
		return x.TourStatus
	}
	return ""
}

func (x *ListIncomingBooking) GetBadge() bool {
	if x != nil {
		return x.Badge
	}
	return false
}

func (x *ListIncomingBooking) GetTotalParticipants() string {
	if x != nil {
		return x.TotalParticipants
	}
	return ""
}

func (x *ListIncomingBooking) GetTotalBooks() string {
	if x != nil {
		return x.TotalBooks
	}
	return ""
}

func (x *ListIncomingBooking) GetQuotaLeft() string {
	if x != nil {
		return x.QuotaLeft
	}
	return ""
}

func (x *ListIncomingBooking) GetAwaiting() string {
	if x != nil {
		return x.Awaiting
	}
	return ""
}

func (x *ListIncomingBooking) GetOngoing() string {
	if x != nil {
		return x.Ongoing
	}
	return ""
}

func (x *ListIncomingBooking) GetAskHost() bool {
	if x != nil {
		return x.AskHost
	}
	return false
}

func (x *ListIncomingBooking) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListIncomingBooking) GetPromoCode() string {
	if x != nil {
		return x.PromoCode
	}
	return ""
}

func (x *ListIncomingBooking) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

type ListScheduleHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId          string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	FirstName        string                 `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName         string                 `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Avatar           string                 `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Status           string                 `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	TotalParticipant int32                  `protobuf:"varint,7,opt,name=total_participant,json=totalParticipant,proto3" json:"total_participant,omitempty"`
	TotalPaidPrice   string                 `protobuf:"bytes,8,opt,name=total_paid_price,json=totalPaidPrice,proto3" json:"total_paid_price,omitempty"`
	RemainingTime    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=remaining_time,json=remainingTime,proto3" json:"remaining_time,omitempty"`
	PaymentDate      *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`
	Reason           string                 `protobuf:"bytes,11,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ListScheduleHost) Reset() {
	*x = ListScheduleHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScheduleHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScheduleHost) ProtoMessage() {}

func (x *ListScheduleHost) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScheduleHost.ProtoReflect.Descriptor instead.
func (*ListScheduleHost) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{11}
}

func (x *ListScheduleHost) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ListScheduleHost) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *ListScheduleHost) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *ListScheduleHost) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *ListScheduleHost) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListScheduleHost) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListScheduleHost) GetTotalParticipant() int32 {
	if x != nil {
		return x.TotalParticipant
	}
	return 0
}

func (x *ListScheduleHost) GetTotalPaidPrice() string {
	if x != nil {
		return x.TotalPaidPrice
	}
	return ""
}

func (x *ListScheduleHost) GetRemainingTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RemainingTime
	}
	return nil
}

func (x *ListScheduleHost) GetPaymentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDate
	}
	return nil
}

func (x *ListScheduleHost) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ResponseListScheduleHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title    string              `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data     []*ListScheduleHost `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Paginate *Paginate           `protobuf:"bytes,4,opt,name=paginate,proto3" json:"paginate,omitempty"`
}

func (x *ResponseListScheduleHost) Reset() {
	*x = ResponseListScheduleHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseListScheduleHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseListScheduleHost) ProtoMessage() {}

func (x *ResponseListScheduleHost) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseListScheduleHost.ProtoReflect.Descriptor instead.
func (*ResponseListScheduleHost) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{12}
}

func (x *ResponseListScheduleHost) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseListScheduleHost) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseListScheduleHost) GetData() []*ListScheduleHost {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponseListScheduleHost) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

type ResponseListBooking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title    string         `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data     []*ListBooking `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Paginate *Paginate      `protobuf:"bytes,4,opt,name=paginate,proto3" json:"paginate,omitempty"`
}

func (x *ResponseListBooking) Reset() {
	*x = ResponseListBooking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseListBooking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseListBooking) ProtoMessage() {}

func (x *ResponseListBooking) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseListBooking.ProtoReflect.Descriptor instead.
func (*ResponseListBooking) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{13}
}

func (x *ResponseListBooking) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseListBooking) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseListBooking) GetData() []*ListBooking {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponseListBooking) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

type ResponseIncomingBookingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title    string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data     []*ListIncomingBooking `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Paginate *Paginate              `protobuf:"bytes,4,opt,name=paginate,proto3" json:"paginate,omitempty"`
}

func (x *ResponseIncomingBookingList) Reset() {
	*x = ResponseIncomingBookingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseIncomingBookingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseIncomingBookingList) ProtoMessage() {}

func (x *ResponseIncomingBookingList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseIncomingBookingList.ProtoReflect.Descriptor instead.
func (*ResponseIncomingBookingList) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{14}
}

func (x *ResponseIncomingBookingList) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseIncomingBookingList) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseIncomingBookingList) GetData() []*ListIncomingBooking {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponseIncomingBookingList) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

type RequestParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       string `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage    string `protobuf:"bytes,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Param      string `protobuf:"bytes,3,opt,name=param,proto3" json:"param,omitempty"`
	ScheduleId string `protobuf:"bytes,4,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	HostId     string `protobuf:"bytes,5,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	TypeTour   string `protobuf:"bytes,6,opt,name=type_tour,json=typeTour,proto3" json:"type_tour,omitempty"`
}

func (x *RequestParams) Reset() {
	*x = RequestParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestParams) ProtoMessage() {}

func (x *RequestParams) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestParams.ProtoReflect.Descriptor instead.
func (*RequestParams) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{15}
}

func (x *RequestParams) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *RequestParams) GetPerPage() string {
	if x != nil {
		return x.PerPage
	}
	return ""
}

func (x *RequestParams) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *RequestParams) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *RequestParams) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *RequestParams) GetTypeTour() string {
	if x != nil {
		return x.TypeTour
	}
	return ""
}

type RequestParamsIncomingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       string `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage    string `protobuf:"bytes,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Param      string `protobuf:"bytes,3,opt,name=param,proto3" json:"param,omitempty"`
	ScheduleId string `protobuf:"bytes,4,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Key        string `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	HostId     string `protobuf:"bytes,6,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
}

func (x *RequestParamsIncomingList) Reset() {
	*x = RequestParamsIncomingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestParamsIncomingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestParamsIncomingList) ProtoMessage() {}

func (x *RequestParamsIncomingList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestParamsIncomingList.ProtoReflect.Descriptor instead.
func (*RequestParamsIncomingList) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{16}
}

func (x *RequestParamsIncomingList) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *RequestParamsIncomingList) GetPerPage() string {
	if x != nil {
		return x.PerPage
	}
	return ""
}

func (x *RequestParamsIncomingList) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *RequestParamsIncomingList) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *RequestParamsIncomingList) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RequestParamsIncomingList) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

type Paginate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentPage int32 `protobuf:"varint,1,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	NextPage    int32 `protobuf:"varint,2,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	TotalPage   int32 `protobuf:"varint,3,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	PerPage     int32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *Paginate) Reset() {
	*x = Paginate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paginate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paginate) ProtoMessage() {}

func (x *Paginate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paginate.ProtoReflect.Descriptor instead.
func (*Paginate) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{17}
}

func (x *Paginate) GetCurrentPage() int32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *Paginate) GetNextPage() int32 {
	if x != nil {
		return x.NextPage
	}
	return 0
}

func (x *Paginate) GetTotalPage() int32 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *Paginate) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type BookingByContactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code               int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title              string            `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	TourRecommendation []*TourPackage    `protobuf:"bytes,3,rep,name=tour_recommendation,json=tourRecommendation,proto3" json:"tour_recommendation,omitempty"`
	Data               *BookingByContact `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BookingByContactResponse) Reset() {
	*x = BookingByContactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingByContactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingByContactResponse) ProtoMessage() {}

func (x *BookingByContactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingByContactResponse.ProtoReflect.Descriptor instead.
func (*BookingByContactResponse) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{18}
}

func (x *BookingByContactResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BookingByContactResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BookingByContactResponse) GetTourRecommendation() []*TourPackage {
	if x != nil {
		return x.TourRecommendation
	}
	return nil
}

func (x *BookingByContactResponse) GetData() *BookingByContact {
	if x != nil {
		return x.Data
	}
	return nil
}

type BookingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data  *Booking `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BookingResponse) Reset() {
	*x = BookingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingResponse) ProtoMessage() {}

func (x *BookingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingResponse.ProtoReflect.Descriptor instead.
func (*BookingResponse) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{19}
}

func (x *BookingResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BookingResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BookingResponse) GetData() *Booking {
	if x != nil {
		return x.Data
	}
	return nil
}

type PackageSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId  string                 `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	TourId      string                 `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Durations   string                 `protobuf:"bytes,3,opt,name=durations,proto3" json:"durations,omitempty"`
	StartDate   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Quota       string                 `protobuf:"bytes,6,opt,name=quota,proto3" json:"quota,omitempty"`
	IsActive    bool                   `protobuf:"varint,7,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	MinQuota    string                 `protobuf:"bytes,8,opt,name=min_quota,json=minQuota,proto3" json:"min_quota,omitempty"`
	MaxQuota    string                 `protobuf:"bytes,9,opt,name=max_quota,json=maxQuota,proto3" json:"max_quota,omitempty"`
	IsBooked    bool                   `protobuf:"varint,10,opt,name=is_booked,json=isBooked,proto3" json:"is_booked,omitempty"`
	OrderNumber string                 `protobuf:"bytes,11,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	TourStatus  string                 `protobuf:"bytes,12,opt,name=tour_status,json=tourStatus,proto3" json:"tour_status,omitempty"`
}

func (x *PackageSchedule) Reset() {
	*x = PackageSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageSchedule) ProtoMessage() {}

func (x *PackageSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageSchedule.ProtoReflect.Descriptor instead.
func (*PackageSchedule) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{20}
}

func (x *PackageSchedule) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *PackageSchedule) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *PackageSchedule) GetDurations() string {
	if x != nil {
		return x.Durations
	}
	return ""
}

func (x *PackageSchedule) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *PackageSchedule) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *PackageSchedule) GetQuota() string {
	if x != nil {
		return x.Quota
	}
	return ""
}

func (x *PackageSchedule) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *PackageSchedule) GetMinQuota() string {
	if x != nil {
		return x.MinQuota
	}
	return ""
}

func (x *PackageSchedule) GetMaxQuota() string {
	if x != nil {
		return x.MaxQuota
	}
	return ""
}

func (x *PackageSchedule) GetIsBooked() bool {
	if x != nil {
		return x.IsBooked
	}
	return false
}

func (x *PackageSchedule) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *PackageSchedule) GetTourStatus() string {
	if x != nil {
		return x.TourStatus
	}
	return ""
}

type PackageMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId string `protobuf:"bytes,1,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Type    string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	TourId  string `protobuf:"bytes,4,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
}

func (x *PackageMedia) Reset() {
	*x = PackageMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageMedia) ProtoMessage() {}

func (x *PackageMedia) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageMedia.ProtoReflect.Descriptor instead.
func (*PackageMedia) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{21}
}

func (x *PackageMedia) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *PackageMedia) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PackageMedia) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PackageMedia) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

type PackageAddon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddonId     string `protobuf:"bytes,1,opt,name=addon_id,json=addonId,proto3" json:"addon_id,omitempty"`
	Addon       string `protobuf:"bytes,2,opt,name=addon,proto3" json:"addon,omitempty"`
	Price       string `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	TourId      string `protobuf:"bytes,4,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	OrderNumber string `protobuf:"bytes,5,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
}

func (x *PackageAddon) Reset() {
	*x = PackageAddon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageAddon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageAddon) ProtoMessage() {}

func (x *PackageAddon) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageAddon.ProtoReflect.Descriptor instead.
func (*PackageAddon) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{22}
}

func (x *PackageAddon) GetAddonId() string {
	if x != nil {
		return x.AddonId
	}
	return ""
}

func (x *PackageAddon) GetAddon() string {
	if x != nil {
		return x.Addon
	}
	return ""
}

func (x *PackageAddon) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *PackageAddon) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *PackageAddon) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

type PackagePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceId        string `protobuf:"bytes,1,opt,name=price_id,json=priceId,proto3" json:"price_id,omitempty"`
	TourId         string `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	MinParticipant string `protobuf:"bytes,3,opt,name=min_participant,json=minParticipant,proto3" json:"min_participant,omitempty"`
	MaxParticipant string `protobuf:"bytes,4,opt,name=max_participant,json=maxParticipant,proto3" json:"max_participant,omitempty"`
	Price          string `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
	KidPrice       string `protobuf:"bytes,7,opt,name=kid_price,json=kidPrice,proto3" json:"kid_price,omitempty"`
	MinKidAge      string `protobuf:"bytes,8,opt,name=min_kid_age,json=minKidAge,proto3" json:"min_kid_age,omitempty"`
	MaxKidAge      string `protobuf:"bytes,9,opt,name=max_kid_age,json=maxKidAge,proto3" json:"max_kid_age,omitempty"`
	OrderNumber    string `protobuf:"bytes,10,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
}

func (x *PackagePrice) Reset() {
	*x = PackagePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagePrice) ProtoMessage() {}

func (x *PackagePrice) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagePrice.ProtoReflect.Descriptor instead.
func (*PackagePrice) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{23}
}

func (x *PackagePrice) GetPriceId() string {
	if x != nil {
		return x.PriceId
	}
	return ""
}

func (x *PackagePrice) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *PackagePrice) GetMinParticipant() string {
	if x != nil {
		return x.MinParticipant
	}
	return ""
}

func (x *PackagePrice) GetMaxParticipant() string {
	if x != nil {
		return x.MaxParticipant
	}
	return ""
}

func (x *PackagePrice) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *PackagePrice) GetKidPrice() string {
	if x != nil {
		return x.KidPrice
	}
	return ""
}

func (x *PackagePrice) GetMinKidAge() string {
	if x != nil {
		return x.MinKidAge
	}
	return ""
}

func (x *PackagePrice) GetMaxKidAge() string {
	if x != nil {
		return x.MaxKidAge
	}
	return ""
}

func (x *PackagePrice) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

type ContactInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName   string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName    string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	PhoneNumber string `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Email       string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *ContactInfo) Reset() {
	*x = ContactInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactInfo) ProtoMessage() {}

func (x *ContactInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactInfo.ProtoReflect.Descriptor instead.
func (*ContactInfo) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{24}
}

func (x *ContactInfo) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *ContactInfo) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *ContactInfo) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *ContactInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNumber   string `protobuf:"bytes,1,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	FirstName     string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName      string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	PhoneNumber   string `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Email         string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Age           string `protobuf:"bytes,6,opt,name=age,proto3" json:"age,omitempty"`
	AsContactInfo bool   `protobuf:"varint,7,opt,name=as_contact_info,json=asContactInfo,proto3" json:"as_contact_info,omitempty"`
}

func (x *Participant) Reset() {
	*x = Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Participant) ProtoMessage() {}

func (x *Participant) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Participant.ProtoReflect.Descriptor instead.
func (*Participant) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{25}
}

func (x *Participant) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *Participant) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Participant) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Participant) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *Participant) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Participant) GetAge() string {
	if x != nil {
		return x.Age
	}
	return ""
}

func (x *Participant) GetAsContactInfo() bool {
	if x != nil {
		return x.AsContactInfo
	}
	return false
}

type ParticipantList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNumber  string         `protobuf:"bytes,1,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	Participants []*Participant `protobuf:"bytes,2,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *ParticipantList) Reset() {
	*x = ParticipantList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantList) ProtoMessage() {}

func (x *ParticipantList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantList.ProtoReflect.Descriptor instead.
func (*ParticipantList) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{26}
}

func (x *ParticipantList) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *ParticipantList) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

type RequestParticipantQty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNumber          string `protobuf:"bytes,1,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	QtyAdults            string `protobuf:"bytes,2,opt,name=qty_adults,json=qtyAdults,proto3" json:"qty_adults,omitempty"`
	QtyKids              string `protobuf:"bytes,3,opt,name=qty_kids,json=qtyKids,proto3" json:"qty_kids,omitempty"`
	SubPriceParticipants string `protobuf:"bytes,4,opt,name=sub_price_participants,json=subPriceParticipants,proto3" json:"sub_price_participants,omitempty"`
	PriceId              string `protobuf:"bytes,5,opt,name=price_id,json=priceId,proto3" json:"price_id,omitempty"`
	TourId               string `protobuf:"bytes,6,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	MinParticipant       string `protobuf:"bytes,7,opt,name=min_participant,json=minParticipant,proto3" json:"min_participant,omitempty"`
	MaxParticipant       string `protobuf:"bytes,8,opt,name=max_participant,json=maxParticipant,proto3" json:"max_participant,omitempty"`
	Price                string `protobuf:"bytes,9,opt,name=price,proto3" json:"price,omitempty"`
	KidPrice             string `protobuf:"bytes,10,opt,name=kid_price,json=kidPrice,proto3" json:"kid_price,omitempty"`
	MinKidAge            string `protobuf:"bytes,11,opt,name=min_kid_age,json=minKidAge,proto3" json:"min_kid_age,omitempty"`
	MaxKidAge            string `protobuf:"bytes,12,opt,name=max_kid_age,json=maxKidAge,proto3" json:"max_kid_age,omitempty"`
}

func (x *RequestParticipantQty) Reset() {
	*x = RequestParticipantQty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestParticipantQty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestParticipantQty) ProtoMessage() {}

func (x *RequestParticipantQty) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestParticipantQty.ProtoReflect.Descriptor instead.
func (*RequestParticipantQty) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{27}
}

func (x *RequestParticipantQty) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *RequestParticipantQty) GetQtyAdults() string {
	if x != nil {
		return x.QtyAdults
	}
	return ""
}

func (x *RequestParticipantQty) GetQtyKids() string {
	if x != nil {
		return x.QtyKids
	}
	return ""
}

func (x *RequestParticipantQty) GetSubPriceParticipants() string {
	if x != nil {
		return x.SubPriceParticipants
	}
	return ""
}

func (x *RequestParticipantQty) GetPriceId() string {
	if x != nil {
		return x.PriceId
	}
	return ""
}

func (x *RequestParticipantQty) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *RequestParticipantQty) GetMinParticipant() string {
	if x != nil {
		return x.MinParticipant
	}
	return ""
}

func (x *RequestParticipantQty) GetMaxParticipant() string {
	if x != nil {
		return x.MaxParticipant
	}
	return ""
}

func (x *RequestParticipantQty) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *RequestParticipantQty) GetKidPrice() string {
	if x != nil {
		return x.KidPrice
	}
	return ""
}

func (x *RequestParticipantQty) GetMinKidAge() string {
	if x != nil {
		return x.MinKidAge
	}
	return ""
}

func (x *RequestParticipantQty) GetMaxKidAge() string {
	if x != nil {
		return x.MaxKidAge
	}
	return ""
}

type ResponseParticipantQty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *RequestParticipantQty `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Code  int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Title string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *ResponseParticipantQty) Reset() {
	*x = ResponseParticipantQty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseParticipantQty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseParticipantQty) ProtoMessage() {}

func (x *ResponseParticipantQty) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseParticipantQty.ProtoReflect.Descriptor instead.
func (*ResponseParticipantQty) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{28}
}

func (x *ResponseParticipantQty) GetData() *RequestParticipantQty {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponseParticipantQty) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseParticipantQty) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type ResponseGetPackageScheduleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PackageSchedule `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseGetPackageScheduleList) Reset() {
	*x = ResponseGetPackageScheduleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseGetPackageScheduleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseGetPackageScheduleList) ProtoMessage() {}

func (x *ResponseGetPackageScheduleList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseGetPackageScheduleList.ProtoReflect.Descriptor instead.
func (*ResponseGetPackageScheduleList) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{29}
}

func (x *ResponseGetPackageScheduleList) GetData() []*PackageSchedule {
	if x != nil {
		return x.Data
	}
	return nil
}

type ResponseDetailHostBooking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string             `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data  *DetailBookingHost `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseDetailHostBooking) Reset() {
	*x = ResponseDetailHostBooking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseDetailHostBooking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseDetailHostBooking) ProtoMessage() {}

func (x *ResponseDetailHostBooking) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseDetailHostBooking.ProtoReflect.Descriptor instead.
func (*ResponseDetailHostBooking) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{30}
}

func (x *ResponseDetailHostBooking) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseDetailHostBooking) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseDetailHostBooking) GetData() *DetailBookingHost {
	if x != nil {
		return x.Data
	}
	return nil
}

type ResponseDetailGuestBooking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string              `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data  *DetailBookingGuest `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseDetailGuestBooking) Reset() {
	*x = ResponseDetailGuestBooking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseDetailGuestBooking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseDetailGuestBooking) ProtoMessage() {}

func (x *ResponseDetailGuestBooking) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseDetailGuestBooking.ProtoReflect.Descriptor instead.
func (*ResponseDetailGuestBooking) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{31}
}

func (x *ResponseDetailGuestBooking) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseDetailGuestBooking) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseDetailGuestBooking) GetData() *DetailBookingGuest {
	if x != nil {
		return x.Data
	}
	return nil
}

type ResponseParticipantsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string         `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data  []*Participant `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseParticipantsList) Reset() {
	*x = ResponseParticipantsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseParticipantsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseParticipantsList) ProtoMessage() {}

func (x *ResponseParticipantsList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseParticipantsList.ProtoReflect.Descriptor instead.
func (*ResponseParticipantsList) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{32}
}

func (x *ResponseParticipantsList) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseParticipantsList) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseParticipantsList) GetData() []*Participant {
	if x != nil {
		return x.Data
	}
	return nil
}

type ResponseGetAddonlist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*PackageAddon `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Code  int32           `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Title string          `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *ResponseGetAddonlist) Reset() {
	*x = ResponseGetAddonlist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseGetAddonlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseGetAddonlist) ProtoMessage() {}

func (x *ResponseGetAddonlist) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseGetAddonlist.ProtoReflect.Descriptor instead.
func (*ResponseGetAddonlist) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{33}
}

func (x *ResponseGetAddonlist) GetData() []*PackageAddon {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponseGetAddonlist) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseGetAddonlist) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type ResponseGetPricelist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*PackagePrice `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Code  int32           `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Title string          `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *ResponseGetPricelist) Reset() {
	*x = ResponseGetPricelist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseGetPricelist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseGetPricelist) ProtoMessage() {}

func (x *ResponseGetPricelist) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseGetPricelist.ProtoReflect.Descriptor instead.
func (*ResponseGetPricelist) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{34}
}

func (x *ResponseGetPricelist) GetData() []*PackagePrice {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponseGetPricelist) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseGetPricelist) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type RequestDetailPriceByParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceId          string `protobuf:"bytes,1,opt,name=price_id,json=priceId,proto3" json:"price_id,omitempty"`
	TourId           string `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	MinParticipant   string `protobuf:"bytes,3,opt,name=min_participant,json=minParticipant,proto3" json:"min_participant,omitempty"`
	MaxParticipant   string `protobuf:"bytes,4,opt,name=max_participant,json=maxParticipant,proto3" json:"max_participant,omitempty"`
	Price            string `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
	KidPrice         string `protobuf:"bytes,7,opt,name=kid_price,json=kidPrice,proto3" json:"kid_price,omitempty"`
	MinKidAge        string `protobuf:"bytes,8,opt,name=min_kid_age,json=minKidAge,proto3" json:"min_kid_age,omitempty"`
	MaxKidAge        string `protobuf:"bytes,9,opt,name=max_kid_age,json=maxKidAge,proto3" json:"max_kid_age,omitempty"`
	AdultParticipant string `protobuf:"bytes,10,opt,name=adult_participant,json=adultParticipant,proto3" json:"adult_participant,omitempty"`
	KidParticipant   string `protobuf:"bytes,11,opt,name=kid_participant,json=kidParticipant,proto3" json:"kid_participant,omitempty"`
}

func (x *RequestDetailPriceByParticipant) Reset() {
	*x = RequestDetailPriceByParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestDetailPriceByParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDetailPriceByParticipant) ProtoMessage() {}

func (x *RequestDetailPriceByParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDetailPriceByParticipant.ProtoReflect.Descriptor instead.
func (*RequestDetailPriceByParticipant) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{35}
}

func (x *RequestDetailPriceByParticipant) GetPriceId() string {
	if x != nil {
		return x.PriceId
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetMinParticipant() string {
	if x != nil {
		return x.MinParticipant
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetMaxParticipant() string {
	if x != nil {
		return x.MaxParticipant
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetKidPrice() string {
	if x != nil {
		return x.KidPrice
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetMinKidAge() string {
	if x != nil {
		return x.MinKidAge
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetMaxKidAge() string {
	if x != nil {
		return x.MaxKidAge
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetAdultParticipant() string {
	if x != nil {
		return x.AdultParticipant
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetKidParticipant() string {
	if x != nil {
		return x.KidParticipant
	}
	return ""
}

type ResponseDetailPriceByParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceId               string  `protobuf:"bytes,1,opt,name=price_id,json=priceId,proto3" json:"price_id,omitempty"`
	TourId                string  `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	MinParticipant        string  `protobuf:"bytes,3,opt,name=min_participant,json=minParticipant,proto3" json:"min_participant,omitempty"`
	MaxParticipant        string  `protobuf:"bytes,4,opt,name=max_participant,json=maxParticipant,proto3" json:"max_participant,omitempty"`
	Price                 string  `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
	KidPrice              string  `protobuf:"bytes,7,opt,name=kid_price,json=kidPrice,proto3" json:"kid_price,omitempty"`
	MinKidAge             string  `protobuf:"bytes,8,opt,name=min_kid_age,json=minKidAge,proto3" json:"min_kid_age,omitempty"`
	MaxKidAge             string  `protobuf:"bytes,9,opt,name=max_kid_age,json=maxKidAge,proto3" json:"max_kid_age,omitempty"`
	AdultParticipant      string  `protobuf:"bytes,10,opt,name=adult_participant,json=adultParticipant,proto3" json:"adult_participant,omitempty"`
	KidParticipant        string  `protobuf:"bytes,11,opt,name=kid_participant,json=kidParticipant,proto3" json:"kid_participant,omitempty"`
	TotalParticipant      string  `protobuf:"bytes,12,opt,name=total_participant,json=totalParticipant,proto3" json:"total_participant,omitempty"`
	TotalAdultPrice       string  `protobuf:"bytes,13,opt,name=total_adult_price,json=totalAdultPrice,proto3" json:"total_adult_price,omitempty"`
	TotalKidPrice         string  `protobuf:"bytes,14,opt,name=total_kid_price,json=totalKidPrice,proto3" json:"total_kid_price,omitempty"`
	TotalPriceParticipant string  `protobuf:"bytes,15,opt,name=total_price_participant,json=totalPriceParticipant,proto3" json:"total_price_participant,omitempty"`
	PromoCode             string  `protobuf:"bytes,16,opt,name=promo_code,json=promoCode,proto3" json:"promo_code,omitempty"`
	Discount              float64 `protobuf:"fixed64,17,opt,name=discount,proto3" json:"discount,omitempty"`
}

func (x *ResponseDetailPriceByParticipant) Reset() {
	*x = ResponseDetailPriceByParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseDetailPriceByParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseDetailPriceByParticipant) ProtoMessage() {}

func (x *ResponseDetailPriceByParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseDetailPriceByParticipant.ProtoReflect.Descriptor instead.
func (*ResponseDetailPriceByParticipant) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{36}
}

func (x *ResponseDetailPriceByParticipant) GetPriceId() string {
	if x != nil {
		return x.PriceId
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetMinParticipant() string {
	if x != nil {
		return x.MinParticipant
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetMaxParticipant() string {
	if x != nil {
		return x.MaxParticipant
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetKidPrice() string {
	if x != nil {
		return x.KidPrice
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetMinKidAge() string {
	if x != nil {
		return x.MinKidAge
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetMaxKidAge() string {
	if x != nil {
		return x.MaxKidAge
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetAdultParticipant() string {
	if x != nil {
		return x.AdultParticipant
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetKidParticipant() string {
	if x != nil {
		return x.KidParticipant
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetTotalParticipant() string {
	if x != nil {
		return x.TotalParticipant
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetTotalAdultPrice() string {
	if x != nil {
		return x.TotalAdultPrice
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetTotalKidPrice() string {
	if x != nil {
		return x.TotalKidPrice
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetTotalPriceParticipant() string {
	if x != nil {
		return x.TotalPriceParticipant
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetPromoCode() string {
	if x != nil {
		return x.PromoCode
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

type ReceiptBooking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId              string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderNumber          string                 `protobuf:"bytes,2,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	InvoiceNumber        string                 `protobuf:"bytes,3,opt,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	UserUid              string                 `protobuf:"bytes,4,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	TourId               string                 `protobuf:"bytes,5,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Title                string                 `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Medias               []*PackageMedia        `protobuf:"bytes,7,rep,name=medias,proto3" json:"medias,omitempty"`
	Schedules            []*PackageSchedule     `protobuf:"bytes,8,rep,name=schedules,proto3" json:"schedules,omitempty"`
	Addons               []*PackageAddon        `protobuf:"bytes,9,rep,name=addons,proto3" json:"addons,omitempty"`
	Prices               []*PackagePrice        `protobuf:"bytes,10,rep,name=prices,proto3" json:"prices,omitempty"`
	AdditionalCost       *AdditionalCost        `protobuf:"bytes,11,opt,name=additional_cost,json=additionalCost,proto3" json:"additional_cost,omitempty"`
	QtyAdults            string                 `protobuf:"bytes,12,opt,name=qty_adults,json=qtyAdults,proto3" json:"qty_adults,omitempty"`
	QtyKids              string                 `protobuf:"bytes,13,opt,name=qty_kids,json=qtyKids,proto3" json:"qty_kids,omitempty"`
	ContactInfo          *ContactInfo           `protobuf:"bytes,14,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
	Participants         []*Participant         `protobuf:"bytes,15,rep,name=participants,proto3" json:"participants,omitempty"`
	SubPriceParticipants string                 `protobuf:"bytes,16,opt,name=sub_price_participants,json=subPriceParticipants,proto3" json:"sub_price_participants,omitempty"`
	TotalPrice           string                 `protobuf:"bytes,17,opt,name=total_price,json=totalPrice,proto3" json:"total_price,omitempty"`
	Status               string                 `protobuf:"bytes,18,opt,name=status,proto3" json:"status,omitempty"`
	HostId               string                 `protobuf:"bytes,19,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	EndDate              *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	TypeTour             string                 `protobuf:"bytes,22,opt,name=type_tour,json=typeTour,proto3" json:"type_tour,omitempty"`
	ReceiptNumber        string                 `protobuf:"bytes,23,opt,name=receipt_number,json=receiptNumber,proto3" json:"receipt_number,omitempty"`
	TotalPaidPrice       string                 `protobuf:"bytes,24,opt,name=total_paid_price,json=totalPaidPrice,proto3" json:"total_paid_price,omitempty"`
	SubPriceAddons       string                 `protobuf:"bytes,25,opt,name=sub_price_addons,json=subPriceAddons,proto3" json:"sub_price_addons,omitempty"`
	Location             string                 `protobuf:"bytes,26,opt,name=location,proto3" json:"location,omitempty"`
	TotalQuota           string                 `protobuf:"bytes,27,opt,name=total_quota,json=totalQuota,proto3" json:"total_quota,omitempty"`
	MinQuota             string                 `protobuf:"bytes,28,opt,name=min_quota,json=minQuota,proto3" json:"min_quota,omitempty"`
	MaxQuota             string                 `protobuf:"bytes,29,opt,name=max_quota,json=maxQuota,proto3" json:"max_quota,omitempty"`
	QuotaLeft            string                 `protobuf:"bytes,30,opt,name=quota_left,json=quotaLeft,proto3" json:"quota_left,omitempty"`
	CancelAt             *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=cancel_at,json=cancelAt,proto3" json:"cancel_at,omitempty"`
	PromoCode            string                 `protobuf:"bytes,32,opt,name=promo_code,json=promoCode,proto3" json:"promo_code,omitempty"`
	Discount             float64                `protobuf:"fixed64,33,opt,name=discount,proto3" json:"discount,omitempty"`
}

func (x *ReceiptBooking) Reset() {
	*x = ReceiptBooking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiptBooking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptBooking) ProtoMessage() {}

func (x *ReceiptBooking) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptBooking.ProtoReflect.Descriptor instead.
func (*ReceiptBooking) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{37}
}

func (x *ReceiptBooking) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ReceiptBooking) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *ReceiptBooking) GetInvoiceNumber() string {
	if x != nil {
		return x.InvoiceNumber
	}
	return ""
}

func (x *ReceiptBooking) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *ReceiptBooking) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *ReceiptBooking) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ReceiptBooking) GetMedias() []*PackageMedia {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *ReceiptBooking) GetSchedules() []*PackageSchedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *ReceiptBooking) GetAddons() []*PackageAddon {
	if x != nil {
		return x.Addons
	}
	return nil
}

func (x *ReceiptBooking) GetPrices() []*PackagePrice {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *ReceiptBooking) GetAdditionalCost() *AdditionalCost {
	if x != nil {
		return x.AdditionalCost
	}
	return nil
}

func (x *ReceiptBooking) GetQtyAdults() string {
	if x != nil {
		return x.QtyAdults
	}
	return ""
}

func (x *ReceiptBooking) GetQtyKids() string {
	if x != nil {
		return x.QtyKids
	}
	return ""
}

func (x *ReceiptBooking) GetContactInfo() *ContactInfo {
	if x != nil {
		return x.ContactInfo
	}
	return nil
}

func (x *ReceiptBooking) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *ReceiptBooking) GetSubPriceParticipants() string {
	if x != nil {
		return x.SubPriceParticipants
	}
	return ""
}

func (x *ReceiptBooking) GetTotalPrice() string {
	if x != nil {
		return x.TotalPrice
	}
	return ""
}

func (x *ReceiptBooking) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ReceiptBooking) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *ReceiptBooking) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ReceiptBooking) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ReceiptBooking) GetTypeTour() string {
	if x != nil {
		return x.TypeTour
	}
	return ""
}

func (x *ReceiptBooking) GetReceiptNumber() string {
	if x != nil {
		return x.ReceiptNumber
	}
	return ""
}

func (x *ReceiptBooking) GetTotalPaidPrice() string {
	if x != nil {
		return x.TotalPaidPrice
	}
	return ""
}

func (x *ReceiptBooking) GetSubPriceAddons() string {
	if x != nil {
		return x.SubPriceAddons
	}
	return ""
}

func (x *ReceiptBooking) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ReceiptBooking) GetTotalQuota() string {
	if x != nil {
		return x.TotalQuota
	}
	return ""
}

func (x *ReceiptBooking) GetMinQuota() string {
	if x != nil {
		return x.MinQuota
	}
	return ""
}

func (x *ReceiptBooking) GetMaxQuota() string {
	if x != nil {
		return x.MaxQuota
	}
	return ""
}

func (x *ReceiptBooking) GetQuotaLeft() string {
	if x != nil {
		return x.QuotaLeft
	}
	return ""
}

func (x *ReceiptBooking) GetCancelAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CancelAt
	}
	return nil
}

func (x *ReceiptBooking) GetPromoCode() string {
	if x != nil {
		return x.PromoCode
	}
	return ""
}

func (x *ReceiptBooking) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

type ResponseReceiptBooking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string          `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data  *ReceiptBooking `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseReceiptBooking) Reset() {
	*x = ResponseReceiptBooking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseReceiptBooking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseReceiptBooking) ProtoMessage() {}

func (x *ResponseReceiptBooking) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseReceiptBooking.ProtoReflect.Descriptor instead.
func (*ResponseReceiptBooking) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{38}
}

func (x *ResponseReceiptBooking) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseReceiptBooking) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseReceiptBooking) GetData() *ReceiptBooking {
	if x != nil {
		return x.Data
	}
	return nil
}

type ActiveTour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId          string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Title            string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Medias           []*PackageMedia        `protobuf:"bytes,3,rep,name=medias,proto3" json:"medias,omitempty"`
	Schedules        *PackageSchedule       `protobuf:"bytes,4,opt,name=schedules,proto3" json:"schedules,omitempty"`
	Location         string                 `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	Description      string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Itinerary        string                 `protobuf:"bytes,7,opt,name=itinerary,proto3" json:"itinerary,omitempty"`
	Addons           []*PackageAddon        `protobuf:"bytes,8,rep,name=addons,proto3" json:"addons,omitempty"`
	TotalParticipant int32                  `protobuf:"varint,9,opt,name=total_participant,json=totalParticipant,proto3" json:"total_participant,omitempty"`
	TourStatus       string                 `protobuf:"bytes,10,opt,name=tour_status,json=tourStatus,proto3" json:"tour_status,omitempty"`
	Host             *UserInfo              `protobuf:"bytes,12,opt,name=host,proto3" json:"host,omitempty"`
	Message          []*BroadcastMessage    `protobuf:"bytes,13,rep,name=message,proto3" json:"message,omitempty"`
	EndedByHost      *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=ended_by_host,json=endedByHost,proto3" json:"ended_by_host,omitempty"`
}

func (x *ActiveTour) Reset() {
	*x = ActiveTour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveTour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveTour) ProtoMessage() {}

func (x *ActiveTour) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveTour.ProtoReflect.Descriptor instead.
func (*ActiveTour) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{39}
}

func (x *ActiveTour) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ActiveTour) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ActiveTour) GetMedias() []*PackageMedia {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *ActiveTour) GetSchedules() *PackageSchedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *ActiveTour) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ActiveTour) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ActiveTour) GetItinerary() string {
	if x != nil {
		return x.Itinerary
	}
	return ""
}

func (x *ActiveTour) GetAddons() []*PackageAddon {
	if x != nil {
		return x.Addons
	}
	return nil
}

func (x *ActiveTour) GetTotalParticipant() int32 {
	if x != nil {
		return x.TotalParticipant
	}
	return 0
}

func (x *ActiveTour) GetTourStatus() string {
	if x != nil {
		return x.TourStatus
	}
	return ""
}

func (x *ActiveTour) GetHost() *UserInfo {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *ActiveTour) GetMessage() []*BroadcastMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ActiveTour) GetEndedByHost() *timestamppb.Timestamp {
	if x != nil {
		return x.EndedByHost
	}
	return nil
}

type BroadcastMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Host      *UserInfo              `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *BroadcastMessage) Reset() {
	*x = BroadcastMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastMessage) ProtoMessage() {}

func (x *BroadcastMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastMessage.ProtoReflect.Descriptor instead.
func (*BroadcastMessage) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{40}
}

func (x *BroadcastMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BroadcastMessage) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BroadcastMessage) GetHost() *UserInfo {
	if x != nil {
		return x.Host
	}
	return nil
}

type ResponseActiveTour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title  string                `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Review *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=review,proto3" json:"review,omitempty"`
	Data   *ActiveTour           `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseActiveTour) Reset() {
	*x = ResponseActiveTour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseActiveTour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseActiveTour) ProtoMessage() {}

func (x *ResponseActiveTour) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseActiveTour.ProtoReflect.Descriptor instead.
func (*ResponseActiveTour) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{41}
}

func (x *ResponseActiveTour) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseActiveTour) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseActiveTour) GetReview() *wrapperspb.BoolValue {
	if x != nil {
		return x.Review
	}
	return nil
}

func (x *ResponseActiveTour) GetData() *ActiveTour {
	if x != nil {
		return x.Data
	}
	return nil
}

type TotalParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total      int32  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	ScheduleId string `protobuf:"bytes,2,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	TourId     string `protobuf:"bytes,3,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Status     string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TotalParticipants) Reset() {
	*x = TotalParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalParticipants) ProtoMessage() {}

func (x *TotalParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalParticipants.ProtoReflect.Descriptor instead.
func (*TotalParticipants) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{42}
}

func (x *TotalParticipants) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TotalParticipants) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *TotalParticipants) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *TotalParticipants) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ResponseTotalParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string             `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data  *TotalParticipants `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseTotalParticipant) Reset() {
	*x = ResponseTotalParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTotalParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTotalParticipant) ProtoMessage() {}

func (x *ResponseTotalParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTotalParticipant.ProtoReflect.Descriptor instead.
func (*ResponseTotalParticipant) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{43}
}

func (x *ResponseTotalParticipant) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseTotalParticipant) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseTotalParticipant) GetData() *TotalParticipants {
	if x != nil {
		return x.Data
	}
	return nil
}

type RequestParamsActiveList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    string `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage string `protobuf:"bytes,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Param   string `protobuf:"bytes,4,opt,name=param,proto3" json:"param,omitempty"`
	HostId  string `protobuf:"bytes,5,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
}

func (x *RequestParamsActiveList) Reset() {
	*x = RequestParamsActiveList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestParamsActiveList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestParamsActiveList) ProtoMessage() {}

func (x *RequestParamsActiveList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestParamsActiveList.ProtoReflect.Descriptor instead.
func (*RequestParamsActiveList) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{44}
}

func (x *RequestParamsActiveList) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *RequestParamsActiveList) GetPerPage() string {
	if x != nil {
		return x.PerPage
	}
	return ""
}

func (x *RequestParamsActiveList) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *RequestParamsActiveList) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

type ListActiveBooking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId           string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Medias            []*PackageMedia        `protobuf:"bytes,2,rep,name=medias,proto3" json:"medias,omitempty"`
	Title             string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	StartDate         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	TourStatus        string                 `protobuf:"bytes,9,opt,name=tour_status,json=tourStatus,proto3" json:"tour_status,omitempty"`
	TotalParticipants string                 `protobuf:"bytes,11,opt,name=total_participants,json=totalParticipants,proto3" json:"total_participants,omitempty"`
	TotalBooks        string                 `protobuf:"bytes,12,opt,name=total_books,json=totalBooks,proto3" json:"total_books,omitempty"`
	Awaiting          string                 `protobuf:"bytes,13,opt,name=awaiting,proto3" json:"awaiting,omitempty"`
	Ongoing           string                 `protobuf:"bytes,14,opt,name=ongoing,proto3" json:"ongoing,omitempty"`
}

func (x *ListActiveBooking) Reset() {
	*x = ListActiveBooking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListActiveBooking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActiveBooking) ProtoMessage() {}

func (x *ListActiveBooking) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActiveBooking.ProtoReflect.Descriptor instead.
func (*ListActiveBooking) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{45}
}

func (x *ListActiveBooking) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ListActiveBooking) GetMedias() []*PackageMedia {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *ListActiveBooking) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ListActiveBooking) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ListActiveBooking) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ListActiveBooking) GetTourStatus() string {
	if x != nil {
		return x.TourStatus
	}
	return ""
}

func (x *ListActiveBooking) GetTotalParticipants() string {
	if x != nil {
		return x.TotalParticipants
	}
	return ""
}

func (x *ListActiveBooking) GetTotalBooks() string {
	if x != nil {
		return x.TotalBooks
	}
	return ""
}

func (x *ListActiveBooking) GetAwaiting() string {
	if x != nil {
		return x.Awaiting
	}
	return ""
}

func (x *ListActiveBooking) GetOngoing() string {
	if x != nil {
		return x.Ongoing
	}
	return ""
}

type ResponseActiveBookingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title    string               `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data     []*ListActiveBooking `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Paginate *Paginate            `protobuf:"bytes,4,opt,name=paginate,proto3" json:"paginate,omitempty"`
}

func (x *ResponseActiveBookingList) Reset() {
	*x = ResponseActiveBookingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseActiveBookingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseActiveBookingList) ProtoMessage() {}

func (x *ResponseActiveBookingList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseActiveBookingList.ProtoReflect.Descriptor instead.
func (*ResponseActiveBookingList) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{46}
}

func (x *ResponseActiveBookingList) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseActiveBookingList) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseActiveBookingList) GetData() []*ListActiveBooking {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponseActiveBookingList) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

type RequestParamsActivityList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    string `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage string `protobuf:"bytes,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Param   string `protobuf:"bytes,4,opt,name=param,proto3" json:"param,omitempty"`
	HostId  string `protobuf:"bytes,5,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
}

func (x *RequestParamsActivityList) Reset() {
	*x = RequestParamsActivityList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestParamsActivityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestParamsActivityList) ProtoMessage() {}

func (x *RequestParamsActivityList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestParamsActivityList.ProtoReflect.Descriptor instead.
func (*RequestParamsActivityList) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{47}
}

func (x *RequestParamsActivityList) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *RequestParamsActivityList) GetPerPage() string {
	if x != nil {
		return x.PerPage
	}
	return ""
}

func (x *RequestParamsActivityList) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *RequestParamsActivityList) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

type ListActivityBooking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId           string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Medias            []*PackageMedia        `protobuf:"bytes,2,rep,name=medias,proto3" json:"medias,omitempty"`
	Title             string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Location          string                 `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	ScheduleId        string                 `protobuf:"bytes,5,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	StartDate         *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate           *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	TourStatus        string                 `protobuf:"bytes,8,opt,name=tour_status,json=tourStatus,proto3" json:"tour_status,omitempty"`
	TotalParticipants string                 `protobuf:"bytes,9,opt,name=total_participants,json=totalParticipants,proto3" json:"total_participants,omitempty"`
	TotalBooks        string                 `protobuf:"bytes,10,opt,name=total_books,json=totalBooks,proto3" json:"total_books,omitempty"`
	Ongoing           string                 `protobuf:"bytes,11,opt,name=ongoing,proto3" json:"ongoing,omitempty"`
	HostName          string                 `protobuf:"bytes,12,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	CancelAt          *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=cancel_at,json=cancelAt,proto3" json:"cancel_at,omitempty"`
}

func (x *ListActivityBooking) Reset() {
	*x = ListActivityBooking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListActivityBooking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActivityBooking) ProtoMessage() {}

func (x *ListActivityBooking) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActivityBooking.ProtoReflect.Descriptor instead.
func (*ListActivityBooking) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{48}
}

func (x *ListActivityBooking) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ListActivityBooking) GetMedias() []*PackageMedia {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *ListActivityBooking) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ListActivityBooking) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ListActivityBooking) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *ListActivityBooking) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ListActivityBooking) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ListActivityBooking) GetTourStatus() string {
	if x != nil {
		return x.TourStatus
	}
	return ""
}

func (x *ListActivityBooking) GetTotalParticipants() string {
	if x != nil {
		return x.TotalParticipants
	}
	return ""
}

func (x *ListActivityBooking) GetTotalBooks() string {
	if x != nil {
		return x.TotalBooks
	}
	return ""
}

func (x *ListActivityBooking) GetOngoing() string {
	if x != nil {
		return x.Ongoing
	}
	return ""
}

func (x *ListActivityBooking) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *ListActivityBooking) GetCancelAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CancelAt
	}
	return nil
}

type ResponseBookingActivityList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title    string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data     []*ListActivityBooking `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Paginate *Paginate              `protobuf:"bytes,4,opt,name=paginate,proto3" json:"paginate,omitempty"`
}

func (x *ResponseBookingActivityList) Reset() {
	*x = ResponseBookingActivityList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseBookingActivityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseBookingActivityList) ProtoMessage() {}

func (x *ResponseBookingActivityList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseBookingActivityList.ProtoReflect.Descriptor instead.
func (*ResponseBookingActivityList) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{49}
}

func (x *ResponseBookingActivityList) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseBookingActivityList) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseBookingActivityList) GetData() []*ListActivityBooking {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponseBookingActivityList) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

type ParticipantHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourId     string `protobuf:"bytes,1,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	ScheduleId string `protobuf:"bytes,2,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Page       string `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage    string `protobuf:"bytes,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ParticipantHostRequest) Reset() {
	*x = ParticipantHostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantHostRequest) ProtoMessage() {}

func (x *ParticipantHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantHostRequest.ProtoReflect.Descriptor instead.
func (*ParticipantHostRequest) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{50}
}

func (x *ParticipantHostRequest) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *ParticipantHostRequest) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *ParticipantHostRequest) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *ParticipantHostRequest) GetPerPage() string {
	if x != nil {
		return x.PerPage
	}
	return ""
}

type ParticipantHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUid     string         `protobuf:"bytes,1,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	UserInfo    *UserInfo      `protobuf:"bytes,2,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	Participant []*Participant `protobuf:"bytes,3,rep,name=participant,proto3" json:"participant,omitempty"`
}

func (x *ParticipantHost) Reset() {
	*x = ParticipantHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantHost) ProtoMessage() {}

func (x *ParticipantHost) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantHost.ProtoReflect.Descriptor instead.
func (*ParticipantHost) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{51}
}

func (x *ParticipantHost) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *ParticipantHost) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *ParticipantHost) GetParticipant() []*Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

type ResponseParticipantHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title    string             `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data     []*ParticipantHost `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Paginate *Paginate          `protobuf:"bytes,4,opt,name=paginate,proto3" json:"paginate,omitempty"`
}

func (x *ResponseParticipantHost) Reset() {
	*x = ResponseParticipantHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseParticipantHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseParticipantHost) ProtoMessage() {}

func (x *ResponseParticipantHost) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseParticipantHost.ProtoReflect.Descriptor instead.
func (*ResponseParticipantHost) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{52}
}

func (x *ResponseParticipantHost) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseParticipantHost) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseParticipantHost) GetData() []*ParticipantHost {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponseParticipantHost) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

type RequestInfoBookings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId string `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	TourId     string `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Status     string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Param      string `protobuf:"bytes,4,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *RequestInfoBookings) Reset() {
	*x = RequestInfoBookings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestInfoBookings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestInfoBookings) ProtoMessage() {}

func (x *RequestInfoBookings) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestInfoBookings.ProtoReflect.Descriptor instead.
func (*RequestInfoBookings) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{53}
}

func (x *RequestInfoBookings) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *RequestInfoBookings) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *RequestInfoBookings) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RequestInfoBookings) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

type ResponseListInfoBookings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string     `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data  []*Booking `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseListInfoBookings) Reset() {
	*x = ResponseListInfoBookings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseListInfoBookings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseListInfoBookings) ProtoMessage() {}

func (x *ResponseListInfoBookings) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseListInfoBookings.ProtoReflect.Descriptor instead.
func (*ResponseListInfoBookings) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{54}
}

func (x *ResponseListInfoBookings) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseListInfoBookings) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseListInfoBookings) GetData() []*Booking {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetBookingByTourScheduleID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNumbers []string           `protobuf:"bytes,1,rep,name=order_numbers,json=orderNumbers,proto3" json:"order_numbers,omitempty"`
	TourId       string             `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Title        string             `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Schedules    []*PackageSchedule `protobuf:"bytes,4,rep,name=schedules,proto3" json:"schedules,omitempty"`
	QtyAdults    string             `protobuf:"bytes,5,opt,name=qty_adults,json=qtyAdults,proto3" json:"qty_adults,omitempty"`
	QtyKids      string             `protobuf:"bytes,6,opt,name=qty_kids,json=qtyKids,proto3" json:"qty_kids,omitempty"`
	HostId       string             `protobuf:"bytes,7,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	TypeTour     string             `protobuf:"bytes,8,opt,name=type_tour,json=typeTour,proto3" json:"type_tour,omitempty"`
	Location     string             `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
	TotalQuota   string             `protobuf:"bytes,10,opt,name=total_quota,json=totalQuota,proto3" json:"total_quota,omitempty"`
	MinQuota     string             `protobuf:"bytes,11,opt,name=min_quota,json=minQuota,proto3" json:"min_quota,omitempty"`
	MaxQuota     string             `protobuf:"bytes,12,opt,name=max_quota,json=maxQuota,proto3" json:"max_quota,omitempty"`
	QuotaLeft    string             `protobuf:"bytes,13,opt,name=quota_left,json=quotaLeft,proto3" json:"quota_left,omitempty"`
}

func (x *GetBookingByTourScheduleID) Reset() {
	*x = GetBookingByTourScheduleID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBookingByTourScheduleID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookingByTourScheduleID) ProtoMessage() {}

func (x *GetBookingByTourScheduleID) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookingByTourScheduleID.ProtoReflect.Descriptor instead.
func (*GetBookingByTourScheduleID) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{55}
}

func (x *GetBookingByTourScheduleID) GetOrderNumbers() []string {
	if x != nil {
		return x.OrderNumbers
	}
	return nil
}

func (x *GetBookingByTourScheduleID) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *GetBookingByTourScheduleID) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetBookingByTourScheduleID) GetSchedules() []*PackageSchedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *GetBookingByTourScheduleID) GetQtyAdults() string {
	if x != nil {
		return x.QtyAdults
	}
	return ""
}

func (x *GetBookingByTourScheduleID) GetQtyKids() string {
	if x != nil {
		return x.QtyKids
	}
	return ""
}

func (x *GetBookingByTourScheduleID) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *GetBookingByTourScheduleID) GetTypeTour() string {
	if x != nil {
		return x.TypeTour
	}
	return ""
}

func (x *GetBookingByTourScheduleID) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *GetBookingByTourScheduleID) GetTotalQuota() string {
	if x != nil {
		return x.TotalQuota
	}
	return ""
}

func (x *GetBookingByTourScheduleID) GetMinQuota() string {
	if x != nil {
		return x.MinQuota
	}
	return ""
}

func (x *GetBookingByTourScheduleID) GetMaxQuota() string {
	if x != nil {
		return x.MaxQuota
	}
	return ""
}

func (x *GetBookingByTourScheduleID) GetQuotaLeft() string {
	if x != nil {
		return x.QuotaLeft
	}
	return ""
}

type ResponseGetBookingByTourScheduleID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32                       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string                      `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data  *GetBookingByTourScheduleID `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseGetBookingByTourScheduleID) Reset() {
	*x = ResponseGetBookingByTourScheduleID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseGetBookingByTourScheduleID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseGetBookingByTourScheduleID) ProtoMessage() {}

func (x *ResponseGetBookingByTourScheduleID) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseGetBookingByTourScheduleID.ProtoReflect.Descriptor instead.
func (*ResponseGetBookingByTourScheduleID) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{56}
}

func (x *ResponseGetBookingByTourScheduleID) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseGetBookingByTourScheduleID) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseGetBookingByTourScheduleID) GetData() *GetBookingByTourScheduleID {
	if x != nil {
		return x.Data
	}
	return nil
}

type StatusUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         int32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title        string             `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Reopen       bool               `protobuf:"varint,3,opt,name=reopen,proto3" json:"reopen,omitempty"`
	Participants []*Participant     `protobuf:"bytes,4,rep,name=participants,proto3" json:"participants,omitempty"`
	UserId       string             `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	HostId       string             `protobuf:"bytes,6,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	OrderId      string             `protobuf:"bytes,7,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderNumber  string             `protobuf:"bytes,8,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	Schedules    []*PackageSchedule `protobuf:"bytes,9,rep,name=schedules,proto3" json:"schedules,omitempty"`
	TourTitle    string             `protobuf:"bytes,10,opt,name=tour_title,json=tourTitle,proto3" json:"tour_title,omitempty"`
	TourId       string             `protobuf:"bytes,11,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
}

func (x *StatusUpdateResponse) Reset() {
	*x = StatusUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusUpdateResponse) ProtoMessage() {}

func (x *StatusUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusUpdateResponse.ProtoReflect.Descriptor instead.
func (*StatusUpdateResponse) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{57}
}

func (x *StatusUpdateResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *StatusUpdateResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StatusUpdateResponse) GetReopen() bool {
	if x != nil {
		return x.Reopen
	}
	return false
}

func (x *StatusUpdateResponse) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *StatusUpdateResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *StatusUpdateResponse) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *StatusUpdateResponse) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *StatusUpdateResponse) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *StatusUpdateResponse) GetSchedules() []*PackageSchedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *StatusUpdateResponse) GetTourTitle() string {
	if x != nil {
		return x.TourTitle
	}
	return ""
}

func (x *StatusUpdateResponse) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

type RequestBookingScheduleTourStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNumber string `protobuf:"bytes,1,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	TourId      string `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	ScheduleId  string `protobuf:"bytes,3,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	TourStatus  string `protobuf:"bytes,4,opt,name=tour_status,json=tourStatus,proto3" json:"tour_status,omitempty"`
}

func (x *RequestBookingScheduleTourStatus) Reset() {
	*x = RequestBookingScheduleTourStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBookingScheduleTourStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBookingScheduleTourStatus) ProtoMessage() {}

func (x *RequestBookingScheduleTourStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBookingScheduleTourStatus.ProtoReflect.Descriptor instead.
func (*RequestBookingScheduleTourStatus) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{58}
}

func (x *RequestBookingScheduleTourStatus) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *RequestBookingScheduleTourStatus) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *RequestBookingScheduleTourStatus) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *RequestBookingScheduleTourStatus) GetTourStatus() string {
	if x != nil {
		return x.TourStatus
	}
	return ""
}

type ResponseBookingScheduleTourStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Booking `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseBookingScheduleTourStatus) Reset() {
	*x = ResponseBookingScheduleTourStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseBookingScheduleTourStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseBookingScheduleTourStatus) ProtoMessage() {}

func (x *ResponseBookingScheduleTourStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseBookingScheduleTourStatus.ProtoReflect.Descriptor instead.
func (*ResponseBookingScheduleTourStatus) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{59}
}

func (x *ResponseBookingScheduleTourStatus) GetData() *Booking {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListBookingByAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId        string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderNumber    string                 `protobuf:"bytes,2,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	UserInfo       *UserInfo              `protobuf:"bytes,3,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	ContactInfo    *ContactInfo           `protobuf:"bytes,4,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
	Participants   []*Participant         `protobuf:"bytes,5,rep,name=participants,proto3" json:"participants,omitempty"`
	Medias         []*PackageMedia        `protobuf:"bytes,6,rep,name=medias,proto3" json:"medias,omitempty"`
	Title          string                 `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Location       string                 `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	StartDate      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate        *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	HostName       string                 `protobuf:"bytes,11,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	TypeTour       string                 `protobuf:"bytes,12,opt,name=type_tour,json=typeTour,proto3" json:"type_tour,omitempty"`
	Status         string                 `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	TourStatus     string                 `protobuf:"bytes,14,opt,name=tour_status,json=tourStatus,proto3" json:"tour_status,omitempty"`
	QuotaLeft      string                 `protobuf:"bytes,15,opt,name=quota_left,json=quotaLeft,proto3" json:"quota_left,omitempty"`
	Awaiting       string                 `protobuf:"bytes,16,opt,name=awaiting,proto3" json:"awaiting,omitempty"`
	Ongoing        string                 `protobuf:"bytes,17,opt,name=ongoing,proto3" json:"ongoing,omitempty"`
	Reason         string                 `protobuf:"bytes,18,opt,name=reason,proto3" json:"reason,omitempty"`
	EndPaymentDate *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=end_payment_date,json=endPaymentDate,proto3" json:"end_payment_date,omitempty"`
	PaymentDate    *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`
	CancelAt       *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=cancel_at,json=cancelAt,proto3" json:"cancel_at,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	PromoCode      string                 `protobuf:"bytes,23,opt,name=promo_code,json=promoCode,proto3" json:"promo_code,omitempty"`
	Discount       float64                `protobuf:"fixed64,24,opt,name=discount,proto3" json:"discount,omitempty"`
}

func (x *ListBookingByAdmin) Reset() {
	*x = ListBookingByAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBookingByAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBookingByAdmin) ProtoMessage() {}

func (x *ListBookingByAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBookingByAdmin.ProtoReflect.Descriptor instead.
func (*ListBookingByAdmin) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{60}
}

func (x *ListBookingByAdmin) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ListBookingByAdmin) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *ListBookingByAdmin) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *ListBookingByAdmin) GetContactInfo() *ContactInfo {
	if x != nil {
		return x.ContactInfo
	}
	return nil
}

func (x *ListBookingByAdmin) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *ListBookingByAdmin) GetMedias() []*PackageMedia {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *ListBookingByAdmin) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ListBookingByAdmin) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ListBookingByAdmin) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ListBookingByAdmin) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ListBookingByAdmin) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *ListBookingByAdmin) GetTypeTour() string {
	if x != nil {
		return x.TypeTour
	}
	return ""
}

func (x *ListBookingByAdmin) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListBookingByAdmin) GetTourStatus() string {
	if x != nil {
		return x.TourStatus
	}
	return ""
}

func (x *ListBookingByAdmin) GetQuotaLeft() string {
	if x != nil {
		return x.QuotaLeft
	}
	return ""
}

func (x *ListBookingByAdmin) GetAwaiting() string {
	if x != nil {
		return x.Awaiting
	}
	return ""
}

func (x *ListBookingByAdmin) GetOngoing() string {
	if x != nil {
		return x.Ongoing
	}
	return ""
}

func (x *ListBookingByAdmin) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ListBookingByAdmin) GetEndPaymentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndPaymentDate
	}
	return nil
}

func (x *ListBookingByAdmin) GetPaymentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDate
	}
	return nil
}

func (x *ListBookingByAdmin) GetCancelAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CancelAt
	}
	return nil
}

func (x *ListBookingByAdmin) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListBookingByAdmin) GetPromoCode() string {
	if x != nil {
		return x.PromoCode
	}
	return ""
}

func (x *ListBookingByAdmin) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

type RequestAdminParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    string `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage string `protobuf:"bytes,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Param   string `protobuf:"bytes,3,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *RequestAdminParams) Reset() {
	*x = RequestAdminParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestAdminParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAdminParams) ProtoMessage() {}

func (x *RequestAdminParams) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAdminParams.ProtoReflect.Descriptor instead.
func (*RequestAdminParams) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{61}
}

func (x *RequestAdminParams) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *RequestAdminParams) GetPerPage() string {
	if x != nil {
		return x.PerPage
	}
	return ""
}

func (x *RequestAdminParams) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

type ResponseAdminListBooking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title    string                `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data     []*ListBookingByAdmin `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Paginate *Paginate             `protobuf:"bytes,4,opt,name=paginate,proto3" json:"paginate,omitempty"`
}

func (x *ResponseAdminListBooking) Reset() {
	*x = ResponseAdminListBooking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseAdminListBooking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseAdminListBooking) ProtoMessage() {}

func (x *ResponseAdminListBooking) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseAdminListBooking.ProtoReflect.Descriptor instead.
func (*ResponseAdminListBooking) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{62}
}

func (x *ResponseAdminListBooking) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseAdminListBooking) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseAdminListBooking) GetData() []*ListBookingByAdmin {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponseAdminListBooking) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

type AdditionalCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdditionalAdultPrice string `protobuf:"bytes,1,opt,name=additional_adult_price,json=additionalAdultPrice,proto3" json:"additional_adult_price,omitempty"`
	AdditionalKidPrice   string `protobuf:"bytes,2,opt,name=additional_kid_price,json=additionalKidPrice,proto3" json:"additional_kid_price,omitempty"`
	AdditionalAdultQty   string `protobuf:"bytes,3,opt,name=additional_adult_qty,json=additionalAdultQty,proto3" json:"additional_adult_qty,omitempty"`
	AdditionalKidQty     string `protobuf:"bytes,4,opt,name=additional_kid_qty,json=additionalKidQty,proto3" json:"additional_kid_qty,omitempty"`
	TotalAdditionalPrice string `protobuf:"bytes,5,opt,name=total_additional_price,json=totalAdditionalPrice,proto3" json:"total_additional_price,omitempty"`
}

func (x *AdditionalCost) Reset() {
	*x = AdditionalCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalCost) ProtoMessage() {}

func (x *AdditionalCost) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalCost.ProtoReflect.Descriptor instead.
func (*AdditionalCost) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{63}
}

func (x *AdditionalCost) GetAdditionalAdultPrice() string {
	if x != nil {
		return x.AdditionalAdultPrice
	}
	return ""
}

func (x *AdditionalCost) GetAdditionalKidPrice() string {
	if x != nil {
		return x.AdditionalKidPrice
	}
	return ""
}

func (x *AdditionalCost) GetAdditionalAdultQty() string {
	if x != nil {
		return x.AdditionalAdultQty
	}
	return ""
}

func (x *AdditionalCost) GetAdditionalKidQty() string {
	if x != nil {
		return x.AdditionalKidQty
	}
	return ""
}

func (x *AdditionalCost) GetTotalAdditionalPrice() string {
	if x != nil {
		return x.TotalAdditionalPrice
	}
	return ""
}

type RequestCountOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *RequestCountOrders) Reset() {
	*x = RequestCountOrders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCountOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCountOrders) ProtoMessage() {}

func (x *RequestCountOrders) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCountOrders.ProtoReflect.Descriptor instead.
func (*RequestCountOrders) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{64}
}

func (x *RequestCountOrders) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type ResponseCountOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Total int32  `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ResponseCountOrders) Reset() {
	*x = ResponseCountOrders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseCountOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseCountOrders) ProtoMessage() {}

func (x *ResponseCountOrders) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseCountOrders.ProtoReflect.Descriptor instead.
func (*ResponseCountOrders) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{65}
}

func (x *ResponseCountOrders) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseCountOrders) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseCountOrders) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type RequestGetBookingByContactByAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    string `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage string `protobuf:"bytes,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Param   string `protobuf:"bytes,3,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *RequestGetBookingByContactByAdmin) Reset() {
	*x = RequestGetBookingByContactByAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestGetBookingByContactByAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestGetBookingByContactByAdmin) ProtoMessage() {}

func (x *RequestGetBookingByContactByAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestGetBookingByContactByAdmin.ProtoReflect.Descriptor instead.
func (*RequestGetBookingByContactByAdmin) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{66}
}

func (x *RequestGetBookingByContactByAdmin) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *RequestGetBookingByContactByAdmin) GetPerPage() string {
	if x != nil {
		return x.PerPage
	}
	return ""
}

func (x *RequestGetBookingByContactByAdmin) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

type ResponseGetBookingByContactByAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title    string              `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data     []*BookingByContact `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Paginate *Paginate           `protobuf:"bytes,4,opt,name=paginate,proto3" json:"paginate,omitempty"`
}

func (x *ResponseGetBookingByContactByAdmin) Reset() {
	*x = ResponseGetBookingByContactByAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseGetBookingByContactByAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseGetBookingByContactByAdmin) ProtoMessage() {}

func (x *ResponseGetBookingByContactByAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseGetBookingByContactByAdmin.ProtoReflect.Descriptor instead.
func (*ResponseGetBookingByContactByAdmin) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{67}
}

func (x *ResponseGetBookingByContactByAdmin) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseGetBookingByContactByAdmin) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseGetBookingByContactByAdmin) GetData() []*BookingByContact {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponseGetBookingByContactByAdmin) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

type RequestStatusUpdateBookingByContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByContactId string `protobuf:"bytes,1,opt,name=by_contact_id,json=byContactId,proto3" json:"by_contact_id,omitempty"`
	Status      string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Info        string `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *RequestStatusUpdateBookingByContact) Reset() {
	*x = RequestStatusUpdateBookingByContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestStatusUpdateBookingByContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestStatusUpdateBookingByContact) ProtoMessage() {}

func (x *RequestStatusUpdateBookingByContact) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestStatusUpdateBookingByContact.ProtoReflect.Descriptor instead.
func (*RequestStatusUpdateBookingByContact) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{68}
}

func (x *RequestStatusUpdateBookingByContact) GetByContactId() string {
	if x != nil {
		return x.ByContactId
	}
	return ""
}

func (x *RequestStatusUpdateBookingByContact) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RequestStatusUpdateBookingByContact) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type ResponseBookingByContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string            `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data  *BookingByContact `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseBookingByContact) Reset() {
	*x = ResponseBookingByContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseBookingByContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseBookingByContact) ProtoMessage() {}

func (x *ResponseBookingByContact) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseBookingByContact.ProtoReflect.Descriptor instead.
func (*ResponseBookingByContact) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{69}
}

func (x *ResponseBookingByContact) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseBookingByContact) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseBookingByContact) GetData() *BookingByContact {
	if x != nil {
		return x.Data
	}
	return nil
}

type RequestDeleteBookingByContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByContactId string `protobuf:"bytes,1,opt,name=by_contact_id,json=byContactId,proto3" json:"by_contact_id,omitempty"`
	Info        string `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *RequestDeleteBookingByContact) Reset() {
	*x = RequestDeleteBookingByContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_booking_booking_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestDeleteBookingByContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDeleteBookingByContact) ProtoMessage() {}

func (x *RequestDeleteBookingByContact) ProtoReflect() protoreflect.Message {
	mi := &file_pb_booking_booking_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDeleteBookingByContact.ProtoReflect.Descriptor instead.
func (*RequestDeleteBookingByContact) Descriptor() ([]byte, []int) {
	return file_pb_booking_booking_proto_rawDescGZIP(), []int{70}
}

func (x *RequestDeleteBookingByContact) GetByContactId() string {
	if x != nil {
		return x.ByContactId
	}
	return ""
}

func (x *RequestDeleteBookingByContact) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

var File_pb_booking_booking_proto protoreflect.FileDescriptor

var file_pb_booking_booking_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x62, 0x2f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8a, 0x0a, 0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x36, 0x0a,
	0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x06, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x74, 0x79, 0x41, 0x64,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x74, 0x79, 0x5f, 0x6b, 0x69, 0x64, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x74, 0x79, 0x4b, 0x69, 0x64, 0x73, 0x12,
	0x37, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x73, 0x75, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x61, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x75,
	0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x61, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xc9, 0x07, 0x0a, 0x11, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x06, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x74, 0x79, 0x41, 0x64,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x74, 0x79, 0x5f, 0x6b, 0x69, 0x64, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x74, 0x79, 0x4b, 0x69, 0x64, 0x73, 0x12,
	0x40, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73,
	0x74, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x61, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6d,
	0x69, 0x6e, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x69, 0x6e,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcb, 0x0a, 0x0a, 0x12,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2d, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x2d,
	0x0a, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a,
	0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0f,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x0e,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x71, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x71, 0x74, 0x79, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x71, 0x74, 0x79, 0x5f, 0x6b, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x71, 0x74, 0x79, 0x4b, 0x69, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x73,
	0x75, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x75, 0x62,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74,
	0x6f, 0x75, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x54,
	0x6f, 0x75, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x75, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61,
	0x64, 0x67, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x72, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x67, 0x65, 0x22, 0xd1, 0x07,
	0x0a, 0x0b, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x06,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65,
	0x72, 0x6d, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x12, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x67, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x73, 0x74, 0x46,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x74, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x72, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x74, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x40, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x60, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f,
	0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75,
	0x72, 0x49, 0x64, 0x22, 0x94, 0x04, 0x0a, 0x10, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68,
	0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd3, 0x06, 0x0a, 0x0b, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52,
	0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x74, 0x6f, 0x75, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6e, 0x67,
	0x6f, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6e, 0x67, 0x6f,
	0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x69, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x16, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x6f, 0x75,
	0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22,
	0xfc, 0x05, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x77, 0x61, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x77, 0x61, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x73, 0x6b, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x61, 0x73, 0x6b, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc5,
	0x03, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x69, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0e,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xa2, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x13,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x22,
	0xac, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x84,
	0x01, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x18, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x13,
	0x74, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x12, 0x74, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x61, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa9, 0x03, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f,
	0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x68, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x0c,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0xaa, 0x02, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f,
	0x75, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6b, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6b, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x69, 0x6e,
	0x5f, 0x6b, 0x69, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x69, 0x6e, 0x4b, 0x69, 0x64, 0x41, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x78,
	0x5f, 0x6b, 0x69, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x61, 0x78, 0x4b, 0x69, 0x64, 0x41, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x82, 0x01, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0xdf, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x6e, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x22, 0xa3, 0x03, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x51, 0x74, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x74, 0x79, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x71, 0x74, 0x79, 0x5f, 0x6b, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x71, 0x74, 0x79, 0x4b, 0x69, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x75,
	0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x75, 0x62, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f,
	0x75, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6b, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6b, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x69, 0x6e,
	0x5f, 0x6b, 0x69, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x69, 0x6e, 0x4b, 0x69, 0x64, 0x41, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x78,
	0x5f, 0x6b, 0x69, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x61, 0x78, 0x4b, 0x69, 0x64, 0x41, 0x67, 0x65, 0x22, 0x76, 0x0a, 0x16, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x51, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x51, 0x74,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x22, 0x4e, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x75, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x6f,
	0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x77, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x6e, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x6b, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x6b,
	0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xf0, 0x02, 0x0a, 0x1f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f,
	0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75,
	0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x69,
	0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6b,
	0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6b, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f,
	0x6b, 0x69, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x69, 0x6e, 0x4b, 0x69, 0x64, 0x41, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x6b, 0x69, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x4b, 0x69, 0x64, 0x41, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x75, 0x6c,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6b, 0x69, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0xe5,
	0x04, 0x0a, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6b, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6b, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0b,
	0x6d, 0x69, 0x6e, 0x5f, 0x6b, 0x69, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4b, 0x69, 0x64, 0x41, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0b,
	0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x69, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4b, 0x69, 0x64, 0x41, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x69, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6b, 0x69, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4b, 0x69, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8f, 0x0a, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52,
	0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x2d,
	0x0a, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x40, 0x0a,
	0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x52,
	0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x71, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x74, 0x79, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x71, 0x74, 0x79, 0x5f, 0x6b, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x71, 0x74, 0x79, 0x4b, 0x69, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16,
	0x73, 0x75, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x75,
	0x62, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74,
	0x6f, 0x75, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x54,
	0x6f, 0x75, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x75, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x69, 0x6e, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x69, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x6c,
	0x65, 0x66, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x4c, 0x65, 0x66, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x61,
	0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6f, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x42, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x99, 0x04, 0x0a, 0x0a, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x74, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x74, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x06,
	0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x75, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x33, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x42,
	0x79, 0x48, 0x6f, 0x73, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x25, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x27, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x7b, 0x0a, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x74, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x77, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x8c, 0x03, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x75, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x77, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x77, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x22,
	0xa4, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x22, 0x79, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x85, 0x04, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x75, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6e, 0x67,
	0x6f, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6e, 0x67, 0x6f,
	0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x1b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22,
	0xa0, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x22, 0x7d, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f,
	0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x22, 0x6a, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xae, 0x03,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x54, 0x6f,
	0x75, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x36, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x74, 0x79, 0x5f,
	0x61, 0x64, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x74,
	0x79, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x74, 0x79, 0x5f, 0x6b,
	0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x74, 0x79, 0x4b, 0x69,
	0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12,
	0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x65, 0x66, 0x74, 0x22, 0x87,
	0x01, 0x0a, 0x22, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x74, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x42, 0x79, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x44, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf2, 0x02, 0x0a, 0x14, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x6f,
	0x70, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x22, 0xa0, 0x01,
	0x0a, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x49, 0x0a, 0x21, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdc, 0x07, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x37, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x6f, 0x75, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x75, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x77, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x77, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x6e,
	0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x59, 0x0a, 0x12, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xa4, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x22, 0x8e, 0x02, 0x0a,
	0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64,
	0x75, 0x6c, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x75, 0x6c, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4b,
	0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x71, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x51, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x64, 0x5f, 0x71, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4b, 0x69, 0x64, 0x51, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x26, 0x0a,
	0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x68, 0x0a, 0x21,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xac, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x22, 0x75, 0x0a, 0x23, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0d,
	0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x73, 0x0a, 0x18,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x57, 0x0a, 0x1d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x32, 0xf0, 0x20, 0x0a, 0x0a, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x50, 0x43, 0x12, 0x51, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c, 0x2e, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x21, 0x2e, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x10,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x12, 0x1a, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x1a, 0x21, 0x2e, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12,
	0x46, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0x1d, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x73, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x12, 0x10, 0x2e, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0x18, 0x2e,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0x18, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x1a, 0x1c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x1a, 0x1c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x78, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x29, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x2a,
	0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x54, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x79, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x13, 0x2e,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x1a, 0x1b, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x22,
	0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x62, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x10, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0x1c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x7e, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0x18, 0x2e, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x22, 0x36,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x7d, 0x2f,
	0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x6f,
	0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a, 0x14, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x1a, 0x23, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f, 0x7b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x10, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0x22, 0x2e, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f,
	0x7b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f,
	0x7b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x78, 0x0a, 0x0e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x22, 0x25, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x3a, 0x01, 0x2a, 0x12, 0xa3, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1f,
	0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x12, 0x3e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2f, 0x68, 0x6f, 0x73,
	0x74, 0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x7f, 0x0a, 0x12, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12,
	0x10, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x1a, 0x21, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2f,
	0x7b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x60, 0x0a, 0x0b, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0x1c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x22,
	0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x90, 0x01, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x16, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x21, 0x2e, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x22, 0x41, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x7b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0xa6, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48,
	0x22, 0x43, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2d, 0x62, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x6f,
	0x75, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x6f, 0x75,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x90, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x51, 0x74,
	0x79, 0x12, 0x1e, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x51, 0x74,
	0x79, 0x1a, 0x1f, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x51,
	0x74, 0x79, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x32, 0x2c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x7d, 0x2f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x71, 0x74, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x9d, 0x01, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x18, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x27, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x12, 0x3e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x7d, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x1a, 0x1d, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x7d, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0xb9, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x1a, 0x29, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0x46, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x40, 0x22, 0x3b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x73, 0x2d, 0x62, 0x79, 0x2d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x3a, 0x01, 0x2a, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x1a, 0x1d, 0x2e,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x43, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x7d, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x12, 0x7a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x17, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x1a,
	0x1f, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x88, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x20, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12,
	0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xa4, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x54, 0x6f, 0x75, 0x72, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x1a, 0x2b, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44,
	0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x73, 0x2f, 0x7b,
	0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0x77, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42,
	0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1b, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x1a, 0x21, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0xa4, 0x01, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x2a, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x79, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x1a, 0x2b, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x2d, 0x62, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0xb3, 0x01, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x2c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x35, 0x32, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2d, 0x62, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x2f, 0x7b, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xa4, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x26, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x1a, 0x21, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x2a, 0x30, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x2d, 0x62, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2f, 0x7b, 0x62,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_booking_booking_proto_rawDescOnce sync.Once
	file_pb_booking_booking_proto_rawDescData = file_pb_booking_booking_proto_rawDesc
)

func file_pb_booking_booking_proto_rawDescGZIP() []byte {
	file_pb_booking_booking_proto_rawDescOnce.Do(func() {
		file_pb_booking_booking_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_booking_booking_proto_rawDescData)
	})
	return file_pb_booking_booking_proto_rawDescData
}

var file_pb_booking_booking_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_pb_booking_booking_proto_goTypes = []interface{}{
	(*Booking)(nil),                             // 0: booking.Booking
	(*DetailBookingHost)(nil),                   // 1: booking.DetailBookingHost
	(*DetailBookingGuest)(nil),                  // 2: booking.DetailBookingGuest
	(*UserInfo)(nil),                            // 3: booking.UserInfo
	(*TourPackage)(nil),                         // 4: booking.TourPackage
	(*CustomPolicy)(nil),                        // 5: booking.CustomPolicy
	(*BookingByContact)(nil),                    // 6: booking.BookingByContact
	(*ListBooking)(nil),                         // 7: booking.ListBooking
	(*RequestCancelTourHost)(nil),               // 8: booking.RequestCancelTourHost
	(*ResponseCancelTourHost)(nil),              // 9: booking.ResponseCancelTourHost
	(*ListIncomingBooking)(nil),                 // 10: booking.ListIncomingBooking
	(*ListScheduleHost)(nil),                    // 11: booking.ListScheduleHost
	(*ResponseListScheduleHost)(nil),            // 12: booking.ResponseListScheduleHost
	(*ResponseListBooking)(nil),                 // 13: booking.ResponseListBooking
	(*ResponseIncomingBookingList)(nil),         // 14: booking.ResponseIncomingBookingList
	(*RequestParams)(nil),                       // 15: booking.RequestParams
	(*RequestParamsIncomingList)(nil),           // 16: booking.RequestParamsIncomingList
	(*Paginate)(nil),                            // 17: booking.Paginate
	(*BookingByContactResponse)(nil),            // 18: booking.BookingByContactResponse
	(*BookingResponse)(nil),                     // 19: booking.BookingResponse
	(*PackageSchedule)(nil),                     // 20: booking.PackageSchedule
	(*PackageMedia)(nil),                        // 21: booking.PackageMedia
	(*PackageAddon)(nil),                        // 22: booking.PackageAddon
	(*PackagePrice)(nil),                        // 23: booking.PackagePrice
	(*ContactInfo)(nil),                         // 24: booking.ContactInfo
	(*Participant)(nil),                         // 25: booking.Participant
	(*ParticipantList)(nil),                     // 26: booking.ParticipantList
	(*RequestParticipantQty)(nil),               // 27: booking.RequestParticipantQty
	(*ResponseParticipantQty)(nil),              // 28: booking.ResponseParticipantQty
	(*ResponseGetPackageScheduleList)(nil),      // 29: booking.ResponseGetPackageScheduleList
	(*ResponseDetailHostBooking)(nil),           // 30: booking.ResponseDetailHostBooking
	(*ResponseDetailGuestBooking)(nil),          // 31: booking.ResponseDetailGuestBooking
	(*ResponseParticipantsList)(nil),            // 32: booking.ResponseParticipantsList
	(*ResponseGetAddonlist)(nil),                // 33: booking.ResponseGetAddonlist
	(*ResponseGetPricelist)(nil),                // 34: booking.ResponseGetPricelist
	(*RequestDetailPriceByParticipant)(nil),     // 35: booking.RequestDetailPriceByParticipant
	(*ResponseDetailPriceByParticipant)(nil),    // 36: booking.ResponseDetailPriceByParticipant
	(*ReceiptBooking)(nil),                      // 37: booking.ReceiptBooking
	(*ResponseReceiptBooking)(nil),              // 38: booking.ResponseReceiptBooking
	(*ActiveTour)(nil),                          // 39: booking.ActiveTour
	(*BroadcastMessage)(nil),                    // 40: booking.BroadcastMessage
	(*ResponseActiveTour)(nil),                  // 41: booking.ResponseActiveTour
	(*TotalParticipants)(nil),                   // 42: booking.TotalParticipants
	(*ResponseTotalParticipant)(nil),            // 43: booking.ResponseTotalParticipant
	(*RequestParamsActiveList)(nil),             // 44: booking.RequestParamsActiveList
	(*ListActiveBooking)(nil),                   // 45: booking.ListActiveBooking
	(*ResponseActiveBookingList)(nil),           // 46: booking.ResponseActiveBookingList
	(*RequestParamsActivityList)(nil),           // 47: booking.RequestParamsActivityList
	(*ListActivityBooking)(nil),                 // 48: booking.ListActivityBooking
	(*ResponseBookingActivityList)(nil),         // 49: booking.ResponseBookingActivityList
	(*ParticipantHostRequest)(nil),              // 50: booking.ParticipantHostRequest
	(*ParticipantHost)(nil),                     // 51: booking.ParticipantHost
	(*ResponseParticipantHost)(nil),             // 52: booking.ResponseParticipantHost
	(*RequestInfoBookings)(nil),                 // 53: booking.RequestInfoBookings
	(*ResponseListInfoBookings)(nil),            // 54: booking.ResponseListInfoBookings
	(*GetBookingByTourScheduleID)(nil),          // 55: booking.GetBookingByTourScheduleID
	(*ResponseGetBookingByTourScheduleID)(nil),  // 56: booking.ResponseGetBookingByTourScheduleID
	(*StatusUpdateResponse)(nil),                // 57: booking.StatusUpdateResponse
	(*RequestBookingScheduleTourStatus)(nil),    // 58: booking.RequestBookingScheduleTourStatus
	(*ResponseBookingScheduleTourStatus)(nil),   // 59: booking.ResponseBookingScheduleTourStatus
	(*ListBookingByAdmin)(nil),                  // 60: booking.ListBookingByAdmin
	(*RequestAdminParams)(nil),                  // 61: booking.RequestAdminParams
	(*ResponseAdminListBooking)(nil),            // 62: booking.ResponseAdminListBooking
	(*AdditionalCost)(nil),                      // 63: booking.AdditionalCost
	(*RequestCountOrders)(nil),                  // 64: booking.RequestCountOrders
	(*ResponseCountOrders)(nil),                 // 65: booking.ResponseCountOrders
	(*RequestGetBookingByContactByAdmin)(nil),   // 66: booking.RequestGetBookingByContactByAdmin
	(*ResponseGetBookingByContactByAdmin)(nil),  // 67: booking.ResponseGetBookingByContactByAdmin
	(*RequestStatusUpdateBookingByContact)(nil), // 68: booking.RequestStatusUpdateBookingByContact
	(*ResponseBookingByContact)(nil),            // 69: booking.ResponseBookingByContact
	(*RequestDeleteBookingByContact)(nil),       // 70: booking.RequestDeleteBookingByContact
	(*timestamppb.Timestamp)(nil),               // 71: google.protobuf.Timestamp
	(*wrapperspb.Int32Value)(nil),               // 72: google.protobuf.Int32Value
	(*wrapperspb.BoolValue)(nil),                // 73: google.protobuf.BoolValue
}
var file_pb_booking_booking_proto_depIdxs = []int32{
	20,  // 0: booking.Booking.schedules:type_name -> booking.PackageSchedule
	22,  // 1: booking.Booking.addons:type_name -> booking.PackageAddon
	23,  // 2: booking.Booking.prices:type_name -> booking.PackagePrice
	63,  // 3: booking.Booking.additional_cost:type_name -> booking.AdditionalCost
	24,  // 4: booking.Booking.contact_info:type_name -> booking.ContactInfo
	25,  // 5: booking.Booking.participants:type_name -> booking.Participant
	71,  // 6: booking.Booking.created_at:type_name -> google.protobuf.Timestamp
	71,  // 7: booking.Booking.end_date:type_name -> google.protobuf.Timestamp
	71,  // 8: booking.Booking.payment_date:type_name -> google.protobuf.Timestamp
	71,  // 9: booking.Booking.cancel_at:type_name -> google.protobuf.Timestamp
	71,  // 10: booking.DetailBookingHost.end_date:type_name -> google.protobuf.Timestamp
	71,  // 11: booking.DetailBookingHost.start_date:type_name -> google.protobuf.Timestamp
	21,  // 12: booking.DetailBookingHost.medias:type_name -> booking.PackageMedia
	3,   // 13: booking.DetailBookingHost.user_info:type_name -> booking.UserInfo
	63,  // 14: booking.DetailBookingHost.additional_cost:type_name -> booking.AdditionalCost
	72,  // 15: booking.DetailBookingHost.min_quota:type_name -> google.protobuf.Int32Value
	71,  // 16: booking.DetailBookingHost.remaining_time:type_name -> google.protobuf.Timestamp
	71,  // 17: booking.DetailBookingHost.payment_date:type_name -> google.protobuf.Timestamp
	73,  // 18: booking.DetailBookingHost.show_link:type_name -> google.protobuf.BoolValue
	71,  // 19: booking.DetailBookingGuest.end_date:type_name -> google.protobuf.Timestamp
	71,  // 20: booking.DetailBookingGuest.start_date:type_name -> google.protobuf.Timestamp
	21,  // 21: booking.DetailBookingGuest.medias:type_name -> booking.PackageMedia
	22,  // 22: booking.DetailBookingGuest.addons:type_name -> booking.PackageAddon
	23,  // 23: booking.DetailBookingGuest.prices:type_name -> booking.PackagePrice
	63,  // 24: booking.DetailBookingGuest.additional_cost:type_name -> booking.AdditionalCost
	24,  // 25: booking.DetailBookingGuest.contact_info:type_name -> booking.ContactInfo
	25,  // 26: booking.DetailBookingGuest.participants:type_name -> booking.Participant
	71,  // 27: booking.DetailBookingGuest.created_at:type_name -> google.protobuf.Timestamp
	71,  // 28: booking.DetailBookingGuest.payment_date:type_name -> google.protobuf.Timestamp
	71,  // 29: booking.DetailBookingGuest.cancel_at:type_name -> google.protobuf.Timestamp
	21,  // 30: booking.TourPackage.medias:type_name -> booking.PackageMedia
	20,  // 31: booking.TourPackage.schedules:type_name -> booking.PackageSchedule
	22,  // 32: booking.TourPackage.addons:type_name -> booking.PackageAddon
	23,  // 33: booking.TourPackage.prices:type_name -> booking.PackagePrice
	5,   // 34: booking.TourPackage.custom_policies:type_name -> booking.CustomPolicy
	63,  // 35: booking.TourPackage.additional_cost:type_name -> booking.AdditionalCost
	71,  // 36: booking.TourPackage.created_at:type_name -> google.protobuf.Timestamp
	71,  // 37: booking.BookingByContact.created_at:type_name -> google.protobuf.Timestamp
	71,  // 38: booking.BookingByContact.updated_at:type_name -> google.protobuf.Timestamp
	71,  // 39: booking.BookingByContact.deleted_at:type_name -> google.protobuf.Timestamp
	21,  // 40: booking.ListBooking.medias:type_name -> booking.PackageMedia
	71,  // 41: booking.ListBooking.start_date:type_name -> google.protobuf.Timestamp
	71,  // 42: booking.ListBooking.end_date:type_name -> google.protobuf.Timestamp
	71,  // 43: booking.ListBooking.end_payment_date:type_name -> google.protobuf.Timestamp
	71,  // 44: booking.ListBooking.payment_date:type_name -> google.protobuf.Timestamp
	71,  // 45: booking.ListBooking.cancel_at:type_name -> google.protobuf.Timestamp
	71,  // 46: booking.ListBooking.created_at:type_name -> google.protobuf.Timestamp
	21,  // 47: booking.ListIncomingBooking.medias:type_name -> booking.PackageMedia
	71,  // 48: booking.ListIncomingBooking.start_date:type_name -> google.protobuf.Timestamp
	71,  // 49: booking.ListIncomingBooking.end_date:type_name -> google.protobuf.Timestamp
	71,  // 50: booking.ListIncomingBooking.created_at:type_name -> google.protobuf.Timestamp
	71,  // 51: booking.ListScheduleHost.created_at:type_name -> google.protobuf.Timestamp
	71,  // 52: booking.ListScheduleHost.remaining_time:type_name -> google.protobuf.Timestamp
	71,  // 53: booking.ListScheduleHost.payment_date:type_name -> google.protobuf.Timestamp
	11,  // 54: booking.ResponseListScheduleHost.data:type_name -> booking.ListScheduleHost
	17,  // 55: booking.ResponseListScheduleHost.paginate:type_name -> booking.Paginate
	7,   // 56: booking.ResponseListBooking.data:type_name -> booking.ListBooking
	17,  // 57: booking.ResponseListBooking.paginate:type_name -> booking.Paginate
	10,  // 58: booking.ResponseIncomingBookingList.data:type_name -> booking.ListIncomingBooking
	17,  // 59: booking.ResponseIncomingBookingList.paginate:type_name -> booking.Paginate
	4,   // 60: booking.BookingByContactResponse.tour_recommendation:type_name -> booking.TourPackage
	6,   // 61: booking.BookingByContactResponse.data:type_name -> booking.BookingByContact
	0,   // 62: booking.BookingResponse.data:type_name -> booking.Booking
	71,  // 63: booking.PackageSchedule.start_date:type_name -> google.protobuf.Timestamp
	71,  // 64: booking.PackageSchedule.end_date:type_name -> google.protobuf.Timestamp
	25,  // 65: booking.ParticipantList.participants:type_name -> booking.Participant
	27,  // 66: booking.ResponseParticipantQty.data:type_name -> booking.RequestParticipantQty
	20,  // 67: booking.ResponseGetPackageScheduleList.data:type_name -> booking.PackageSchedule
	1,   // 68: booking.ResponseDetailHostBooking.data:type_name -> booking.DetailBookingHost
	2,   // 69: booking.ResponseDetailGuestBooking.data:type_name -> booking.DetailBookingGuest
	25,  // 70: booking.ResponseParticipantsList.data:type_name -> booking.Participant
	22,  // 71: booking.ResponseGetAddonlist.data:type_name -> booking.PackageAddon
	23,  // 72: booking.ResponseGetPricelist.data:type_name -> booking.PackagePrice
	21,  // 73: booking.ReceiptBooking.medias:type_name -> booking.PackageMedia
	20,  // 74: booking.ReceiptBooking.schedules:type_name -> booking.PackageSchedule
	22,  // 75: booking.ReceiptBooking.addons:type_name -> booking.PackageAddon
	23,  // 76: booking.ReceiptBooking.prices:type_name -> booking.PackagePrice
	63,  // 77: booking.ReceiptBooking.additional_cost:type_name -> booking.AdditionalCost
	24,  // 78: booking.ReceiptBooking.contact_info:type_name -> booking.ContactInfo
	25,  // 79: booking.ReceiptBooking.participants:type_name -> booking.Participant
	71,  // 80: booking.ReceiptBooking.created_at:type_name -> google.protobuf.Timestamp
	71,  // 81: booking.ReceiptBooking.end_date:type_name -> google.protobuf.Timestamp
	71,  // 82: booking.ReceiptBooking.cancel_at:type_name -> google.protobuf.Timestamp
	37,  // 83: booking.ResponseReceiptBooking.data:type_name -> booking.ReceiptBooking
	21,  // 84: booking.ActiveTour.medias:type_name -> booking.PackageMedia
	20,  // 85: booking.ActiveTour.schedules:type_name -> booking.PackageSchedule
	22,  // 86: booking.ActiveTour.addons:type_name -> booking.PackageAddon
	3,   // 87: booking.ActiveTour.host:type_name -> booking.UserInfo
	40,  // 88: booking.ActiveTour.message:type_name -> booking.BroadcastMessage
	71,  // 89: booking.ActiveTour.ended_by_host:type_name -> google.protobuf.Timestamp
	71,  // 90: booking.BroadcastMessage.created_at:type_name -> google.protobuf.Timestamp
	3,   // 91: booking.BroadcastMessage.host:type_name -> booking.UserInfo
	73,  // 92: booking.ResponseActiveTour.review:type_name -> google.protobuf.BoolValue
	39,  // 93: booking.ResponseActiveTour.data:type_name -> booking.ActiveTour
	42,  // 94: booking.ResponseTotalParticipant.data:type_name -> booking.TotalParticipants
	21,  // 95: booking.ListActiveBooking.medias:type_name -> booking.PackageMedia
	71,  // 96: booking.ListActiveBooking.start_date:type_name -> google.protobuf.Timestamp
	71,  // 97: booking.ListActiveBooking.end_date:type_name -> google.protobuf.Timestamp
	45,  // 98: booking.ResponseActiveBookingList.data:type_name -> booking.ListActiveBooking
	17,  // 99: booking.ResponseActiveBookingList.paginate:type_name -> booking.Paginate
	21,  // 100: booking.ListActivityBooking.medias:type_name -> booking.PackageMedia
	71,  // 101: booking.ListActivityBooking.start_date:type_name -> google.protobuf.Timestamp
	71,  // 102: booking.ListActivityBooking.end_date:type_name -> google.protobuf.Timestamp
	71,  // 103: booking.ListActivityBooking.cancel_at:type_name -> google.protobuf.Timestamp
	48,  // 104: booking.ResponseBookingActivityList.data:type_name -> booking.ListActivityBooking
	17,  // 105: booking.ResponseBookingActivityList.paginate:type_name -> booking.Paginate
	3,   // 106: booking.ParticipantHost.user_info:type_name -> booking.UserInfo
	25,  // 107: booking.ParticipantHost.participant:type_name -> booking.Participant
	51,  // 108: booking.ResponseParticipantHost.data:type_name -> booking.ParticipantHost
	17,  // 109: booking.ResponseParticipantHost.paginate:type_name -> booking.Paginate
	0,   // 110: booking.ResponseListInfoBookings.data:type_name -> booking.Booking
	20,  // 111: booking.GetBookingByTourScheduleID.schedules:type_name -> booking.PackageSchedule
	55,  // 112: booking.ResponseGetBookingByTourScheduleID.data:type_name -> booking.GetBookingByTourScheduleID
	25,  // 113: booking.StatusUpdateResponse.participants:type_name -> booking.Participant
	20,  // 114: booking.StatusUpdateResponse.schedules:type_name -> booking.PackageSchedule
	0,   // 115: booking.ResponseBookingScheduleTourStatus.data:type_name -> booking.Booking
	3,   // 116: booking.ListBookingByAdmin.user_info:type_name -> booking.UserInfo
	24,  // 117: booking.ListBookingByAdmin.contact_info:type_name -> booking.ContactInfo
	25,  // 118: booking.ListBookingByAdmin.participants:type_name -> booking.Participant
	21,  // 119: booking.ListBookingByAdmin.medias:type_name -> booking.PackageMedia
	71,  // 120: booking.ListBookingByAdmin.start_date:type_name -> google.protobuf.Timestamp
	71,  // 121: booking.ListBookingByAdmin.end_date:type_name -> google.protobuf.Timestamp
	71,  // 122: booking.ListBookingByAdmin.end_payment_date:type_name -> google.protobuf.Timestamp
	71,  // 123: booking.ListBookingByAdmin.payment_date:type_name -> google.protobuf.Timestamp
	71,  // 124: booking.ListBookingByAdmin.cancel_at:type_name -> google.protobuf.Timestamp
	71,  // 125: booking.ListBookingByAdmin.created_at:type_name -> google.protobuf.Timestamp
	60,  // 126: booking.ResponseAdminListBooking.data:type_name -> booking.ListBookingByAdmin
	17,  // 127: booking.ResponseAdminListBooking.paginate:type_name -> booking.Paginate
	6,   // 128: booking.ResponseGetBookingByContactByAdmin.data:type_name -> booking.BookingByContact
	17,  // 129: booking.ResponseGetBookingByContactByAdmin.paginate:type_name -> booking.Paginate
	6,   // 130: booking.ResponseBookingByContact.data:type_name -> booking.BookingByContact
	53,  // 131: booking.BookingRPC.GetListBokings:input_type -> booking.RequestInfoBookings
	42,  // 132: booking.BookingRPC.TotalParticipant:input_type -> booking.TotalParticipants
	0,   // 133: booking.BookingRPC.UpdateStatusBooking:input_type -> booking.Booking
	0,   // 134: booking.BookingRPC.UpdateIsReviewed:input_type -> booking.Booking
	0,   // 135: booking.BookingRPC.DetailBooking:input_type -> booking.Booking
	64,  // 136: booking.BookingRPC.CountOrdersUser:input_type -> booking.RequestCountOrders
	64,  // 137: booking.BookingRPC.CountOrdersHost:input_type -> booking.RequestCountOrders
	58,  // 138: booking.BookingRPC.UpdateBookingScheduleTourStatus:input_type -> booking.RequestBookingScheduleTourStatus
	39,  // 139: booking.BookingRPC.GetActivityTour:input_type -> booking.ActiveTour
	0,   // 140: booking.BookingRPC.TotalOrders:input_type -> booking.Booking
	0,   // 141: booking.BookingRPC.CreateBooking:input_type -> booking.Booking
	0,   // 142: booking.BookingRPC.DetailBookingByGuest:input_type -> booking.Booking
	0,   // 143: booking.BookingRPC.DetailBookingByHost:input_type -> booking.Booking
	8,   // 144: booking.BookingRPC.CancelTourHost:input_type -> booking.RequestCancelTourHost
	50,  // 145: booking.BookingRPC.DetailParticipantsHost:input_type -> booking.ParticipantHostRequest
	0,   // 146: booking.BookingRPC.DetailParticipants:input_type -> booking.Booking
	15,  // 147: booking.BookingRPC.ListBooking:input_type -> booking.RequestParams
	15,  // 148: booking.BookingRPC.ListScheduleHost:input_type -> booking.RequestParams
	6,   // 149: booking.BookingRPC.CreateBookingByContact:input_type -> booking.BookingByContact
	27,  // 150: booking.BookingRPC.UpdateParticipantQty:input_type -> booking.RequestParticipantQty
	20,  // 151: booking.BookingRPC.GetSchedulesList:input_type -> booking.PackageSchedule
	23,  // 152: booking.BookingRPC.GetPriceslist:input_type -> booking.PackagePrice
	35,  // 153: booking.BookingRPC.GetPriceByTotalParticipant:input_type -> booking.RequestDetailPriceByParticipant
	22,  // 154: booking.BookingRPC.GetAddonsList:input_type -> booking.PackageAddon
	37,  // 155: booking.BookingRPC.GetBookingReceipt:input_type -> booking.ReceiptBooking
	16,  // 156: booking.BookingRPC.GetIncomingBookingList:input_type -> booking.RequestParamsIncomingList
	44,  // 157: booking.BookingRPC.GetActiveBookingList:input_type -> booking.RequestParamsActiveList
	47,  // 158: booking.BookingRPC.GetBookingActivitiyList:input_type -> booking.RequestParamsActivityList
	20,  // 159: booking.BookingRPC.GetBookingBySchedulesTourID:input_type -> booking.PackageSchedule
	61,  // 160: booking.BookingRPC.ListBookingByAdmin:input_type -> booking.RequestAdminParams
	66,  // 161: booking.BookingRPC.GetBookingByContactByAdmin:input_type -> booking.RequestGetBookingByContactByAdmin
	68,  // 162: booking.BookingRPC.UpdateStatusBookingByContactByAdmin:input_type -> booking.RequestStatusUpdateBookingByContact
	70,  // 163: booking.BookingRPC.DeleteBookingByContactByAdmin:input_type -> booking.RequestDeleteBookingByContact
	54,  // 164: booking.BookingRPC.GetListBokings:output_type -> booking.ResponseListInfoBookings
	43,  // 165: booking.BookingRPC.TotalParticipant:output_type -> booking.ResponseTotalParticipant
	57,  // 166: booking.BookingRPC.UpdateStatusBooking:output_type -> booking.StatusUpdateResponse
	19,  // 167: booking.BookingRPC.UpdateIsReviewed:output_type -> booking.BookingResponse
	19,  // 168: booking.BookingRPC.DetailBooking:output_type -> booking.BookingResponse
	65,  // 169: booking.BookingRPC.CountOrdersUser:output_type -> booking.ResponseCountOrders
	65,  // 170: booking.BookingRPC.CountOrdersHost:output_type -> booking.ResponseCountOrders
	59,  // 171: booking.BookingRPC.UpdateBookingScheduleTourStatus:output_type -> booking.ResponseBookingScheduleTourStatus
	41,  // 172: booking.BookingRPC.GetActivityTour:output_type -> booking.ResponseActiveTour
	65,  // 173: booking.BookingRPC.TotalOrders:output_type -> booking.ResponseCountOrders
	19,  // 174: booking.BookingRPC.CreateBooking:output_type -> booking.BookingResponse
	31,  // 175: booking.BookingRPC.DetailBookingByGuest:output_type -> booking.ResponseDetailGuestBooking
	30,  // 176: booking.BookingRPC.DetailBookingByHost:output_type -> booking.ResponseDetailHostBooking
	9,   // 177: booking.BookingRPC.CancelTourHost:output_type -> booking.ResponseCancelTourHost
	52,  // 178: booking.BookingRPC.DetailParticipantsHost:output_type -> booking.ResponseParticipantHost
	32,  // 179: booking.BookingRPC.DetailParticipants:output_type -> booking.ResponseParticipantsList
	13,  // 180: booking.BookingRPC.ListBooking:output_type -> booking.ResponseListBooking
	12,  // 181: booking.BookingRPC.ListScheduleHost:output_type -> booking.ResponseListScheduleHost
	18,  // 182: booking.BookingRPC.CreateBookingByContact:output_type -> booking.BookingByContactResponse
	28,  // 183: booking.BookingRPC.UpdateParticipantQty:output_type -> booking.ResponseParticipantQty
	29,  // 184: booking.BookingRPC.GetSchedulesList:output_type -> booking.ResponseGetPackageScheduleList
	34,  // 185: booking.BookingRPC.GetPriceslist:output_type -> booking.ResponseGetPricelist
	36,  // 186: booking.BookingRPC.GetPriceByTotalParticipant:output_type -> booking.ResponseDetailPriceByParticipant
	33,  // 187: booking.BookingRPC.GetAddonsList:output_type -> booking.ResponseGetAddonlist
	38,  // 188: booking.BookingRPC.GetBookingReceipt:output_type -> booking.ResponseReceiptBooking
	14,  // 189: booking.BookingRPC.GetIncomingBookingList:output_type -> booking.ResponseIncomingBookingList
	46,  // 190: booking.BookingRPC.GetActiveBookingList:output_type -> booking.ResponseActiveBookingList
	49,  // 191: booking.BookingRPC.GetBookingActivitiyList:output_type -> booking.ResponseBookingActivityList
	56,  // 192: booking.BookingRPC.GetBookingBySchedulesTourID:output_type -> booking.ResponseGetBookingByTourScheduleID
	62,  // 193: booking.BookingRPC.ListBookingByAdmin:output_type -> booking.ResponseAdminListBooking
	67,  // 194: booking.BookingRPC.GetBookingByContactByAdmin:output_type -> booking.ResponseGetBookingByContactByAdmin
	69,  // 195: booking.BookingRPC.UpdateStatusBookingByContactByAdmin:output_type -> booking.ResponseBookingByContact
	69,  // 196: booking.BookingRPC.DeleteBookingByContactByAdmin:output_type -> booking.ResponseBookingByContact
	164, // [164:197] is the sub-list for method output_type
	131, // [131:164] is the sub-list for method input_type
	131, // [131:131] is the sub-list for extension type_name
	131, // [131:131] is the sub-list for extension extendee
	0,   // [0:131] is the sub-list for field type_name
}

func init() { file_pb_booking_booking_proto_init() }
func file_pb_booking_booking_proto_init() {
	if File_pb_booking_booking_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_booking_booking_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Booking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailBookingHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailBookingGuest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TourPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookingByContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBooking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCancelTourHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseCancelTourHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIncomingBooking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScheduleHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseListScheduleHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseListBooking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseIncomingBookingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestParamsIncomingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paginate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookingByContactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageAddon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestParticipantQty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseParticipantQty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseGetPackageScheduleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseDetailHostBooking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseDetailGuestBooking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseParticipantsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseGetAddonlist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseGetPricelist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestDetailPriceByParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseDetailPriceByParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiptBooking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseReceiptBooking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveTour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseActiveTour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTotalParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestParamsActiveList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListActiveBooking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseActiveBookingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestParamsActivityList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListActivityBooking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseBookingActivityList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantHostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseParticipantHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestInfoBookings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseListInfoBookings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBookingByTourScheduleID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseGetBookingByTourScheduleID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBookingScheduleTourStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseBookingScheduleTourStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBookingByAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestAdminParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseAdminListBooking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCountOrders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseCountOrders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestGetBookingByContactByAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseGetBookingByContactByAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestStatusUpdateBookingByContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseBookingByContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_booking_booking_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestDeleteBookingByContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_booking_booking_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_booking_booking_proto_goTypes,
		DependencyIndexes: file_pb_booking_booking_proto_depIdxs,
		MessageInfos:      file_pb_booking_booking_proto_msgTypes,
	}.Build()
	File_pb_booking_booking_proto = out.File
	file_pb_booking_booking_proto_rawDesc = nil
	file_pb_booking_booking_proto_goTypes = nil
	file_pb_booking_booking_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BookingRPCClient is the client API for BookingRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BookingRPCClient interface {
	GetListBokings(ctx context.Context, in *RequestInfoBookings, opts ...grpc.CallOption) (*ResponseListInfoBookings, error)
	TotalParticipant(ctx context.Context, in *TotalParticipants, opts ...grpc.CallOption) (*ResponseTotalParticipant, error)
	UpdateStatusBooking(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*StatusUpdateResponse, error)
	UpdateIsReviewed(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*BookingResponse, error)
	DetailBooking(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*BookingResponse, error)
	CountOrdersUser(ctx context.Context, in *RequestCountOrders, opts ...grpc.CallOption) (*ResponseCountOrders, error)
	CountOrdersHost(ctx context.Context, in *RequestCountOrders, opts ...grpc.CallOption) (*ResponseCountOrders, error)
	UpdateBookingScheduleTourStatus(ctx context.Context, in *RequestBookingScheduleTourStatus, opts ...grpc.CallOption) (*ResponseBookingScheduleTourStatus, error)
	GetActivityTour(ctx context.Context, in *ActiveTour, opts ...grpc.CallOption) (*ResponseActiveTour, error)
	TotalOrders(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*ResponseCountOrders, error)
	CreateBooking(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*BookingResponse, error)
	DetailBookingByGuest(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*ResponseDetailGuestBooking, error)
	DetailBookingByHost(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*ResponseDetailHostBooking, error)
	CancelTourHost(ctx context.Context, in *RequestCancelTourHost, opts ...grpc.CallOption) (*ResponseCancelTourHost, error)
	DetailParticipantsHost(ctx context.Context, in *ParticipantHostRequest, opts ...grpc.CallOption) (*ResponseParticipantHost, error)
	DetailParticipants(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*ResponseParticipantsList, error)
	ListBooking(ctx context.Context, in *RequestParams, opts ...grpc.CallOption) (*ResponseListBooking, error)
	ListScheduleHost(ctx context.Context, in *RequestParams, opts ...grpc.CallOption) (*ResponseListScheduleHost, error)
	CreateBookingByContact(ctx context.Context, in *BookingByContact, opts ...grpc.CallOption) (*BookingByContactResponse, error)
	UpdateParticipantQty(ctx context.Context, in *RequestParticipantQty, opts ...grpc.CallOption) (*ResponseParticipantQty, error)
	GetSchedulesList(ctx context.Context, in *PackageSchedule, opts ...grpc.CallOption) (*ResponseGetPackageScheduleList, error)
	GetPriceslist(ctx context.Context, in *PackagePrice, opts ...grpc.CallOption) (*ResponseGetPricelist, error)
	GetPriceByTotalParticipant(ctx context.Context, in *RequestDetailPriceByParticipant, opts ...grpc.CallOption) (*ResponseDetailPriceByParticipant, error)
	GetAddonsList(ctx context.Context, in *PackageAddon, opts ...grpc.CallOption) (*ResponseGetAddonlist, error)
	GetBookingReceipt(ctx context.Context, in *ReceiptBooking, opts ...grpc.CallOption) (*ResponseReceiptBooking, error)
	GetIncomingBookingList(ctx context.Context, in *RequestParamsIncomingList, opts ...grpc.CallOption) (*ResponseIncomingBookingList, error)
	GetActiveBookingList(ctx context.Context, in *RequestParamsActiveList, opts ...grpc.CallOption) (*ResponseActiveBookingList, error)
	GetBookingActivitiyList(ctx context.Context, in *RequestParamsActivityList, opts ...grpc.CallOption) (*ResponseBookingActivityList, error)
	GetBookingBySchedulesTourID(ctx context.Context, in *PackageSchedule, opts ...grpc.CallOption) (*ResponseGetBookingByTourScheduleID, error)
	ListBookingByAdmin(ctx context.Context, in *RequestAdminParams, opts ...grpc.CallOption) (*ResponseAdminListBooking, error)
	GetBookingByContactByAdmin(ctx context.Context, in *RequestGetBookingByContactByAdmin, opts ...grpc.CallOption) (*ResponseGetBookingByContactByAdmin, error)
	UpdateStatusBookingByContactByAdmin(ctx context.Context, in *RequestStatusUpdateBookingByContact, opts ...grpc.CallOption) (*ResponseBookingByContact, error)
	DeleteBookingByContactByAdmin(ctx context.Context, in *RequestDeleteBookingByContact, opts ...grpc.CallOption) (*ResponseBookingByContact, error)
}

type bookingRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingRPCClient(cc grpc.ClientConnInterface) BookingRPCClient {
	return &bookingRPCClient{cc}
}

func (c *bookingRPCClient) GetListBokings(ctx context.Context, in *RequestInfoBookings, opts ...grpc.CallOption) (*ResponseListInfoBookings, error) {
	out := new(ResponseListInfoBookings)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/GetListBokings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) TotalParticipant(ctx context.Context, in *TotalParticipants, opts ...grpc.CallOption) (*ResponseTotalParticipant, error) {
	out := new(ResponseTotalParticipant)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/TotalParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) UpdateStatusBooking(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*StatusUpdateResponse, error) {
	out := new(StatusUpdateResponse)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/UpdateStatusBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) UpdateIsReviewed(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*BookingResponse, error) {
	out := new(BookingResponse)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/UpdateIsReviewed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) DetailBooking(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*BookingResponse, error) {
	out := new(BookingResponse)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/DetailBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) CountOrdersUser(ctx context.Context, in *RequestCountOrders, opts ...grpc.CallOption) (*ResponseCountOrders, error) {
	out := new(ResponseCountOrders)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/CountOrdersUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) CountOrdersHost(ctx context.Context, in *RequestCountOrders, opts ...grpc.CallOption) (*ResponseCountOrders, error) {
	out := new(ResponseCountOrders)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/CountOrdersHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) UpdateBookingScheduleTourStatus(ctx context.Context, in *RequestBookingScheduleTourStatus, opts ...grpc.CallOption) (*ResponseBookingScheduleTourStatus, error) {
	out := new(ResponseBookingScheduleTourStatus)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/UpdateBookingScheduleTourStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) GetActivityTour(ctx context.Context, in *ActiveTour, opts ...grpc.CallOption) (*ResponseActiveTour, error) {
	out := new(ResponseActiveTour)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/GetActivityTour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) TotalOrders(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*ResponseCountOrders, error) {
	out := new(ResponseCountOrders)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/TotalOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) CreateBooking(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*BookingResponse, error) {
	out := new(BookingResponse)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/CreateBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) DetailBookingByGuest(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*ResponseDetailGuestBooking, error) {
	out := new(ResponseDetailGuestBooking)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/DetailBookingByGuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) DetailBookingByHost(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*ResponseDetailHostBooking, error) {
	out := new(ResponseDetailHostBooking)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/DetailBookingByHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) CancelTourHost(ctx context.Context, in *RequestCancelTourHost, opts ...grpc.CallOption) (*ResponseCancelTourHost, error) {
	out := new(ResponseCancelTourHost)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/CancelTourHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) DetailParticipantsHost(ctx context.Context, in *ParticipantHostRequest, opts ...grpc.CallOption) (*ResponseParticipantHost, error) {
	out := new(ResponseParticipantHost)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/DetailParticipantsHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) DetailParticipants(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*ResponseParticipantsList, error) {
	out := new(ResponseParticipantsList)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/DetailParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) ListBooking(ctx context.Context, in *RequestParams, opts ...grpc.CallOption) (*ResponseListBooking, error) {
	out := new(ResponseListBooking)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/ListBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) ListScheduleHost(ctx context.Context, in *RequestParams, opts ...grpc.CallOption) (*ResponseListScheduleHost, error) {
	out := new(ResponseListScheduleHost)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/ListScheduleHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) CreateBookingByContact(ctx context.Context, in *BookingByContact, opts ...grpc.CallOption) (*BookingByContactResponse, error) {
	out := new(BookingByContactResponse)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/CreateBookingByContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) UpdateParticipantQty(ctx context.Context, in *RequestParticipantQty, opts ...grpc.CallOption) (*ResponseParticipantQty, error) {
	out := new(ResponseParticipantQty)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/UpdateParticipantQty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) GetSchedulesList(ctx context.Context, in *PackageSchedule, opts ...grpc.CallOption) (*ResponseGetPackageScheduleList, error) {
	out := new(ResponseGetPackageScheduleList)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/GetSchedulesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) GetPriceslist(ctx context.Context, in *PackagePrice, opts ...grpc.CallOption) (*ResponseGetPricelist, error) {
	out := new(ResponseGetPricelist)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/GetPriceslist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) GetPriceByTotalParticipant(ctx context.Context, in *RequestDetailPriceByParticipant, opts ...grpc.CallOption) (*ResponseDetailPriceByParticipant, error) {
	out := new(ResponseDetailPriceByParticipant)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/GetPriceByTotalParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) GetAddonsList(ctx context.Context, in *PackageAddon, opts ...grpc.CallOption) (*ResponseGetAddonlist, error) {
	out := new(ResponseGetAddonlist)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/GetAddonsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) GetBookingReceipt(ctx context.Context, in *ReceiptBooking, opts ...grpc.CallOption) (*ResponseReceiptBooking, error) {
	out := new(ResponseReceiptBooking)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/GetBookingReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) GetIncomingBookingList(ctx context.Context, in *RequestParamsIncomingList, opts ...grpc.CallOption) (*ResponseIncomingBookingList, error) {
	out := new(ResponseIncomingBookingList)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/GetIncomingBookingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) GetActiveBookingList(ctx context.Context, in *RequestParamsActiveList, opts ...grpc.CallOption) (*ResponseActiveBookingList, error) {
	out := new(ResponseActiveBookingList)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/GetActiveBookingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) GetBookingActivitiyList(ctx context.Context, in *RequestParamsActivityList, opts ...grpc.CallOption) (*ResponseBookingActivityList, error) {
	out := new(ResponseBookingActivityList)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/GetBookingActivitiyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) GetBookingBySchedulesTourID(ctx context.Context, in *PackageSchedule, opts ...grpc.CallOption) (*ResponseGetBookingByTourScheduleID, error) {
	out := new(ResponseGetBookingByTourScheduleID)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/GetBookingBySchedulesTourID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) ListBookingByAdmin(ctx context.Context, in *RequestAdminParams, opts ...grpc.CallOption) (*ResponseAdminListBooking, error) {
	out := new(ResponseAdminListBooking)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/ListBookingByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) GetBookingByContactByAdmin(ctx context.Context, in *RequestGetBookingByContactByAdmin, opts ...grpc.CallOption) (*ResponseGetBookingByContactByAdmin, error) {
	out := new(ResponseGetBookingByContactByAdmin)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/GetBookingByContactByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) UpdateStatusBookingByContactByAdmin(ctx context.Context, in *RequestStatusUpdateBookingByContact, opts ...grpc.CallOption) (*ResponseBookingByContact, error) {
	out := new(ResponseBookingByContact)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/UpdateStatusBookingByContactByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) DeleteBookingByContactByAdmin(ctx context.Context, in *RequestDeleteBookingByContact, opts ...grpc.CallOption) (*ResponseBookingByContact, error) {
	out := new(ResponseBookingByContact)
	err := c.cc.Invoke(ctx, "/booking.BookingRPC/DeleteBookingByContactByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingRPCServer is the server API for BookingRPC service.
type BookingRPCServer interface {
	GetListBokings(context.Context, *RequestInfoBookings) (*ResponseListInfoBookings, error)
	TotalParticipant(context.Context, *TotalParticipants) (*ResponseTotalParticipant, error)
	UpdateStatusBooking(context.Context, *Booking) (*StatusUpdateResponse, error)
	UpdateIsReviewed(context.Context, *Booking) (*BookingResponse, error)
	DetailBooking(context.Context, *Booking) (*BookingResponse, error)
	CountOrdersUser(context.Context, *RequestCountOrders) (*ResponseCountOrders, error)
	CountOrdersHost(context.Context, *RequestCountOrders) (*ResponseCountOrders, error)
	UpdateBookingScheduleTourStatus(context.Context, *RequestBookingScheduleTourStatus) (*ResponseBookingScheduleTourStatus, error)
	GetActivityTour(context.Context, *ActiveTour) (*ResponseActiveTour, error)
	TotalOrders(context.Context, *Booking) (*ResponseCountOrders, error)
	CreateBooking(context.Context, *Booking) (*BookingResponse, error)
	DetailBookingByGuest(context.Context, *Booking) (*ResponseDetailGuestBooking, error)
	DetailBookingByHost(context.Context, *Booking) (*ResponseDetailHostBooking, error)
	CancelTourHost(context.Context, *RequestCancelTourHost) (*ResponseCancelTourHost, error)
	DetailParticipantsHost(context.Context, *ParticipantHostRequest) (*ResponseParticipantHost, error)
	DetailParticipants(context.Context, *Booking) (*ResponseParticipantsList, error)
	ListBooking(context.Context, *RequestParams) (*ResponseListBooking, error)
	ListScheduleHost(context.Context, *RequestParams) (*ResponseListScheduleHost, error)
	CreateBookingByContact(context.Context, *BookingByContact) (*BookingByContactResponse, error)
	UpdateParticipantQty(context.Context, *RequestParticipantQty) (*ResponseParticipantQty, error)
	GetSchedulesList(context.Context, *PackageSchedule) (*ResponseGetPackageScheduleList, error)
	GetPriceslist(context.Context, *PackagePrice) (*ResponseGetPricelist, error)
	GetPriceByTotalParticipant(context.Context, *RequestDetailPriceByParticipant) (*ResponseDetailPriceByParticipant, error)
	GetAddonsList(context.Context, *PackageAddon) (*ResponseGetAddonlist, error)
	GetBookingReceipt(context.Context, *ReceiptBooking) (*ResponseReceiptBooking, error)
	GetIncomingBookingList(context.Context, *RequestParamsIncomingList) (*ResponseIncomingBookingList, error)
	GetActiveBookingList(context.Context, *RequestParamsActiveList) (*ResponseActiveBookingList, error)
	GetBookingActivitiyList(context.Context, *RequestParamsActivityList) (*ResponseBookingActivityList, error)
	GetBookingBySchedulesTourID(context.Context, *PackageSchedule) (*ResponseGetBookingByTourScheduleID, error)
	ListBookingByAdmin(context.Context, *RequestAdminParams) (*ResponseAdminListBooking, error)
	GetBookingByContactByAdmin(context.Context, *RequestGetBookingByContactByAdmin) (*ResponseGetBookingByContactByAdmin, error)
	UpdateStatusBookingByContactByAdmin(context.Context, *RequestStatusUpdateBookingByContact) (*ResponseBookingByContact, error)
	DeleteBookingByContactByAdmin(context.Context, *RequestDeleteBookingByContact) (*ResponseBookingByContact, error)
}

// UnimplementedBookingRPCServer can be embedded to have forward compatible implementations.
type UnimplementedBookingRPCServer struct {
}

func (*UnimplementedBookingRPCServer) GetListBokings(context.Context, *RequestInfoBookings) (*ResponseListInfoBookings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListBokings not implemented")
}
func (*UnimplementedBookingRPCServer) TotalParticipant(context.Context, *TotalParticipants) (*ResponseTotalParticipant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalParticipant not implemented")
}
func (*UnimplementedBookingRPCServer) UpdateStatusBooking(context.Context, *Booking) (*StatusUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatusBooking not implemented")
}
func (*UnimplementedBookingRPCServer) UpdateIsReviewed(context.Context, *Booking) (*BookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIsReviewed not implemented")
}
func (*UnimplementedBookingRPCServer) DetailBooking(context.Context, *Booking) (*BookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailBooking not implemented")
}
func (*UnimplementedBookingRPCServer) CountOrdersUser(context.Context, *RequestCountOrders) (*ResponseCountOrders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountOrdersUser not implemented")
}
func (*UnimplementedBookingRPCServer) CountOrdersHost(context.Context, *RequestCountOrders) (*ResponseCountOrders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountOrdersHost not implemented")
}
func (*UnimplementedBookingRPCServer) UpdateBookingScheduleTourStatus(context.Context, *RequestBookingScheduleTourStatus) (*ResponseBookingScheduleTourStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBookingScheduleTourStatus not implemented")
}
func (*UnimplementedBookingRPCServer) GetActivityTour(context.Context, *ActiveTour) (*ResponseActiveTour, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivityTour not implemented")
}
func (*UnimplementedBookingRPCServer) TotalOrders(context.Context, *Booking) (*ResponseCountOrders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalOrders not implemented")
}
func (*UnimplementedBookingRPCServer) CreateBooking(context.Context, *Booking) (*BookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBooking not implemented")
}
func (*UnimplementedBookingRPCServer) DetailBookingByGuest(context.Context, *Booking) (*ResponseDetailGuestBooking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailBookingByGuest not implemented")
}
func (*UnimplementedBookingRPCServer) DetailBookingByHost(context.Context, *Booking) (*ResponseDetailHostBooking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailBookingByHost not implemented")
}
func (*UnimplementedBookingRPCServer) CancelTourHost(context.Context, *RequestCancelTourHost) (*ResponseCancelTourHost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTourHost not implemented")
}
func (*UnimplementedBookingRPCServer) DetailParticipantsHost(context.Context, *ParticipantHostRequest) (*ResponseParticipantHost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailParticipantsHost not implemented")
}
func (*UnimplementedBookingRPCServer) DetailParticipants(context.Context, *Booking) (*ResponseParticipantsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailParticipants not implemented")
}
func (*UnimplementedBookingRPCServer) ListBooking(context.Context, *RequestParams) (*ResponseListBooking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBooking not implemented")
}
func (*UnimplementedBookingRPCServer) ListScheduleHost(context.Context, *RequestParams) (*ResponseListScheduleHost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScheduleHost not implemented")
}
func (*UnimplementedBookingRPCServer) CreateBookingByContact(context.Context, *BookingByContact) (*BookingByContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBookingByContact not implemented")
}
func (*UnimplementedBookingRPCServer) UpdateParticipantQty(context.Context, *RequestParticipantQty) (*ResponseParticipantQty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParticipantQty not implemented")
}
func (*UnimplementedBookingRPCServer) GetSchedulesList(context.Context, *PackageSchedule) (*ResponseGetPackageScheduleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulesList not implemented")
}
func (*UnimplementedBookingRPCServer) GetPriceslist(context.Context, *PackagePrice) (*ResponseGetPricelist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriceslist not implemented")
}
func (*UnimplementedBookingRPCServer) GetPriceByTotalParticipant(context.Context, *RequestDetailPriceByParticipant) (*ResponseDetailPriceByParticipant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriceByTotalParticipant not implemented")
}
func (*UnimplementedBookingRPCServer) GetAddonsList(context.Context, *PackageAddon) (*ResponseGetAddonlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddonsList not implemented")
}
func (*UnimplementedBookingRPCServer) GetBookingReceipt(context.Context, *ReceiptBooking) (*ResponseReceiptBooking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingReceipt not implemented")
}
func (*UnimplementedBookingRPCServer) GetIncomingBookingList(context.Context, *RequestParamsIncomingList) (*ResponseIncomingBookingList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncomingBookingList not implemented")
}
func (*UnimplementedBookingRPCServer) GetActiveBookingList(context.Context, *RequestParamsActiveList) (*ResponseActiveBookingList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveBookingList not implemented")
}
func (*UnimplementedBookingRPCServer) GetBookingActivitiyList(context.Context, *RequestParamsActivityList) (*ResponseBookingActivityList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingActivitiyList not implemented")
}
func (*UnimplementedBookingRPCServer) GetBookingBySchedulesTourID(context.Context, *PackageSchedule) (*ResponseGetBookingByTourScheduleID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingBySchedulesTourID not implemented")
}
func (*UnimplementedBookingRPCServer) ListBookingByAdmin(context.Context, *RequestAdminParams) (*ResponseAdminListBooking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBookingByAdmin not implemented")
}
func (*UnimplementedBookingRPCServer) GetBookingByContactByAdmin(context.Context, *RequestGetBookingByContactByAdmin) (*ResponseGetBookingByContactByAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingByContactByAdmin not implemented")
}
func (*UnimplementedBookingRPCServer) UpdateStatusBookingByContactByAdmin(context.Context, *RequestStatusUpdateBookingByContact) (*ResponseBookingByContact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatusBookingByContactByAdmin not implemented")
}
func (*UnimplementedBookingRPCServer) DeleteBookingByContactByAdmin(context.Context, *RequestDeleteBookingByContact) (*ResponseBookingByContact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookingByContactByAdmin not implemented")
}

func RegisterBookingRPCServer(s *grpc.Server, srv BookingRPCServer) {
	s.RegisterService(&_BookingRPC_serviceDesc, srv)
}

func _BookingRPC_GetListBokings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfoBookings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).GetListBokings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/GetListBokings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).GetListBokings(ctx, req.(*RequestInfoBookings))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_TotalParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalParticipants)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).TotalParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/TotalParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).TotalParticipant(ctx, req.(*TotalParticipants))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_UpdateStatusBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Booking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).UpdateStatusBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/UpdateStatusBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).UpdateStatusBooking(ctx, req.(*Booking))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_UpdateIsReviewed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Booking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).UpdateIsReviewed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/UpdateIsReviewed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).UpdateIsReviewed(ctx, req.(*Booking))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_DetailBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Booking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).DetailBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/DetailBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).DetailBooking(ctx, req.(*Booking))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_CountOrdersUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCountOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).CountOrdersUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/CountOrdersUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).CountOrdersUser(ctx, req.(*RequestCountOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_CountOrdersHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCountOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).CountOrdersHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/CountOrdersHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).CountOrdersHost(ctx, req.(*RequestCountOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_UpdateBookingScheduleTourStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBookingScheduleTourStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).UpdateBookingScheduleTourStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/UpdateBookingScheduleTourStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).UpdateBookingScheduleTourStatus(ctx, req.(*RequestBookingScheduleTourStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_GetActivityTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActiveTour)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).GetActivityTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/GetActivityTour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).GetActivityTour(ctx, req.(*ActiveTour))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_TotalOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Booking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).TotalOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/TotalOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).TotalOrders(ctx, req.(*Booking))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_CreateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Booking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).CreateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/CreateBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).CreateBooking(ctx, req.(*Booking))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_DetailBookingByGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Booking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).DetailBookingByGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/DetailBookingByGuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).DetailBookingByGuest(ctx, req.(*Booking))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_DetailBookingByHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Booking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).DetailBookingByHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/DetailBookingByHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).DetailBookingByHost(ctx, req.(*Booking))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_CancelTourHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCancelTourHost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).CancelTourHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/CancelTourHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).CancelTourHost(ctx, req.(*RequestCancelTourHost))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_DetailParticipantsHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParticipantHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).DetailParticipantsHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/DetailParticipantsHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).DetailParticipantsHost(ctx, req.(*ParticipantHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_DetailParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Booking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).DetailParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/DetailParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).DetailParticipants(ctx, req.(*Booking))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_ListBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).ListBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/ListBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).ListBooking(ctx, req.(*RequestParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_ListScheduleHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).ListScheduleHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/ListScheduleHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).ListScheduleHost(ctx, req.(*RequestParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_CreateBookingByContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingByContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).CreateBookingByContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/CreateBookingByContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).CreateBookingByContact(ctx, req.(*BookingByContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_UpdateParticipantQty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestParticipantQty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).UpdateParticipantQty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/UpdateParticipantQty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).UpdateParticipantQty(ctx, req.(*RequestParticipantQty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_GetSchedulesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).GetSchedulesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/GetSchedulesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).GetSchedulesList(ctx, req.(*PackageSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_GetPriceslist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackagePrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).GetPriceslist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/GetPriceslist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).GetPriceslist(ctx, req.(*PackagePrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_GetPriceByTotalParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDetailPriceByParticipant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).GetPriceByTotalParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/GetPriceByTotalParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).GetPriceByTotalParticipant(ctx, req.(*RequestDetailPriceByParticipant))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_GetAddonsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageAddon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).GetAddonsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/GetAddonsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).GetAddonsList(ctx, req.(*PackageAddon))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_GetBookingReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiptBooking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).GetBookingReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/GetBookingReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).GetBookingReceipt(ctx, req.(*ReceiptBooking))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_GetIncomingBookingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestParamsIncomingList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).GetIncomingBookingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/GetIncomingBookingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).GetIncomingBookingList(ctx, req.(*RequestParamsIncomingList))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_GetActiveBookingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestParamsActiveList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).GetActiveBookingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/GetActiveBookingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).GetActiveBookingList(ctx, req.(*RequestParamsActiveList))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_GetBookingActivitiyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestParamsActivityList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).GetBookingActivitiyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/GetBookingActivitiyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).GetBookingActivitiyList(ctx, req.(*RequestParamsActivityList))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_GetBookingBySchedulesTourID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).GetBookingBySchedulesTourID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/GetBookingBySchedulesTourID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).GetBookingBySchedulesTourID(ctx, req.(*PackageSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_ListBookingByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAdminParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).ListBookingByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/ListBookingByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).ListBookingByAdmin(ctx, req.(*RequestAdminParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_GetBookingByContactByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetBookingByContactByAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).GetBookingByContactByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/GetBookingByContactByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).GetBookingByContactByAdmin(ctx, req.(*RequestGetBookingByContactByAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_UpdateStatusBookingByContactByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStatusUpdateBookingByContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).UpdateStatusBookingByContactByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/UpdateStatusBookingByContactByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).UpdateStatusBookingByContactByAdmin(ctx, req.(*RequestStatusUpdateBookingByContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_DeleteBookingByContactByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeleteBookingByContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).DeleteBookingByContactByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingRPC/DeleteBookingByContactByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).DeleteBookingByContactByAdmin(ctx, req.(*RequestDeleteBookingByContact))
	}
	return interceptor(ctx, in, info, handler)
}

var _BookingRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "booking.BookingRPC",
	HandlerType: (*BookingRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetListBokings",
			Handler:    _BookingRPC_GetListBokings_Handler,
		},
		{
			MethodName: "TotalParticipant",
			Handler:    _BookingRPC_TotalParticipant_Handler,
		},
		{
			MethodName: "UpdateStatusBooking",
			Handler:    _BookingRPC_UpdateStatusBooking_Handler,
		},
		{
			MethodName: "UpdateIsReviewed",
			Handler:    _BookingRPC_UpdateIsReviewed_Handler,
		},
		{
			MethodName: "DetailBooking",
			Handler:    _BookingRPC_DetailBooking_Handler,
		},
		{
			MethodName: "CountOrdersUser",
			Handler:    _BookingRPC_CountOrdersUser_Handler,
		},
		{
			MethodName: "CountOrdersHost",
			Handler:    _BookingRPC_CountOrdersHost_Handler,
		},
		{
			MethodName: "UpdateBookingScheduleTourStatus",
			Handler:    _BookingRPC_UpdateBookingScheduleTourStatus_Handler,
		},
		{
			MethodName: "GetActivityTour",
			Handler:    _BookingRPC_GetActivityTour_Handler,
		},
		{
			MethodName: "TotalOrders",
			Handler:    _BookingRPC_TotalOrders_Handler,
		},
		{
			MethodName: "CreateBooking",
			Handler:    _BookingRPC_CreateBooking_Handler,
		},
		{
			MethodName: "DetailBookingByGuest",
			Handler:    _BookingRPC_DetailBookingByGuest_Handler,
		},
		{
			MethodName: "DetailBookingByHost",
			Handler:    _BookingRPC_DetailBookingByHost_Handler,
		},
		{
			MethodName: "CancelTourHost",
			Handler:    _BookingRPC_CancelTourHost_Handler,
		},
		{
			MethodName: "DetailParticipantsHost",
			Handler:    _BookingRPC_DetailParticipantsHost_Handler,
		},
		{
			MethodName: "DetailParticipants",
			Handler:    _BookingRPC_DetailParticipants_Handler,
		},
		{
			MethodName: "ListBooking",
			Handler:    _BookingRPC_ListBooking_Handler,
		},
		{
			MethodName: "ListScheduleHost",
			Handler:    _BookingRPC_ListScheduleHost_Handler,
		},
		{
			MethodName: "CreateBookingByContact",
			Handler:    _BookingRPC_CreateBookingByContact_Handler,
		},
		{
			MethodName: "UpdateParticipantQty",
			Handler:    _BookingRPC_UpdateParticipantQty_Handler,
		},
		{
			MethodName: "GetSchedulesList",
			Handler:    _BookingRPC_GetSchedulesList_Handler,
		},
		{
			MethodName: "GetPriceslist",
			Handler:    _BookingRPC_GetPriceslist_Handler,
		},
		{
			MethodName: "GetPriceByTotalParticipant",
			Handler:    _BookingRPC_GetPriceByTotalParticipant_Handler,
		},
		{
			MethodName: "GetAddonsList",
			Handler:    _BookingRPC_GetAddonsList_Handler,
		},
		{
			MethodName: "GetBookingReceipt",
			Handler:    _BookingRPC_GetBookingReceipt_Handler,
		},
		{
			MethodName: "GetIncomingBookingList",
			Handler:    _BookingRPC_GetIncomingBookingList_Handler,
		},
		{
			MethodName: "GetActiveBookingList",
			Handler:    _BookingRPC_GetActiveBookingList_Handler,
		},
		{
			MethodName: "GetBookingActivitiyList",
			Handler:    _BookingRPC_GetBookingActivitiyList_Handler,
		},
		{
			MethodName: "GetBookingBySchedulesTourID",
			Handler:    _BookingRPC_GetBookingBySchedulesTourID_Handler,
		},
		{
			MethodName: "ListBookingByAdmin",
			Handler:    _BookingRPC_ListBookingByAdmin_Handler,
		},
		{
			MethodName: "GetBookingByContactByAdmin",
			Handler:    _BookingRPC_GetBookingByContactByAdmin_Handler,
		},
		{
			MethodName: "UpdateStatusBookingByContactByAdmin",
			Handler:    _BookingRPC_UpdateStatusBookingByContactByAdmin_Handler,
		},
		{
			MethodName: "DeleteBookingByContactByAdmin",
			Handler:    _BookingRPC_DeleteBookingByContactByAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/booking/booking.proto",
}
