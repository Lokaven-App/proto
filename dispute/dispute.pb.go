// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.7.1
// source: dispute.proto

package dispute

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Dispute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"_id"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: bson:"dispute_number"
	DisputeNumber string `protobuf:"bytes,2,opt,name=dispute_number,json=disputeNumber,proto3" json:"dispute_number,omitempty"`
	// @inject_tag: bson:"tour_id"
	TourId string `protobuf:"bytes,3,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	// @inject_tag: bson:"schedule_id"
	ScheduleId string `protobuf:"bytes,4,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	// @inject_tag: bson:"guest_name"
	GuestName string `protobuf:"bytes,5,opt,name=guest_name,json=guestName,proto3" json:"guest_name,omitempty"`
	// @inject_tag: bson:"guest_email"
	GuestEmail string `protobuf:"bytes,6,opt,name=guest_email,json=guestEmail,proto3" json:"guest_email,omitempty"`
	// @inject_tag: bson:"guest_phone"
	GuestPhone string `protobuf:"bytes,7,opt,name=guest_phone,json=guestPhone,proto3" json:"guest_phone,omitempty"`
	// @inject_tag: bson:"message"
	Message string `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: bson:"resolve"
	Resolve bool `protobuf:"varint,9,opt,name=resolve,proto3" json:"resolve,omitempty"`
	// @inject_tag: bson:"created_at"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Dispute) Reset() {
	*x = Dispute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispute_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dispute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dispute) ProtoMessage() {}

func (x *Dispute) ProtoReflect() protoreflect.Message {
	mi := &file_dispute_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dispute.ProtoReflect.Descriptor instead.
func (*Dispute) Descriptor() ([]byte, []int) {
	return file_dispute_proto_rawDescGZIP(), []int{0}
}

func (x *Dispute) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Dispute) GetDisputeNumber() string {
	if x != nil {
		return x.DisputeNumber
	}
	return ""
}

func (x *Dispute) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *Dispute) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *Dispute) GetGuestName() string {
	if x != nil {
		return x.GuestName
	}
	return ""
}

func (x *Dispute) GetGuestEmail() string {
	if x != nil {
		return x.GuestEmail
	}
	return ""
}

func (x *Dispute) GetGuestPhone() string {
	if x != nil {
		return x.GuestPhone
	}
	return ""
}

func (x *Dispute) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Dispute) GetResolve() bool {
	if x != nil {
		return x.Resolve
	}
	return false
}

func (x *Dispute) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type Responses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *Responses) Reset() {
	*x = Responses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispute_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Responses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Responses) ProtoMessage() {}

func (x *Responses) ProtoReflect() protoreflect.Message {
	mi := &file_dispute_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Responses.ProtoReflect.Descriptor instead.
func (*Responses) Descriptor() ([]byte, []int) {
	return file_dispute_proto_rawDescGZIP(), []int{1}
}

func (x *Responses) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Responses) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

var File_dispute_proto protoreflect.FileDescriptor

var file_dispute_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xca, 0x02, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x70,
	0x75, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73,
	0x70, 0x75, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f,
	0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75,
	0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x65, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x75, 0x65, 0x73, 0x74, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x35, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x32, 0x6b, 0x0a, 0x0f, 0x44,
	0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x58,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x12,
	0x10, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74,
	0x65, 0x1a, 0x12, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dispute_proto_rawDescOnce sync.Once
	file_dispute_proto_rawDescData = file_dispute_proto_rawDesc
)

func file_dispute_proto_rawDescGZIP() []byte {
	file_dispute_proto_rawDescOnce.Do(func() {
		file_dispute_proto_rawDescData = protoimpl.X.CompressGZIP(file_dispute_proto_rawDescData)
	})
	return file_dispute_proto_rawDescData
}

var file_dispute_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_dispute_proto_goTypes = []interface{}{
	(*Dispute)(nil),             // 0: dispute.Dispute
	(*Responses)(nil),           // 1: dispute.Responses
	(*timestamp.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_dispute_proto_depIdxs = []int32{
	2, // 0: dispute.Dispute.created_at:type_name -> google.protobuf.Timestamp
	0, // 1: dispute.DisputeServices.CreateDispute:input_type -> dispute.Dispute
	1, // 2: dispute.DisputeServices.CreateDispute:output_type -> dispute.Responses
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_dispute_proto_init() }
func file_dispute_proto_init() {
	if File_dispute_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dispute_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dispute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispute_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Responses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dispute_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dispute_proto_goTypes,
		DependencyIndexes: file_dispute_proto_depIdxs,
		MessageInfos:      file_dispute_proto_msgTypes,
	}.Build()
	File_dispute_proto = out.File
	file_dispute_proto_rawDesc = nil
	file_dispute_proto_goTypes = nil
	file_dispute_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DisputeServicesClient is the client API for DisputeServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DisputeServicesClient interface {
	CreateDispute(ctx context.Context, in *Dispute, opts ...grpc.CallOption) (*Responses, error)
}

type disputeServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewDisputeServicesClient(cc grpc.ClientConnInterface) DisputeServicesClient {
	return &disputeServicesClient{cc}
}

func (c *disputeServicesClient) CreateDispute(ctx context.Context, in *Dispute, opts ...grpc.CallOption) (*Responses, error) {
	out := new(Responses)
	err := c.cc.Invoke(ctx, "/dispute.DisputeServices/CreateDispute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DisputeServicesServer is the server API for DisputeServices service.
type DisputeServicesServer interface {
	CreateDispute(context.Context, *Dispute) (*Responses, error)
}

// UnimplementedDisputeServicesServer can be embedded to have forward compatible implementations.
type UnimplementedDisputeServicesServer struct {
}

func (*UnimplementedDisputeServicesServer) CreateDispute(context.Context, *Dispute) (*Responses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDispute not implemented")
}

func RegisterDisputeServicesServer(s *grpc.Server, srv DisputeServicesServer) {
	s.RegisterService(&_DisputeServices_serviceDesc, srv)
}

func _DisputeServices_CreateDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dispute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisputeServicesServer).CreateDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispute.DisputeServices/CreateDispute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisputeServicesServer).CreateDispute(ctx, req.(*Dispute))
	}
	return interceptor(ctx, in, info, handler)
}

var _DisputeServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dispute.DisputeServices",
	HandlerType: (*DisputeServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDispute",
			Handler:    _DisputeServices_CreateDispute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dispute.proto",
}
