// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.1
// source: dispute.proto

package dispute

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Dispute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"_id"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	// @inject_tag: bson:"dispute_number"
	DisputeNumber string `protobuf:"bytes,2,opt,name=dispute_number,json=disputeNumber,proto3" json:"dispute_number,omitempty" bson:"dispute_number"`
	// @inject_tag: bson:"tour_id"
	TourId string `protobuf:"bytes,3,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty" bson:"tour_id"`
	// @inject_tag: bson:"schedule_id"
	ScheduleId string `protobuf:"bytes,4,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty" bson:"schedule_id"`
	// @inject_tag: bson:"user_uid"
	UserUid string `protobuf:"bytes,5,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty" bson:"user_uid"`
	// @inject_tag: bson:"guest_name"
	GuestName string `protobuf:"bytes,6,opt,name=guest_name,json=guestName,proto3" json:"guest_name,omitempty" bson:"guest_name"`
	// @inject_tag: bson:"guest_email"
	GuestEmail string `protobuf:"bytes,7,opt,name=guest_email,json=guestEmail,proto3" json:"guest_email,omitempty" bson:"guest_email"`
	// @inject_tag: bson:"guest_phone"
	GuestPhone string `protobuf:"bytes,8,opt,name=guest_phone,json=guestPhone,proto3" json:"guest_phone,omitempty" bson:"guest_phone"`
	// @inject_tag: bson:"message"
	Message string `protobuf:"bytes,9,opt,name=message,proto3" json:"message,omitempty" bson:"message"`
	// @inject_tag: bson:"resolve"
	Resolve bool `protobuf:"varint,10,opt,name=resolve,proto3" json:"resolve,omitempty" bson:"resolve"`
	// @inject_tag: bson:"created_at"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" bson:"created_at"`
	// @inject_tag: bson:"order_number"
	OrderNumber string `protobuf:"bytes,12,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty" bson:"order_number"`
}

func (x *Dispute) Reset() {
	*x = Dispute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispute_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dispute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dispute) ProtoMessage() {}

func (x *Dispute) ProtoReflect() protoreflect.Message {
	mi := &file_dispute_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dispute.ProtoReflect.Descriptor instead.
func (*Dispute) Descriptor() ([]byte, []int) {
	return file_dispute_proto_rawDescGZIP(), []int{0}
}

func (x *Dispute) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Dispute) GetDisputeNumber() string {
	if x != nil {
		return x.DisputeNumber
	}
	return ""
}

func (x *Dispute) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *Dispute) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *Dispute) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *Dispute) GetGuestName() string {
	if x != nil {
		return x.GuestName
	}
	return ""
}

func (x *Dispute) GetGuestEmail() string {
	if x != nil {
		return x.GuestEmail
	}
	return ""
}

func (x *Dispute) GetGuestPhone() string {
	if x != nil {
		return x.GuestPhone
	}
	return ""
}

func (x *Dispute) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Dispute) GetResolve() bool {
	if x != nil {
		return x.Resolve
	}
	return false
}

func (x *Dispute) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Dispute) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

type PackageSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId string                 `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	TourId     string                 `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Durations  string                 `protobuf:"bytes,3,opt,name=durations,proto3" json:"durations,omitempty"`
	StartDate  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Quota      string                 `protobuf:"bytes,6,opt,name=quota,proto3" json:"quota,omitempty"`
	IsActive   bool                   `protobuf:"varint,7,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	MinQuota   string                 `protobuf:"bytes,8,opt,name=min_quota,json=minQuota,proto3" json:"min_quota,omitempty"`
	MaxQuota   string                 `protobuf:"bytes,9,opt,name=max_quota,json=maxQuota,proto3" json:"max_quota,omitempty"`
	IsBooked   bool                   `protobuf:"varint,10,opt,name=is_booked,json=isBooked,proto3" json:"is_booked,omitempty"`
	TourStatus string                 `protobuf:"bytes,11,opt,name=tour_status,json=tourStatus,proto3" json:"tour_status,omitempty"`
	OnHold     string                 `protobuf:"bytes,12,opt,name=on_hold,json=onHold,proto3" json:"on_hold,omitempty"`
	OnholdDate *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=onhold_date,json=onholdDate,proto3" json:"onhold_date,omitempty"`
}

func (x *PackageSchedule) Reset() {
	*x = PackageSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispute_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageSchedule) ProtoMessage() {}

func (x *PackageSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_dispute_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageSchedule.ProtoReflect.Descriptor instead.
func (*PackageSchedule) Descriptor() ([]byte, []int) {
	return file_dispute_proto_rawDescGZIP(), []int{1}
}

func (x *PackageSchedule) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *PackageSchedule) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *PackageSchedule) GetDurations() string {
	if x != nil {
		return x.Durations
	}
	return ""
}

func (x *PackageSchedule) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *PackageSchedule) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *PackageSchedule) GetQuota() string {
	if x != nil {
		return x.Quota
	}
	return ""
}

func (x *PackageSchedule) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *PackageSchedule) GetMinQuota() string {
	if x != nil {
		return x.MinQuota
	}
	return ""
}

func (x *PackageSchedule) GetMaxQuota() string {
	if x != nil {
		return x.MaxQuota
	}
	return ""
}

func (x *PackageSchedule) GetIsBooked() bool {
	if x != nil {
		return x.IsBooked
	}
	return false
}

func (x *PackageSchedule) GetTourStatus() string {
	if x != nil {
		return x.TourStatus
	}
	return ""
}

func (x *PackageSchedule) GetOnHold() string {
	if x != nil {
		return x.OnHold
	}
	return ""
}

func (x *PackageSchedule) GetOnholdDate() *timestamppb.Timestamp {
	if x != nil {
		return x.OnholdDate
	}
	return nil
}

type Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId    string `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Firstname string `protobuf:"bytes,2,opt,name=firstname,proto3" json:"firstname,omitempty"`
	Lastname  string `protobuf:"bytes,3,opt,name=lastname,proto3" json:"lastname,omitempty"`
	Email     string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Phone     string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *Host) Reset() {
	*x = Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispute_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host) ProtoMessage() {}

func (x *Host) ProtoReflect() protoreflect.Message {
	mi := &file_dispute_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Host.ProtoReflect.Descriptor instead.
func (*Host) Descriptor() ([]byte, []int) {
	return file_dispute_proto_rawDescGZIP(), []int{2}
}

func (x *Host) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *Host) GetFirstname() string {
	if x != nil {
		return x.Firstname
	}
	return ""
}

func (x *Host) GetLastname() string {
	if x != nil {
		return x.Lastname
	}
	return ""
}

func (x *Host) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Host) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dispute  *Dispute         `protobuf:"bytes,1,opt,name=dispute,proto3" json:"dispute,omitempty"`
	Schedule *PackageSchedule `protobuf:"bytes,2,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Host     *Host            `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *Detail) Reset() {
	*x = Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispute_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Detail) ProtoMessage() {}

func (x *Detail) ProtoReflect() protoreflect.Message {
	mi := &file_dispute_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Detail.ProtoReflect.Descriptor instead.
func (*Detail) Descriptor() ([]byte, []int) {
	return file_dispute_proto_rawDescGZIP(), []int{3}
}

func (x *Detail) GetDispute() *Dispute {
	if x != nil {
		return x.Dispute
	}
	return nil
}

func (x *Detail) GetSchedule() *PackageSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *Detail) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

type TourPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourId   string           `protobuf:"bytes,1,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Title    string           `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Schedule *PackageSchedule `protobuf:"bytes,3,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Disputes []*Dispute       `protobuf:"bytes,4,rep,name=disputes,proto3" json:"disputes,omitempty"`
}

func (x *TourPackage) Reset() {
	*x = TourPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispute_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TourPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourPackage) ProtoMessage() {}

func (x *TourPackage) ProtoReflect() protoreflect.Message {
	mi := &file_dispute_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourPackage.ProtoReflect.Descriptor instead.
func (*TourPackage) Descriptor() ([]byte, []int) {
	return file_dispute_proto_rawDescGZIP(), []int{4}
}

func (x *TourPackage) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *TourPackage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TourPackage) GetSchedule() *PackageSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *TourPackage) GetDisputes() []*Dispute {
	if x != nil {
		return x.Disputes
	}
	return nil
}

type Paginate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentPage int32 `protobuf:"varint,1,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	NextPage    int32 `protobuf:"varint,2,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	TotalPage   int32 `protobuf:"varint,3,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	PerPage     int32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *Paginate) Reset() {
	*x = Paginate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispute_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paginate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paginate) ProtoMessage() {}

func (x *Paginate) ProtoReflect() protoreflect.Message {
	mi := &file_dispute_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paginate.ProtoReflect.Descriptor instead.
func (*Paginate) Descriptor() ([]byte, []int) {
	return file_dispute_proto_rawDescGZIP(), []int{5}
}

func (x *Paginate) GetCurrentPage() int32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *Paginate) GetNextPage() int32 {
	if x != nil {
		return x.NextPage
	}
	return 0
}

func (x *Paginate) GetTotalPage() int32 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *Paginate) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type RequestParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Sort      string `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
	Filter    string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	DisputeId string `protobuf:"bytes,4,opt,name=dispute_id,json=disputeId,proto3" json:"dispute_id,omitempty"`
	Page      string `protobuf:"bytes,5,opt,name=page,proto3" json:"page,omitempty"`
	PerPage   string `protobuf:"bytes,6,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *RequestParam) Reset() {
	*x = RequestParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispute_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestParam) ProtoMessage() {}

func (x *RequestParam) ProtoReflect() protoreflect.Message {
	mi := &file_dispute_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestParam.ProtoReflect.Descriptor instead.
func (*RequestParam) Descriptor() ([]byte, []int) {
	return file_dispute_proto_rawDescGZIP(), []int{6}
}

func (x *RequestParam) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RequestParam) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *RequestParam) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *RequestParam) GetDisputeId() string {
	if x != nil {
		return x.DisputeId
	}
	return ""
}

func (x *RequestParam) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *RequestParam) GetPerPage() string {
	if x != nil {
		return x.PerPage
	}
	return ""
}

type ResponsesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title    string         `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data     []*TourPackage `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Paginate *Paginate      `protobuf:"bytes,4,opt,name=paginate,proto3" json:"paginate,omitempty"`
}

func (x *ResponsesList) Reset() {
	*x = ResponsesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispute_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsesList) ProtoMessage() {}

func (x *ResponsesList) ProtoReflect() protoreflect.Message {
	mi := &file_dispute_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsesList.ProtoReflect.Descriptor instead.
func (*ResponsesList) Descriptor() ([]byte, []int) {
	return file_dispute_proto_rawDescGZIP(), []int{7}
}

func (x *ResponsesList) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponsesList) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponsesList) GetData() []*TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponsesList) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

type ResponseDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data  *Detail `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseDetail) Reset() {
	*x = ResponseDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispute_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseDetail) ProtoMessage() {}

func (x *ResponseDetail) ProtoReflect() protoreflect.Message {
	mi := &file_dispute_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseDetail.ProtoReflect.Descriptor instead.
func (*ResponseDetail) Descriptor() ([]byte, []int) {
	return file_dispute_proto_rawDescGZIP(), []int{8}
}

func (x *ResponseDetail) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseDetail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseDetail) GetData() *Detail {
	if x != nil {
		return x.Data
	}
	return nil
}

type Responses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *Responses) Reset() {
	*x = Responses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispute_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Responses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Responses) ProtoMessage() {}

func (x *Responses) ProtoReflect() protoreflect.Message {
	mi := &file_dispute_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Responses.ProtoReflect.Descriptor instead.
func (*Responses) Descriptor() ([]byte, []int) {
	return file_dispute_proto_rawDescGZIP(), []int{9}
}

func (x *Responses) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Responses) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

var File_dispute_proto protoreflect.FileDescriptor

var file_dispute_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x03, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x70,
	0x75, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73,
	0x70, 0x75, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f,
	0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75,
	0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x75, 0x65, 0x73, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0xdc, 0x03, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x75, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6f,
	0x6e, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x6e,
	0x48, 0x6f, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6f, 0x6e, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6f, 0x6e, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x85, 0x01, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x06, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65,
	0x12, 0x34, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x0b, 0x54, 0x6f,
	0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x69, 0x73,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2c,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x75,
	0x74, 0x65, 0x52, 0x08, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x73, 0x22, 0x84, 0x01, 0x0a,
	0x08, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65,
	0x22, 0x92, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x69, 0x73,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75,
	0x74, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x22, 0x5f, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x35, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x32, 0x96, 0x03,
	0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x58, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x75,
	0x74, 0x65, 0x12, 0x10, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x44, 0x69, 0x73,
	0x70, 0x75, 0x74, 0x65, 0x1a, 0x12, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74,
	0x65, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x5a, 0x0a, 0x0b, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x64, 0x69, 0x73,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x1a, 0x16, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x75,
	0x74, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x0d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75,
	0x74, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a,
	0x17, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25,
	0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74,
	0x65, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f, 0x7b, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x5f, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x12,
	0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x3a, 0x01, 0x2a, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dispute_proto_rawDescOnce sync.Once
	file_dispute_proto_rawDescData = file_dispute_proto_rawDesc
)

func file_dispute_proto_rawDescGZIP() []byte {
	file_dispute_proto_rawDescOnce.Do(func() {
		file_dispute_proto_rawDescData = protoimpl.X.CompressGZIP(file_dispute_proto_rawDescData)
	})
	return file_dispute_proto_rawDescData
}

var file_dispute_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_dispute_proto_goTypes = []interface{}{
	(*Dispute)(nil),               // 0: dispute.Dispute
	(*PackageSchedule)(nil),       // 1: dispute.PackageSchedule
	(*Host)(nil),                  // 2: dispute.Host
	(*Detail)(nil),                // 3: dispute.Detail
	(*TourPackage)(nil),           // 4: dispute.TourPackage
	(*Paginate)(nil),              // 5: dispute.Paginate
	(*RequestParam)(nil),          // 6: dispute.RequestParam
	(*ResponsesList)(nil),         // 7: dispute.ResponsesList
	(*ResponseDetail)(nil),        // 8: dispute.ResponseDetail
	(*Responses)(nil),             // 9: dispute.Responses
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
}
var file_dispute_proto_depIdxs = []int32{
	10, // 0: dispute.Dispute.created_at:type_name -> google.protobuf.Timestamp
	10, // 1: dispute.PackageSchedule.start_date:type_name -> google.protobuf.Timestamp
	10, // 2: dispute.PackageSchedule.end_date:type_name -> google.protobuf.Timestamp
	10, // 3: dispute.PackageSchedule.onhold_date:type_name -> google.protobuf.Timestamp
	0,  // 4: dispute.Detail.dispute:type_name -> dispute.Dispute
	1,  // 5: dispute.Detail.schedule:type_name -> dispute.PackageSchedule
	2,  // 6: dispute.Detail.host:type_name -> dispute.Host
	1,  // 7: dispute.TourPackage.schedule:type_name -> dispute.PackageSchedule
	0,  // 8: dispute.TourPackage.disputes:type_name -> dispute.Dispute
	4,  // 9: dispute.ResponsesList.data:type_name -> dispute.TourPackage
	5,  // 10: dispute.ResponsesList.paginate:type_name -> dispute.Paginate
	3,  // 11: dispute.ResponseDetail.data:type_name -> dispute.Detail
	0,  // 12: dispute.DisputeServices.CreateDispute:input_type -> dispute.Dispute
	6,  // 13: dispute.DisputeServices.ListDispute:input_type -> dispute.RequestParam
	6,  // 14: dispute.DisputeServices.DetailDispute:input_type -> dispute.RequestParam
	6,  // 15: dispute.DisputeServices.ResolveDispute:input_type -> dispute.RequestParam
	9,  // 16: dispute.DisputeServices.CreateDispute:output_type -> dispute.Responses
	7,  // 17: dispute.DisputeServices.ListDispute:output_type -> dispute.ResponsesList
	8,  // 18: dispute.DisputeServices.DetailDispute:output_type -> dispute.ResponseDetail
	9,  // 19: dispute.DisputeServices.ResolveDispute:output_type -> dispute.Responses
	16, // [16:20] is the sub-list for method output_type
	12, // [12:16] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_dispute_proto_init() }
func file_dispute_proto_init() {
	if File_dispute_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dispute_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dispute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispute_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispute_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispute_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispute_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TourPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispute_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paginate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispute_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispute_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispute_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispute_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Responses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dispute_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dispute_proto_goTypes,
		DependencyIndexes: file_dispute_proto_depIdxs,
		MessageInfos:      file_dispute_proto_msgTypes,
	}.Build()
	File_dispute_proto = out.File
	file_dispute_proto_rawDesc = nil
	file_dispute_proto_goTypes = nil
	file_dispute_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DisputeServicesClient is the client API for DisputeServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DisputeServicesClient interface {
	CreateDispute(ctx context.Context, in *Dispute, opts ...grpc.CallOption) (*Responses, error)
	ListDispute(ctx context.Context, in *RequestParam, opts ...grpc.CallOption) (*ResponsesList, error)
	DetailDispute(ctx context.Context, in *RequestParam, opts ...grpc.CallOption) (*ResponseDetail, error)
	ResolveDispute(ctx context.Context, in *RequestParam, opts ...grpc.CallOption) (*Responses, error)
}

type disputeServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewDisputeServicesClient(cc grpc.ClientConnInterface) DisputeServicesClient {
	return &disputeServicesClient{cc}
}

func (c *disputeServicesClient) CreateDispute(ctx context.Context, in *Dispute, opts ...grpc.CallOption) (*Responses, error) {
	out := new(Responses)
	err := c.cc.Invoke(ctx, "/dispute.DisputeServices/CreateDispute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disputeServicesClient) ListDispute(ctx context.Context, in *RequestParam, opts ...grpc.CallOption) (*ResponsesList, error) {
	out := new(ResponsesList)
	err := c.cc.Invoke(ctx, "/dispute.DisputeServices/ListDispute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disputeServicesClient) DetailDispute(ctx context.Context, in *RequestParam, opts ...grpc.CallOption) (*ResponseDetail, error) {
	out := new(ResponseDetail)
	err := c.cc.Invoke(ctx, "/dispute.DisputeServices/DetailDispute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disputeServicesClient) ResolveDispute(ctx context.Context, in *RequestParam, opts ...grpc.CallOption) (*Responses, error) {
	out := new(Responses)
	err := c.cc.Invoke(ctx, "/dispute.DisputeServices/ResolveDispute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DisputeServicesServer is the server API for DisputeServices service.
type DisputeServicesServer interface {
	CreateDispute(context.Context, *Dispute) (*Responses, error)
	ListDispute(context.Context, *RequestParam) (*ResponsesList, error)
	DetailDispute(context.Context, *RequestParam) (*ResponseDetail, error)
	ResolveDispute(context.Context, *RequestParam) (*Responses, error)
}

// UnimplementedDisputeServicesServer can be embedded to have forward compatible implementations.
type UnimplementedDisputeServicesServer struct {
}

func (*UnimplementedDisputeServicesServer) CreateDispute(context.Context, *Dispute) (*Responses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDispute not implemented")
}
func (*UnimplementedDisputeServicesServer) ListDispute(context.Context, *RequestParam) (*ResponsesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDispute not implemented")
}
func (*UnimplementedDisputeServicesServer) DetailDispute(context.Context, *RequestParam) (*ResponseDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailDispute not implemented")
}
func (*UnimplementedDisputeServicesServer) ResolveDispute(context.Context, *RequestParam) (*Responses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveDispute not implemented")
}

func RegisterDisputeServicesServer(s *grpc.Server, srv DisputeServicesServer) {
	s.RegisterService(&_DisputeServices_serviceDesc, srv)
}

func _DisputeServices_CreateDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dispute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisputeServicesServer).CreateDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispute.DisputeServices/CreateDispute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisputeServicesServer).CreateDispute(ctx, req.(*Dispute))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisputeServices_ListDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisputeServicesServer).ListDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispute.DisputeServices/ListDispute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisputeServicesServer).ListDispute(ctx, req.(*RequestParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisputeServices_DetailDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisputeServicesServer).DetailDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispute.DisputeServices/DetailDispute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisputeServicesServer).DetailDispute(ctx, req.(*RequestParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisputeServices_ResolveDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisputeServicesServer).ResolveDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispute.DisputeServices/ResolveDispute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisputeServicesServer).ResolveDispute(ctx, req.(*RequestParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _DisputeServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dispute.DisputeServices",
	HandlerType: (*DisputeServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDispute",
			Handler:    _DisputeServices_CreateDispute_Handler,
		},
		{
			MethodName: "ListDispute",
			Handler:    _DisputeServices_ListDispute_Handler,
		},
		{
			MethodName: "DetailDispute",
			Handler:    _DisputeServices_DetailDispute_Handler,
		},
		{
			MethodName: "ResolveDispute",
			Handler:    _DisputeServices_ResolveDispute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dispute.proto",
}
