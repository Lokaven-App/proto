// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: pb/tourpackage.proto

package tourpackage

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TourPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourId           string               `protobuf:"bytes,1,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Title            string               `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Medias           []*PackageMedia      `protobuf:"bytes,3,rep,name=medias,proto3" json:"medias,omitempty"`
	Schedules        []*PackageSchedule   `protobuf:"bytes,4,rep,name=schedules,proto3" json:"schedules,omitempty"`
	Description      string               `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Categories       []string             `protobuf:"bytes,7,rep,name=categories,proto3" json:"categories,omitempty"`
	Tags             []string             `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	Location         string               `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
	Rate             string               `protobuf:"bytes,10,opt,name=rate,proto3" json:"rate,omitempty"`
	Review           string               `protobuf:"bytes,11,opt,name=review,proto3" json:"review,omitempty"`
	Addons           []*PackageAddon      `protobuf:"bytes,12,rep,name=addons,proto3" json:"addons,omitempty"`
	IsCurated        bool                 `protobuf:"varint,13,opt,name=is_curated,json=isCurated,proto3" json:"is_curated,omitempty"`
	IsFeatured       bool                 `protobuf:"varint,14,opt,name=is_featured,json=isFeatured,proto3" json:"is_featured,omitempty"`
	IsRefundable     bool                 `protobuf:"varint,15,opt,name=is_refundable,json=isRefundable,proto3" json:"is_refundable,omitempty"`
	HostId           string               `protobuf:"bytes,16,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	TypeTour         string               `protobuf:"bytes,17,opt,name=type_tour,json=typeTour,proto3" json:"type_tour,omitempty"`
	Prices           []*PackagePrice      `protobuf:"bytes,18,rep,name=prices,proto3" json:"prices,omitempty"`
	TermsOfService   string               `protobuf:"bytes,19,opt,name=terms_of_service,json=termsOfService,proto3" json:"terms_of_service,omitempty"`
	CustomPolicies   []*CustomPolicy      `protobuf:"bytes,20,rep,name=custom_policies,json=customPolicies,proto3" json:"custom_policies,omitempty"`
	AgeRestriction   string               `protobuf:"bytes,21,opt,name=age_restriction,json=ageRestriction,proto3" json:"age_restriction,omitempty"`
	CostForeignGuest string               `protobuf:"bytes,22,opt,name=cost_foreign_guest,json=costForeignGuest,proto3" json:"cost_foreign_guest,omitempty"`
	Itinerary        string               `protobuf:"bytes,23,opt,name=itinerary,proto3" json:"itinerary,omitempty"`
	PolicyTitle      string               `protobuf:"bytes,24,opt,name=policy_title,json=policyTitle,proto3" json:"policy_title,omitempty"`
	Policy           string               `protobuf:"bytes,25,opt,name=policy,proto3" json:"policy,omitempty"`
	AdditionalCost   string               `protobuf:"bytes,26,opt,name=additional_cost,json=additionalCost,proto3" json:"additional_cost,omitempty"`
	CreatedAt        *timestamp.Timestamp `protobuf:"bytes,27,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *TourPackage) Reset() {
	*x = TourPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TourPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourPackage) ProtoMessage() {}

func (x *TourPackage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourPackage.ProtoReflect.Descriptor instead.
func (*TourPackage) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{0}
}

func (x *TourPackage) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *TourPackage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TourPackage) GetMedias() []*PackageMedia {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *TourPackage) GetSchedules() []*PackageSchedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *TourPackage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TourPackage) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *TourPackage) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TourPackage) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *TourPackage) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *TourPackage) GetReview() string {
	if x != nil {
		return x.Review
	}
	return ""
}

func (x *TourPackage) GetAddons() []*PackageAddon {
	if x != nil {
		return x.Addons
	}
	return nil
}

func (x *TourPackage) GetIsCurated() bool {
	if x != nil {
		return x.IsCurated
	}
	return false
}

func (x *TourPackage) GetIsFeatured() bool {
	if x != nil {
		return x.IsFeatured
	}
	return false
}

func (x *TourPackage) GetIsRefundable() bool {
	if x != nil {
		return x.IsRefundable
	}
	return false
}

func (x *TourPackage) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *TourPackage) GetTypeTour() string {
	if x != nil {
		return x.TypeTour
	}
	return ""
}

func (x *TourPackage) GetPrices() []*PackagePrice {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *TourPackage) GetTermsOfService() string {
	if x != nil {
		return x.TermsOfService
	}
	return ""
}

func (x *TourPackage) GetCustomPolicies() []*CustomPolicy {
	if x != nil {
		return x.CustomPolicies
	}
	return nil
}

func (x *TourPackage) GetAgeRestriction() string {
	if x != nil {
		return x.AgeRestriction
	}
	return ""
}

func (x *TourPackage) GetCostForeignGuest() string {
	if x != nil {
		return x.CostForeignGuest
	}
	return ""
}

func (x *TourPackage) GetItinerary() string {
	if x != nil {
		return x.Itinerary
	}
	return ""
}

func (x *TourPackage) GetPolicyTitle() string {
	if x != nil {
		return x.PolicyTitle
	}
	return ""
}

func (x *TourPackage) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *TourPackage) GetAdditionalCost() string {
	if x != nil {
		return x.AdditionalCost
	}
	return ""
}

func (x *TourPackage) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type TourHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId            string               `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	FirstName         string               `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName          string               `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Gender            string               `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`
	PhoneNumber       string               `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	DateOfBirth       *timestamp.Timestamp `protobuf:"bytes,6,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	Password          string               `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	ProfilePictureUrl string               `protobuf:"bytes,8,opt,name=profile_picture_url,json=profilePictureUrl,proto3" json:"profile_picture_url,omitempty"`
	BusinessName      string               `protobuf:"bytes,9,opt,name=business_name,json=businessName,proto3" json:"business_name,omitempty"`
	BusinessCategory  string               `protobuf:"bytes,10,opt,name=business_category,json=businessCategory,proto3" json:"business_category,omitempty"`
	Address           string               `protobuf:"bytes,11,opt,name=address,proto3" json:"address,omitempty"`
	BusinessAbout     string               `protobuf:"bytes,12,opt,name=business_about,json=businessAbout,proto3" json:"business_about,omitempty"`
	CardIdType        string               `protobuf:"bytes,13,opt,name=card_id_type,json=cardIdType,proto3" json:"card_id_type,omitempty"`
	CardId            string               `protobuf:"bytes,14,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	BussinessIdType   string               `protobuf:"bytes,15,opt,name=bussiness_id_type,json=bussinessIdType,proto3" json:"bussiness_id_type,omitempty"`
	BussinessId       string               `protobuf:"bytes,16,opt,name=bussiness_id,json=bussinessId,proto3" json:"bussiness_id,omitempty"`
	IsVerified        bool                 `protobuf:"varint,17,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	AccountNumber     string               `protobuf:"bytes,18,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	Balance           string               `protobuf:"bytes,19,opt,name=balance,proto3" json:"balance,omitempty"`
	UserUid           string               `protobuf:"bytes,20,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	CreatedAt         *timestamp.Timestamp `protobuf:"bytes,21,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Email             string               `protobuf:"bytes,22,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *TourHost) Reset() {
	*x = TourHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TourHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourHost) ProtoMessage() {}

func (x *TourHost) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourHost.ProtoReflect.Descriptor instead.
func (*TourHost) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{1}
}

func (x *TourHost) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *TourHost) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *TourHost) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *TourHost) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *TourHost) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *TourHost) GetDateOfBirth() *timestamp.Timestamp {
	if x != nil {
		return x.DateOfBirth
	}
	return nil
}

func (x *TourHost) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *TourHost) GetProfilePictureUrl() string {
	if x != nil {
		return x.ProfilePictureUrl
	}
	return ""
}

func (x *TourHost) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *TourHost) GetBusinessCategory() string {
	if x != nil {
		return x.BusinessCategory
	}
	return ""
}

func (x *TourHost) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TourHost) GetBusinessAbout() string {
	if x != nil {
		return x.BusinessAbout
	}
	return ""
}

func (x *TourHost) GetCardIdType() string {
	if x != nil {
		return x.CardIdType
	}
	return ""
}

func (x *TourHost) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *TourHost) GetBussinessIdType() string {
	if x != nil {
		return x.BussinessIdType
	}
	return ""
}

func (x *TourHost) GetBussinessId() string {
	if x != nil {
		return x.BussinessId
	}
	return ""
}

func (x *TourHost) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

func (x *TourHost) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *TourHost) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *TourHost) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *TourHost) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TourHost) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type TourPackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourId           string             `protobuf:"bytes,1,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Title            string             `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Medias           []*PackageMedia    `protobuf:"bytes,3,rep,name=medias,proto3" json:"medias,omitempty"`
	Schedules        []*PackageSchedule `protobuf:"bytes,4,rep,name=schedules,proto3" json:"schedules,omitempty"`
	Description      string             `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Categories       []string           `protobuf:"bytes,7,rep,name=categories,proto3" json:"categories,omitempty"`
	Tags             []string           `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	Location         string             `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
	Rate             string             `protobuf:"bytes,10,opt,name=rate,proto3" json:"rate,omitempty"`
	Review           string             `protobuf:"bytes,11,opt,name=review,proto3" json:"review,omitempty"`
	Addons           []*PackageAddon    `protobuf:"bytes,12,rep,name=addons,proto3" json:"addons,omitempty"`
	IsCurated        bool               `protobuf:"varint,13,opt,name=is_curated,json=isCurated,proto3" json:"is_curated,omitempty"`
	IsFeatured       bool               `protobuf:"varint,14,opt,name=is_featured,json=isFeatured,proto3" json:"is_featured,omitempty"`
	IsRefundable     bool               `protobuf:"varint,15,opt,name=is_refundable,json=isRefundable,proto3" json:"is_refundable,omitempty"`
	HostId           string             `protobuf:"bytes,16,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	TypeTour         string             `protobuf:"bytes,17,opt,name=type_tour,json=typeTour,proto3" json:"type_tour,omitempty"`
	Prices           []*PackagePrice    `protobuf:"bytes,18,rep,name=prices,proto3" json:"prices,omitempty"`
	TermsOfService   string             `protobuf:"bytes,19,opt,name=terms_of_service,json=termsOfService,proto3" json:"terms_of_service,omitempty"`
	CustomPolicies   []*CustomPolicy    `protobuf:"bytes,20,rep,name=custom_policies,json=customPolicies,proto3" json:"custom_policies,omitempty"`
	AgeRestriction   string             `protobuf:"bytes,21,opt,name=age_restriction,json=ageRestriction,proto3" json:"age_restriction,omitempty"`
	CostForeignGuest string             `protobuf:"bytes,22,opt,name=cost_foreign_guest,json=costForeignGuest,proto3" json:"cost_foreign_guest,omitempty"`
	Itinerary        string             `protobuf:"bytes,23,opt,name=itinerary,proto3" json:"itinerary,omitempty"`
	PolicyTitle      string             `protobuf:"bytes,24,opt,name=policy_title,json=policyTitle,proto3" json:"policy_title,omitempty"`
	Policy           string             `protobuf:"bytes,25,opt,name=policy,proto3" json:"policy,omitempty"`
	AdditionalCost   string             `protobuf:"bytes,26,opt,name=additional_cost,json=additionalCost,proto3" json:"additional_cost,omitempty"`
}

func (x *TourPackageRequest) Reset() {
	*x = TourPackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TourPackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourPackageRequest) ProtoMessage() {}

func (x *TourPackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourPackageRequest.ProtoReflect.Descriptor instead.
func (*TourPackageRequest) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{2}
}

func (x *TourPackageRequest) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *TourPackageRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TourPackageRequest) GetMedias() []*PackageMedia {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *TourPackageRequest) GetSchedules() []*PackageSchedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *TourPackageRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TourPackageRequest) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *TourPackageRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TourPackageRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *TourPackageRequest) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *TourPackageRequest) GetReview() string {
	if x != nil {
		return x.Review
	}
	return ""
}

func (x *TourPackageRequest) GetAddons() []*PackageAddon {
	if x != nil {
		return x.Addons
	}
	return nil
}

func (x *TourPackageRequest) GetIsCurated() bool {
	if x != nil {
		return x.IsCurated
	}
	return false
}

func (x *TourPackageRequest) GetIsFeatured() bool {
	if x != nil {
		return x.IsFeatured
	}
	return false
}

func (x *TourPackageRequest) GetIsRefundable() bool {
	if x != nil {
		return x.IsRefundable
	}
	return false
}

func (x *TourPackageRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *TourPackageRequest) GetTypeTour() string {
	if x != nil {
		return x.TypeTour
	}
	return ""
}

func (x *TourPackageRequest) GetPrices() []*PackagePrice {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *TourPackageRequest) GetTermsOfService() string {
	if x != nil {
		return x.TermsOfService
	}
	return ""
}

func (x *TourPackageRequest) GetCustomPolicies() []*CustomPolicy {
	if x != nil {
		return x.CustomPolicies
	}
	return nil
}

func (x *TourPackageRequest) GetAgeRestriction() string {
	if x != nil {
		return x.AgeRestriction
	}
	return ""
}

func (x *TourPackageRequest) GetCostForeignGuest() string {
	if x != nil {
		return x.CostForeignGuest
	}
	return ""
}

func (x *TourPackageRequest) GetItinerary() string {
	if x != nil {
		return x.Itinerary
	}
	return ""
}

func (x *TourPackageRequest) GetPolicyTitle() string {
	if x != nil {
		return x.PolicyTitle
	}
	return ""
}

func (x *TourPackageRequest) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *TourPackageRequest) GetAdditionalCost() string {
	if x != nil {
		return x.AdditionalCost
	}
	return ""
}

type CreateTourPackageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string       `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data  *TourPackage `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateTourPackageResponse) Reset() {
	*x = CreateTourPackageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTourPackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTourPackageResponse) ProtoMessage() {}

func (x *CreateTourPackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTourPackageResponse.ProtoReflect.Descriptor instead.
func (*CreateTourPackageResponse) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{3}
}

func (x *CreateTourPackageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateTourPackageResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateTourPackageResponse) GetData() *TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

type TourPackageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TourPackage `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TourPackageResponse) Reset() {
	*x = TourPackageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TourPackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourPackageResponse) ProtoMessage() {}

func (x *TourPackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourPackageResponse.ProtoReflect.Descriptor instead.
func (*TourPackageResponse) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{4}
}

func (x *TourPackageResponse) GetData() *TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateTourPackageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TourPackage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateTourPackageResponse) Reset() {
	*x = UpdateTourPackageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTourPackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTourPackageResponse) ProtoMessage() {}

func (x *UpdateTourPackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTourPackageResponse.ProtoReflect.Descriptor instead.
func (*UpdateTourPackageResponse) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateTourPackageResponse) GetData() *TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

type PackageTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TourPackage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PackageTagResponse) Reset() {
	*x = PackageTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageTagResponse) ProtoMessage() {}

func (x *PackageTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageTagResponse.ProtoReflect.Descriptor instead.
func (*PackageTagResponse) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{6}
}

func (x *PackageTagResponse) GetData() *TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

type PackageCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []string `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *PackageCategory) Reset() {
	*x = PackageCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageCategory) ProtoMessage() {}

func (x *PackageCategory) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageCategory.ProtoReflect.Descriptor instead.
func (*PackageCategory) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{7}
}

func (x *PackageCategory) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

type PackageTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *PackageTag) Reset() {
	*x = PackageTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageTag) ProtoMessage() {}

func (x *PackageTag) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageTag.ProtoReflect.Descriptor instead.
func (*PackageTag) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{8}
}

func (x *PackageTag) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type PackageCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TourPackage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PackageCategoryResponse) Reset() {
	*x = PackageCategoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageCategoryResponse) ProtoMessage() {}

func (x *PackageCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageCategoryResponse.ProtoReflect.Descriptor instead.
func (*PackageCategoryResponse) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{9}
}

func (x *PackageCategoryResponse) GetData() *TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

type PackageMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId string `protobuf:"bytes,1,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Type    string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	TourId  string `protobuf:"bytes,4,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
}

func (x *PackageMedia) Reset() {
	*x = PackageMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageMedia) ProtoMessage() {}

func (x *PackageMedia) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageMedia.ProtoReflect.Descriptor instead.
func (*PackageMedia) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{10}
}

func (x *PackageMedia) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *PackageMedia) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PackageMedia) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PackageMedia) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

type PackageMediaBrowseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId string `protobuf:"bytes,1,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Type    string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	TourId  string `protobuf:"bytes,4,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Limit   int32  `protobuf:"varint,12,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,13,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *PackageMediaBrowseRequest) Reset() {
	*x = PackageMediaBrowseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageMediaBrowseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageMediaBrowseRequest) ProtoMessage() {}

func (x *PackageMediaBrowseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageMediaBrowseRequest.ProtoReflect.Descriptor instead.
func (*PackageMediaBrowseRequest) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{11}
}

func (x *PackageMediaBrowseRequest) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *PackageMediaBrowseRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PackageMediaBrowseRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PackageMediaBrowseRequest) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *PackageMediaBrowseRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PackageMediaBrowseRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type BrowsePackageMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PackageMedia `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BrowsePackageMedia) Reset() {
	*x = BrowsePackageMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowsePackageMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowsePackageMedia) ProtoMessage() {}

func (x *BrowsePackageMedia) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowsePackageMedia.ProtoReflect.Descriptor instead.
func (*BrowsePackageMedia) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{12}
}

func (x *BrowsePackageMedia) GetData() []*PackageMedia {
	if x != nil {
		return x.Data
	}
	return nil
}

type PackageMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TourPackage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PackageMediaResponse) Reset() {
	*x = PackageMediaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageMediaResponse) ProtoMessage() {}

func (x *PackageMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageMediaResponse.ProtoReflect.Descriptor instead.
func (*PackageMediaResponse) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{13}
}

func (x *PackageMediaResponse) GetData() *TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

type PackageSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId string               `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	TourId     string               `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Durations  string               `protobuf:"bytes,3,opt,name=durations,proto3" json:"durations,omitempty"`
	StartDate  *timestamp.Timestamp `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate    *timestamp.Timestamp `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Quota      string               `protobuf:"bytes,6,opt,name=quota,proto3" json:"quota,omitempty"`
	IsActive   bool                 `protobuf:"varint,7,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	MinQuota   string               `protobuf:"bytes,8,opt,name=min_quota,json=minQuota,proto3" json:"min_quota,omitempty"`
	MaxQuota   string               `protobuf:"bytes,9,opt,name=max_quota,json=maxQuota,proto3" json:"max_quota,omitempty"`
	IsBooked   bool                 `protobuf:"varint,10,opt,name=is_booked,json=isBooked,proto3" json:"is_booked,omitempty"`
}

func (x *PackageSchedule) Reset() {
	*x = PackageSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageSchedule) ProtoMessage() {}

func (x *PackageSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageSchedule.ProtoReflect.Descriptor instead.
func (*PackageSchedule) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{14}
}

func (x *PackageSchedule) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *PackageSchedule) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *PackageSchedule) GetDurations() string {
	if x != nil {
		return x.Durations
	}
	return ""
}

func (x *PackageSchedule) GetStartDate() *timestamp.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *PackageSchedule) GetEndDate() *timestamp.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *PackageSchedule) GetQuota() string {
	if x != nil {
		return x.Quota
	}
	return ""
}

func (x *PackageSchedule) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *PackageSchedule) GetMinQuota() string {
	if x != nil {
		return x.MinQuota
	}
	return ""
}

func (x *PackageSchedule) GetMaxQuota() string {
	if x != nil {
		return x.MaxQuota
	}
	return ""
}

func (x *PackageSchedule) GetIsBooked() bool {
	if x != nil {
		return x.IsBooked
	}
	return false
}

type ScheduleBrowseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId string               `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	TourId     string               `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Durations  string               `protobuf:"bytes,3,opt,name=durations,proto3" json:"durations,omitempty"`
	StartDate  *timestamp.Timestamp `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate    *timestamp.Timestamp `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Quota      string               `protobuf:"bytes,6,opt,name=quota,proto3" json:"quota,omitempty"`
	IsActive   bool                 `protobuf:"varint,7,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	MinQuota   string               `protobuf:"bytes,8,opt,name=min_quota,json=minQuota,proto3" json:"min_quota,omitempty"`
	MaxQuota   string               `protobuf:"bytes,9,opt,name=max_quota,json=maxQuota,proto3" json:"max_quota,omitempty"`
	IsBooked   bool                 `protobuf:"varint,10,opt,name=is_booked,json=isBooked,proto3" json:"is_booked,omitempty"`
	Filters    []*Filter            `protobuf:"bytes,11,rep,name=filters,proto3" json:"filters,omitempty"`
	Limit      int32                `protobuf:"varint,12,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     int32                `protobuf:"varint,13,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ScheduleBrowseRequest) Reset() {
	*x = ScheduleBrowseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleBrowseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleBrowseRequest) ProtoMessage() {}

func (x *ScheduleBrowseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleBrowseRequest.ProtoReflect.Descriptor instead.
func (*ScheduleBrowseRequest) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{15}
}

func (x *ScheduleBrowseRequest) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *ScheduleBrowseRequest) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *ScheduleBrowseRequest) GetDurations() string {
	if x != nil {
		return x.Durations
	}
	return ""
}

func (x *ScheduleBrowseRequest) GetStartDate() *timestamp.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ScheduleBrowseRequest) GetEndDate() *timestamp.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ScheduleBrowseRequest) GetQuota() string {
	if x != nil {
		return x.Quota
	}
	return ""
}

func (x *ScheduleBrowseRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *ScheduleBrowseRequest) GetMinQuota() string {
	if x != nil {
		return x.MinQuota
	}
	return ""
}

func (x *ScheduleBrowseRequest) GetMaxQuota() string {
	if x != nil {
		return x.MaxQuota
	}
	return ""
}

func (x *ScheduleBrowseRequest) GetIsBooked() bool {
	if x != nil {
		return x.IsBooked
	}
	return false
}

func (x *ScheduleBrowseRequest) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ScheduleBrowseRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ScheduleBrowseRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type AddOnBrowseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddonId string    `protobuf:"bytes,1,opt,name=addon_id,json=addonId,proto3" json:"addon_id,omitempty"`
	TourId  string    `protobuf:"bytes,4,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Addon   string    `protobuf:"bytes,2,opt,name=addon,proto3" json:"addon,omitempty"`
	Price   string    `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	Filters []*Filter `protobuf:"bytes,11,rep,name=filters,proto3" json:"filters,omitempty"`
	Limit   int32     `protobuf:"varint,12,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32     `protobuf:"varint,13,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *AddOnBrowseRequest) Reset() {
	*x = AddOnBrowseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnBrowseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnBrowseRequest) ProtoMessage() {}

func (x *AddOnBrowseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnBrowseRequest.ProtoReflect.Descriptor instead.
func (*AddOnBrowseRequest) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{16}
}

func (x *AddOnBrowseRequest) GetAddonId() string {
	if x != nil {
		return x.AddonId
	}
	return ""
}

func (x *AddOnBrowseRequest) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *AddOnBrowseRequest) GetAddon() string {
	if x != nil {
		return x.Addon
	}
	return ""
}

func (x *AddOnBrowseRequest) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *AddOnBrowseRequest) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *AddOnBrowseRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *AddOnBrowseRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type BrowseTourAddon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PackageAddon `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BrowseTourAddon) Reset() {
	*x = BrowseTourAddon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowseTourAddon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowseTourAddon) ProtoMessage() {}

func (x *BrowseTourAddon) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowseTourAddon.ProtoReflect.Descriptor instead.
func (*BrowseTourAddon) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{17}
}

func (x *BrowseTourAddon) GetData() []*PackageAddon {
	if x != nil {
		return x.Data
	}
	return nil
}

type BrowseTourSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PackageSchedule `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BrowseTourSchedule) Reset() {
	*x = BrowseTourSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowseTourSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowseTourSchedule) ProtoMessage() {}

func (x *BrowseTourSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowseTourSchedule.ProtoReflect.Descriptor instead.
func (*BrowseTourSchedule) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{18}
}

func (x *BrowseTourSchedule) GetData() []*PackageSchedule {
	if x != nil {
		return x.Data
	}
	return nil
}

type PackageScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     *TourPackage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	MinQuota string       `protobuf:"bytes,5,opt,name=min_quota,json=minQuota,proto3" json:"min_quota,omitempty"`
	MaxQuota string       `protobuf:"bytes,6,opt,name=max_quota,json=maxQuota,proto3" json:"max_quota,omitempty"`
	IsActive bool         `protobuf:"varint,7,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	IsBooked bool         `protobuf:"varint,8,opt,name=is_booked,json=isBooked,proto3" json:"is_booked,omitempty"`
}

func (x *PackageScheduleResponse) Reset() {
	*x = PackageScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageScheduleResponse) ProtoMessage() {}

func (x *PackageScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageScheduleResponse.ProtoReflect.Descriptor instead.
func (*PackageScheduleResponse) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{19}
}

func (x *PackageScheduleResponse) GetData() *TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PackageScheduleResponse) GetMinQuota() string {
	if x != nil {
		return x.MinQuota
	}
	return ""
}

func (x *PackageScheduleResponse) GetMaxQuota() string {
	if x != nil {
		return x.MaxQuota
	}
	return ""
}

func (x *PackageScheduleResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *PackageScheduleResponse) GetIsBooked() bool {
	if x != nil {
		return x.IsBooked
	}
	return false
}

type PackageAddon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddonId string `protobuf:"bytes,1,opt,name=addon_id,json=addonId,proto3" json:"addon_id,omitempty"`
	TourId  string `protobuf:"bytes,4,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Addon   string `protobuf:"bytes,2,opt,name=addon,proto3" json:"addon,omitempty"`
	Price   string `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *PackageAddon) Reset() {
	*x = PackageAddon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageAddon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageAddon) ProtoMessage() {}

func (x *PackageAddon) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageAddon.ProtoReflect.Descriptor instead.
func (*PackageAddon) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{20}
}

func (x *PackageAddon) GetAddonId() string {
	if x != nil {
		return x.AddonId
	}
	return ""
}

func (x *PackageAddon) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *PackageAddon) GetAddon() string {
	if x != nil {
		return x.Addon
	}
	return ""
}

func (x *PackageAddon) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

type CustomPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyName string `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	Policy     string `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	TourId     string `protobuf:"bytes,3,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
}

func (x *CustomPolicy) Reset() {
	*x = CustomPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomPolicy) ProtoMessage() {}

func (x *CustomPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomPolicy.ProtoReflect.Descriptor instead.
func (*CustomPolicy) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{21}
}

func (x *CustomPolicy) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *CustomPolicy) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *CustomPolicy) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

type DeletePackageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *TourPackage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Code  int32        `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Title string       `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *DeletePackageResponse) Reset() {
	*x = DeletePackageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePackageResponse) ProtoMessage() {}

func (x *DeletePackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePackageResponse.ProtoReflect.Descriptor instead.
func (*DeletePackageResponse) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{22}
}

func (x *DeletePackageResponse) GetData() *TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeletePackageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeletePackageResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type GeneralResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *GeneralResponse) Reset() {
	*x = GeneralResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralResponse) ProtoMessage() {}

func (x *GeneralResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralResponse.ProtoReflect.Descriptor instead.
func (*GeneralResponse) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{23}
}

func (x *GeneralResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GeneralResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type TourHostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TourHost `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TourHostResponse) Reset() {
	*x = TourHostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TourHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourHostResponse) ProtoMessage() {}

func (x *TourHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourHostResponse.ProtoReflect.Descriptor instead.
func (*TourHostResponse) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{24}
}

func (x *TourHostResponse) GetData() *TourHost {
	if x != nil {
		return x.Data
	}
	return nil
}

type PackageAddonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TourPackage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PackageAddonResponse) Reset() {
	*x = PackageAddonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageAddonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageAddonResponse) ProtoMessage() {}

func (x *PackageAddonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageAddonResponse.ProtoReflect.Descriptor instead.
func (*PackageAddonResponse) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{25}
}

func (x *PackageAddonResponse) GetData() *TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

type PackagePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceId        string `protobuf:"bytes,1,opt,name=price_id,json=priceId,proto3" json:"price_id,omitempty"`
	TourId         string `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	MinParticipant string `protobuf:"bytes,3,opt,name=min_participant,json=minParticipant,proto3" json:"min_participant,omitempty"`
	MaxParticipant string `protobuf:"bytes,4,opt,name=max_participant,json=maxParticipant,proto3" json:"max_participant,omitempty"`
	Price          string `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
	KidPrice       string `protobuf:"bytes,7,opt,name=kid_price,json=kidPrice,proto3" json:"kid_price,omitempty"`
	MinKidAge      string `protobuf:"bytes,8,opt,name=min_kid_age,json=minKidAge,proto3" json:"min_kid_age,omitempty"`
	MaxKidAge      string `protobuf:"bytes,9,opt,name=max_kid_age,json=maxKidAge,proto3" json:"max_kid_age,omitempty"`
}

func (x *PackagePrice) Reset() {
	*x = PackagePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagePrice) ProtoMessage() {}

func (x *PackagePrice) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagePrice.ProtoReflect.Descriptor instead.
func (*PackagePrice) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{26}
}

func (x *PackagePrice) GetPriceId() string {
	if x != nil {
		return x.PriceId
	}
	return ""
}

func (x *PackagePrice) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *PackagePrice) GetMinParticipant() string {
	if x != nil {
		return x.MinParticipant
	}
	return ""
}

func (x *PackagePrice) GetMaxParticipant() string {
	if x != nil {
		return x.MaxParticipant
	}
	return ""
}

func (x *PackagePrice) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *PackagePrice) GetKidPrice() string {
	if x != nil {
		return x.KidPrice
	}
	return ""
}

func (x *PackagePrice) GetMinKidAge() string {
	if x != nil {
		return x.MinKidAge
	}
	return ""
}

func (x *PackagePrice) GetMaxKidAge() string {
	if x != nil {
		return x.MaxKidAge
	}
	return ""
}

type PriceListBrowseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceId        string    `protobuf:"bytes,1,opt,name=price_id,json=priceId,proto3" json:"price_id,omitempty"`
	TourId         string    `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	MinParticipant string    `protobuf:"bytes,3,opt,name=min_participant,json=minParticipant,proto3" json:"min_participant,omitempty"`
	MaxParticipant string    `protobuf:"bytes,4,opt,name=max_participant,json=maxParticipant,proto3" json:"max_participant,omitempty"`
	Price          string    `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
	KidPrice       string    `protobuf:"bytes,7,opt,name=kid_price,json=kidPrice,proto3" json:"kid_price,omitempty"`
	MinKidAge      string    `protobuf:"bytes,8,opt,name=min_kid_age,json=minKidAge,proto3" json:"min_kid_age,omitempty"`
	MaxKidAge      string    `protobuf:"bytes,9,opt,name=max_kid_age,json=maxKidAge,proto3" json:"max_kid_age,omitempty"`
	Filters        []*Filter `protobuf:"bytes,11,rep,name=filters,proto3" json:"filters,omitempty"`
	Limit          int32     `protobuf:"varint,12,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset         int32     `protobuf:"varint,13,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *PriceListBrowseRequest) Reset() {
	*x = PriceListBrowseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceListBrowseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceListBrowseRequest) ProtoMessage() {}

func (x *PriceListBrowseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceListBrowseRequest.ProtoReflect.Descriptor instead.
func (*PriceListBrowseRequest) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{27}
}

func (x *PriceListBrowseRequest) GetPriceId() string {
	if x != nil {
		return x.PriceId
	}
	return ""
}

func (x *PriceListBrowseRequest) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *PriceListBrowseRequest) GetMinParticipant() string {
	if x != nil {
		return x.MinParticipant
	}
	return ""
}

func (x *PriceListBrowseRequest) GetMaxParticipant() string {
	if x != nil {
		return x.MaxParticipant
	}
	return ""
}

func (x *PriceListBrowseRequest) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *PriceListBrowseRequest) GetKidPrice() string {
	if x != nil {
		return x.KidPrice
	}
	return ""
}

func (x *PriceListBrowseRequest) GetMinKidAge() string {
	if x != nil {
		return x.MinKidAge
	}
	return ""
}

func (x *PriceListBrowseRequest) GetMaxKidAge() string {
	if x != nil {
		return x.MaxKidAge
	}
	return ""
}

func (x *PriceListBrowseRequest) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *PriceListBrowseRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PriceListBrowseRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type BrowseTourPriceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PackagePrice `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BrowseTourPriceList) Reset() {
	*x = BrowseTourPriceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowseTourPriceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowseTourPriceList) ProtoMessage() {}

func (x *BrowseTourPriceList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowseTourPriceList.ProtoReflect.Descriptor instead.
func (*BrowseTourPriceList) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{28}
}

func (x *BrowseTourPriceList) GetData() []*PackagePrice {
	if x != nil {
		return x.Data
	}
	return nil
}

type BrowseTourPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TourPackage `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BrowseTourPackage) Reset() {
	*x = BrowseTourPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowseTourPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowseTourPackage) ProtoMessage() {}

func (x *BrowseTourPackage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowseTourPackage.ProtoReflect.Descriptor instead.
func (*BrowseTourPackage) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{29}
}

func (x *BrowseTourPackage) GetData() []*TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field    string `protobuf:"bytes,1,opt,name=Field,proto3" json:"Field,omitempty"`
	Operator string `protobuf:"bytes,2,opt,name=Operator,proto3" json:"Operator,omitempty"`
	Value    string `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{30}
}

func (x *Filter) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Filter) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *Filter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type BrowseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*Filter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	Limit   int32     `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32     `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *BrowseRequest) Reset() {
	*x = BrowseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowseRequest) ProtoMessage() {}

func (x *BrowseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowseRequest.ProtoReflect.Descriptor instead.
func (*BrowseRequest) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{31}
}

func (x *BrowseRequest) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *BrowseRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *BrowseRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type BrowseRequestWishList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters  []*Filter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	Limit    int32     `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int32     `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	TourId   string    `protobuf:"bytes,4,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Title    string    `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Price    string    `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`
	Location string    `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
	Rate     string    `protobuf:"bytes,8,opt,name=rate,proto3" json:"rate,omitempty"`
	UserUid  string    `protobuf:"bytes,9,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
}

func (x *BrowseRequestWishList) Reset() {
	*x = BrowseRequestWishList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowseRequestWishList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowseRequestWishList) ProtoMessage() {}

func (x *BrowseRequestWishList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowseRequestWishList.ProtoReflect.Descriptor instead.
func (*BrowseRequestWishList) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{32}
}

func (x *BrowseRequestWishList) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *BrowseRequestWishList) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *BrowseRequestWishList) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *BrowseRequestWishList) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *BrowseRequestWishList) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BrowseRequestWishList) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *BrowseRequestWishList) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *BrowseRequestWishList) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *BrowseRequestWishList) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

type DeleteSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId string               `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	TourId     string               `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	StartDate  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate    *timestamp.Timestamp `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Quota      string               `protobuf:"bytes,5,opt,name=quota,proto3" json:"quota,omitempty"`
	Durations  string               `protobuf:"bytes,7,opt,name=durations,proto3" json:"durations,omitempty"`
	MinQuota   string               `protobuf:"bytes,8,opt,name=min_quota,json=minQuota,proto3" json:"min_quota,omitempty"`
	MaxQuota   string               `protobuf:"bytes,9,opt,name=max_quota,json=maxQuota,proto3" json:"max_quota,omitempty"`
	IsActive   bool                 `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	IsBooked   bool                 `protobuf:"varint,10,opt,name=is_booked,json=isBooked,proto3" json:"is_booked,omitempty"`
}

func (x *DeleteSchedule) Reset() {
	*x = DeleteSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSchedule) ProtoMessage() {}

func (x *DeleteSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSchedule.ProtoReflect.Descriptor instead.
func (*DeleteSchedule) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteSchedule) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *DeleteSchedule) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *DeleteSchedule) GetStartDate() *timestamp.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *DeleteSchedule) GetEndDate() *timestamp.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *DeleteSchedule) GetQuota() string {
	if x != nil {
		return x.Quota
	}
	return ""
}

func (x *DeleteSchedule) GetDurations() string {
	if x != nil {
		return x.Durations
	}
	return ""
}

func (x *DeleteSchedule) GetMinQuota() string {
	if x != nil {
		return x.MinQuota
	}
	return ""
}

func (x *DeleteSchedule) GetMaxQuota() string {
	if x != nil {
		return x.MaxQuota
	}
	return ""
}

func (x *DeleteSchedule) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *DeleteSchedule) GetIsBooked() bool {
	if x != nil {
		return x.IsBooked
	}
	return false
}

type DeleteScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *DeleteSchedule `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteScheduleResponse) Reset() {
	*x = DeleteScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScheduleResponse) ProtoMessage() {}

func (x *DeleteScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScheduleResponse.ProtoReflect.Descriptor instead.
func (*DeleteScheduleResponse) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteScheduleResponse) GetData() *DeleteSchedule {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteAddon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddonId string `protobuf:"bytes,1,opt,name=addon_id,json=addonId,proto3" json:"addon_id,omitempty"`
	TourId  string `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Addon   string `protobuf:"bytes,3,opt,name=addon,proto3" json:"addon,omitempty"`
	Price   string `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *DeleteAddon) Reset() {
	*x = DeleteAddon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAddon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAddon) ProtoMessage() {}

func (x *DeleteAddon) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAddon.ProtoReflect.Descriptor instead.
func (*DeleteAddon) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteAddon) GetAddonId() string {
	if x != nil {
		return x.AddonId
	}
	return ""
}

func (x *DeleteAddon) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *DeleteAddon) GetAddon() string {
	if x != nil {
		return x.Addon
	}
	return ""
}

func (x *DeleteAddon) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

type DeleteAddonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *DeleteAddon `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteAddonResponse) Reset() {
	*x = DeleteAddonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAddonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAddonResponse) ProtoMessage() {}

func (x *DeleteAddonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAddonResponse.ProtoReflect.Descriptor instead.
func (*DeleteAddonResponse) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteAddonResponse) GetData() *DeleteAddon {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId string `protobuf:"bytes,1,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Type    string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	TourId  string `protobuf:"bytes,4,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
}

func (x *DeleteMedia) Reset() {
	*x = DeleteMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMedia) ProtoMessage() {}

func (x *DeleteMedia) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMedia.ProtoReflect.Descriptor instead.
func (*DeleteMedia) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteMedia) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *DeleteMedia) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DeleteMedia) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DeleteMedia) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

type DeleteMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *DeleteMedia `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteMediaResponse) Reset() {
	*x = DeleteMediaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMediaResponse) ProtoMessage() {}

func (x *DeleteMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMediaResponse.ProtoReflect.Descriptor instead.
func (*DeleteMediaResponse) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteMediaResponse) GetData() *DeleteMedia {
	if x != nil {
		return x.Data
	}
	return nil
}

type CategoryListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PackageCategory `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CategoryListResponse) Reset() {
	*x = CategoryListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryListResponse) ProtoMessage() {}

func (x *CategoryListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryListResponse.ProtoReflect.Descriptor instead.
func (*CategoryListResponse) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{39}
}

func (x *CategoryListResponse) GetData() []*PackageCategory {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddWishListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourId   string `protobuf:"bytes,1,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Title    string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Price    string `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	Location string `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Rate     string `protobuf:"bytes,5,opt,name=rate,proto3" json:"rate,omitempty"`
	UserUid  string `protobuf:"bytes,6,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
}

func (x *AddWishListRequest) Reset() {
	*x = AddWishListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddWishListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWishListRequest) ProtoMessage() {}

func (x *AddWishListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWishListRequest.ProtoReflect.Descriptor instead.
func (*AddWishListRequest) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{40}
}

func (x *AddWishListRequest) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *AddWishListRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AddWishListRequest) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *AddWishListRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *AddWishListRequest) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *AddWishListRequest) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

type AddWishListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *AddWishListRequest `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Code  int32               `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Title string              `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *AddWishListResponse) Reset() {
	*x = AddWishListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddWishListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWishListResponse) ProtoMessage() {}

func (x *AddWishListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWishListResponse.ProtoReflect.Descriptor instead.
func (*AddWishListResponse) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{41}
}

func (x *AddWishListResponse) GetData() *AddWishListRequest {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AddWishListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddWishListResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type WishListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*AddWishListRequest `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *WishListResponse) Reset() {
	*x = WishListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WishListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WishListResponse) ProtoMessage() {}

func (x *WishListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WishListResponse.ProtoReflect.Descriptor instead.
func (*WishListResponse) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{42}
}

func (x *WishListResponse) GetData() []*AddWishListRequest {
	if x != nil {
		return x.Data
	}
	return nil
}

type RequestDetailPriceByParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceId          string `protobuf:"bytes,1,opt,name=price_id,json=priceId,proto3" json:"price_id,omitempty"`
	TourId           string `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	MinParticipant   string `protobuf:"bytes,3,opt,name=min_participant,json=minParticipant,proto3" json:"min_participant,omitempty"`
	MaxParticipant   string `protobuf:"bytes,4,opt,name=max_participant,json=maxParticipant,proto3" json:"max_participant,omitempty"`
	Price            string `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
	KidPrice         string `protobuf:"bytes,7,opt,name=kid_price,json=kidPrice,proto3" json:"kid_price,omitempty"`
	MinKidAge        string `protobuf:"bytes,8,opt,name=min_kid_age,json=minKidAge,proto3" json:"min_kid_age,omitempty"`
	MaxKidAge        string `protobuf:"bytes,9,opt,name=max_kid_age,json=maxKidAge,proto3" json:"max_kid_age,omitempty"`
	AdultParticipant string `protobuf:"bytes,10,opt,name=adult_participant,json=adultParticipant,proto3" json:"adult_participant,omitempty"`
	KidParticipant   string `protobuf:"bytes,11,opt,name=kid_participant,json=kidParticipant,proto3" json:"kid_participant,omitempty"`
}

func (x *RequestDetailPriceByParticipant) Reset() {
	*x = RequestDetailPriceByParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestDetailPriceByParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDetailPriceByParticipant) ProtoMessage() {}

func (x *RequestDetailPriceByParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDetailPriceByParticipant.ProtoReflect.Descriptor instead.
func (*RequestDetailPriceByParticipant) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{43}
}

func (x *RequestDetailPriceByParticipant) GetPriceId() string {
	if x != nil {
		return x.PriceId
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetMinParticipant() string {
	if x != nil {
		return x.MinParticipant
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetMaxParticipant() string {
	if x != nil {
		return x.MaxParticipant
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetKidPrice() string {
	if x != nil {
		return x.KidPrice
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetMinKidAge() string {
	if x != nil {
		return x.MinKidAge
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetMaxKidAge() string {
	if x != nil {
		return x.MaxKidAge
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetAdultParticipant() string {
	if x != nil {
		return x.AdultParticipant
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetKidParticipant() string {
	if x != nil {
		return x.KidParticipant
	}
	return ""
}

type ResponseDetailPriceByParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceId               string `protobuf:"bytes,1,opt,name=price_id,json=priceId,proto3" json:"price_id,omitempty"`
	TourId                string `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	MinParticipant        string `protobuf:"bytes,3,opt,name=min_participant,json=minParticipant,proto3" json:"min_participant,omitempty"`
	MaxParticipant        string `protobuf:"bytes,4,opt,name=max_participant,json=maxParticipant,proto3" json:"max_participant,omitempty"`
	Price                 string `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
	KidPrice              string `protobuf:"bytes,7,opt,name=kid_price,json=kidPrice,proto3" json:"kid_price,omitempty"`
	MinKidAge             string `protobuf:"bytes,8,opt,name=min_kid_age,json=minKidAge,proto3" json:"min_kid_age,omitempty"`
	MaxKidAge             string `protobuf:"bytes,9,opt,name=max_kid_age,json=maxKidAge,proto3" json:"max_kid_age,omitempty"`
	AdultParticipant      string `protobuf:"bytes,10,opt,name=adult_participant,json=adultParticipant,proto3" json:"adult_participant,omitempty"`
	KidParticipant        string `protobuf:"bytes,11,opt,name=kid_participant,json=kidParticipant,proto3" json:"kid_participant,omitempty"`
	TotalParticipant      string `protobuf:"bytes,12,opt,name=total_participant,json=totalParticipant,proto3" json:"total_participant,omitempty"`
	TotalAdultPrice       string `protobuf:"bytes,13,opt,name=total_adult_price,json=totalAdultPrice,proto3" json:"total_adult_price,omitempty"`
	TotalKidPrice         string `protobuf:"bytes,14,opt,name=total_kid_price,json=totalKidPrice,proto3" json:"total_kid_price,omitempty"`
	TotalPriceParticipant string `protobuf:"bytes,15,opt,name=total_price_participant,json=totalPriceParticipant,proto3" json:"total_price_participant,omitempty"`
}

func (x *ResponseDetailPriceByParticipant) Reset() {
	*x = ResponseDetailPriceByParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_tourpackage_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseDetailPriceByParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseDetailPriceByParticipant) ProtoMessage() {}

func (x *ResponseDetailPriceByParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_pb_tourpackage_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseDetailPriceByParticipant.ProtoReflect.Descriptor instead.
func (*ResponseDetailPriceByParticipant) Descriptor() ([]byte, []int) {
	return file_pb_tourpackage_proto_rawDescGZIP(), []int{44}
}

func (x *ResponseDetailPriceByParticipant) GetPriceId() string {
	if x != nil {
		return x.PriceId
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetMinParticipant() string {
	if x != nil {
		return x.MinParticipant
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetMaxParticipant() string {
	if x != nil {
		return x.MaxParticipant
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetKidPrice() string {
	if x != nil {
		return x.KidPrice
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetMinKidAge() string {
	if x != nil {
		return x.MinKidAge
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetMaxKidAge() string {
	if x != nil {
		return x.MaxKidAge
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetAdultParticipant() string {
	if x != nil {
		return x.AdultParticipant
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetKidParticipant() string {
	if x != nil {
		return x.KidParticipant
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetTotalParticipant() string {
	if x != nil {
		return x.TotalParticipant
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetTotalAdultPrice() string {
	if x != nil {
		return x.TotalAdultPrice
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetTotalKidPrice() string {
	if x != nil {
		return x.TotalKidPrice
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetTotalPriceParticipant() string {
	if x != nil {
		return x.TotalPriceParticipant
	}
	return ""
}

var File_pb_tourpackage_proto protoreflect.FileDescriptor

var file_pb_tourpackage_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x62, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xcc, 0x07, 0x0a, 0x0b, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x06, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x31,
	0x0a, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x31, 0x0a, 0x06,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x73,
	0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x66,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x47,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x74, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x72,
	0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x74, 0x69, 0x6e, 0x65, 0x72, 0x61,
	0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x91, 0x06, 0x0a, 0x08, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x20, 0x0a,
	0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x73, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x98, 0x07, 0x0a, 0x12, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x3a,
	0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x63, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x43, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x72,
	0x6d, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x5f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f,
	0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x74, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x72, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x74, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74,
	0x22, 0x73, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x43, 0x0a, 0x13, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x49, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x42, 0x0a, 0x12, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x31, 0x0a, 0x0f, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x0a,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x47,
	0x0a, 0x17, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x68, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49,
	0x64, 0x22, 0xa3, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x43, 0x0a, 0x12, 0x42, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x2d, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x14,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xe5, 0x02, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x22, 0xc8, 0x03, 0x0a, 0x15, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x40, 0x0a, 0x0f, 0x42, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x46, 0x0a, 0x12, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xbb, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x69, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x65,
	0x64, 0x22, 0x6e, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x22, 0x60, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f,
	0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75,
	0x72, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x22, 0x3b, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x22, 0x3d, 0x0a, 0x10, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x44, 0x0a, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x87, 0x02, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d,
	0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x61, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x6b, 0x69, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4b, 0x69, 0x64, 0x41, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x69, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4b, 0x69, 0x64, 0x41, 0x67, 0x65,
	0x22, 0xee, 0x02, 0x0a, 0x16, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x69, 0x64, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x69, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x6b, 0x69, 0x64, 0x5f,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4b, 0x69,
	0x64, 0x41, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x69, 0x64, 0x5f,
	0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4b, 0x69,
	0x64, 0x41, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0x44, 0x0a, 0x13, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a, 0x11, 0x42, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6c, 0x0a, 0x0d,
	0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x84, 0x02, 0x0a, 0x15, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x73, 0x68,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69,
	0x64, 0x22, 0xe4, 0x02, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x22, 0x49, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x6d, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x22, 0x43, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x67, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64,
	0x22, 0x43, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x48, 0x0a, 0x14, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xa4, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0x74, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x57, 0x69, 0x73,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x57, 0x69, 0x73,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x47, 0x0a, 0x10,
	0x57, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x57, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf0, 0x02, 0x0a, 0x1f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x69, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x6b, 0x69, 0x64, 0x5f, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4b, 0x69, 0x64, 0x41,
	0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x69, 0x64, 0x5f, 0x61, 0x67,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4b, 0x69, 0x64, 0x41,
	0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x64, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x6b, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x69, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0xaa, 0x04, 0x0a, 0x20, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x69, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x69,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x6b, 0x69,
	0x64, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x6e,
	0x4b, 0x69, 0x64, 0x41, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x69,
	0x64, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x4b, 0x69, 0x64, 0x41, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x69,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x75, 0x6c, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6b,
	0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4b, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x32, 0xd0, 0x09, 0x0a, 0x12, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x84, 0x01, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x1a, 0x20, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x74, 0x6f, 0x75,
	0x72, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x3a, 0x01, 0x2a, 0x12, 0x79, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75,
	0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x1a, 0x22, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x6a,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f,
	0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x7a, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x1a, 0x20, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x6f,
	0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x42, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e,
	0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x1a, 0x1e, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75,
	0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x62, 0x79, 0x2d, 0x74, 0x6f, 0x75,
	0x72, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0x91, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x1a, 0x1e, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x22, 0x36, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f,
	0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x42, 0x79, 0x48,
	0x6f, 0x73, 0x74, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x1a,
	0x20, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f,
	0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f,
	0x7b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x79, 0x2d, 0x74, 0x6f, 0x75,
	0x72, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0x8b, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x1a, 0x1d, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75,
	0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2d, 0x74, 0x6f, 0x75, 0x72, 0x68,
	0x6f, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x87,
	0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x23, 0x32, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x6f, 0x75,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x32, 0xaa, 0x02, 0x0a, 0x0f, 0x57, 0x69, 0x73,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x90, 0x01, 0x0a,
	0x0b, 0x41, 0x64, 0x64, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x57, 0x69,
	0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x57,
	0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x74,
	0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x69, 0x73, 0x68, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12,
	0x83, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x22, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x73, 0x68, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x2f, 0x77, 0x69, 0x73, 0x68, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x75, 0x69, 0x64, 0x7d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_tourpackage_proto_rawDescOnce sync.Once
	file_pb_tourpackage_proto_rawDescData = file_pb_tourpackage_proto_rawDesc
)

func file_pb_tourpackage_proto_rawDescGZIP() []byte {
	file_pb_tourpackage_proto_rawDescOnce.Do(func() {
		file_pb_tourpackage_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_tourpackage_proto_rawDescData)
	})
	return file_pb_tourpackage_proto_rawDescData
}

var file_pb_tourpackage_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_pb_tourpackage_proto_goTypes = []interface{}{
	(*TourPackage)(nil),                      // 0: tourpackage.TourPackage
	(*TourHost)(nil),                         // 1: tourpackage.TourHost
	(*TourPackageRequest)(nil),               // 2: tourpackage.TourPackageRequest
	(*CreateTourPackageResponse)(nil),        // 3: tourpackage.CreateTourPackageResponse
	(*TourPackageResponse)(nil),              // 4: tourpackage.TourPackageResponse
	(*UpdateTourPackageResponse)(nil),        // 5: tourpackage.UpdateTourPackageResponse
	(*PackageTagResponse)(nil),               // 6: tourpackage.PackageTagResponse
	(*PackageCategory)(nil),                  // 7: tourpackage.PackageCategory
	(*PackageTag)(nil),                       // 8: tourpackage.PackageTag
	(*PackageCategoryResponse)(nil),          // 9: tourpackage.PackageCategoryResponse
	(*PackageMedia)(nil),                     // 10: tourpackage.PackageMedia
	(*PackageMediaBrowseRequest)(nil),        // 11: tourpackage.PackageMediaBrowseRequest
	(*BrowsePackageMedia)(nil),               // 12: tourpackage.BrowsePackageMedia
	(*PackageMediaResponse)(nil),             // 13: tourpackage.PackageMediaResponse
	(*PackageSchedule)(nil),                  // 14: tourpackage.PackageSchedule
	(*ScheduleBrowseRequest)(nil),            // 15: tourpackage.ScheduleBrowseRequest
	(*AddOnBrowseRequest)(nil),               // 16: tourpackage.AddOnBrowseRequest
	(*BrowseTourAddon)(nil),                  // 17: tourpackage.BrowseTourAddon
	(*BrowseTourSchedule)(nil),               // 18: tourpackage.BrowseTourSchedule
	(*PackageScheduleResponse)(nil),          // 19: tourpackage.PackageScheduleResponse
	(*PackageAddon)(nil),                     // 20: tourpackage.PackageAddon
	(*CustomPolicy)(nil),                     // 21: tourpackage.CustomPolicy
	(*DeletePackageResponse)(nil),            // 22: tourpackage.DeletePackageResponse
	(*GeneralResponse)(nil),                  // 23: tourpackage.GeneralResponse
	(*TourHostResponse)(nil),                 // 24: tourpackage.TourHostResponse
	(*PackageAddonResponse)(nil),             // 25: tourpackage.PackageAddonResponse
	(*PackagePrice)(nil),                     // 26: tourpackage.PackagePrice
	(*PriceListBrowseRequest)(nil),           // 27: tourpackage.PriceListBrowseRequest
	(*BrowseTourPriceList)(nil),              // 28: tourpackage.BrowseTourPriceList
	(*BrowseTourPackage)(nil),                // 29: tourpackage.BrowseTourPackage
	(*Filter)(nil),                           // 30: tourpackage.Filter
	(*BrowseRequest)(nil),                    // 31: tourpackage.BrowseRequest
	(*BrowseRequestWishList)(nil),            // 32: tourpackage.BrowseRequestWishList
	(*DeleteSchedule)(nil),                   // 33: tourpackage.DeleteSchedule
	(*DeleteScheduleResponse)(nil),           // 34: tourpackage.DeleteScheduleResponse
	(*DeleteAddon)(nil),                      // 35: tourpackage.DeleteAddon
	(*DeleteAddonResponse)(nil),              // 36: tourpackage.DeleteAddonResponse
	(*DeleteMedia)(nil),                      // 37: tourpackage.DeleteMedia
	(*DeleteMediaResponse)(nil),              // 38: tourpackage.DeleteMediaResponse
	(*CategoryListResponse)(nil),             // 39: tourpackage.CategoryListResponse
	(*AddWishListRequest)(nil),               // 40: tourpackage.AddWishListRequest
	(*AddWishListResponse)(nil),              // 41: tourpackage.AddWishListResponse
	(*WishListResponse)(nil),                 // 42: tourpackage.WishListResponse
	(*RequestDetailPriceByParticipant)(nil),  // 43: tourpackage.RequestDetailPriceByParticipant
	(*ResponseDetailPriceByParticipant)(nil), // 44: tourpackage.ResponseDetailPriceByParticipant
	(*timestamp.Timestamp)(nil),              // 45: google.protobuf.Timestamp
}
var file_pb_tourpackage_proto_depIdxs = []int32{
	10, // 0: tourpackage.TourPackage.medias:type_name -> tourpackage.PackageMedia
	14, // 1: tourpackage.TourPackage.schedules:type_name -> tourpackage.PackageSchedule
	20, // 2: tourpackage.TourPackage.addons:type_name -> tourpackage.PackageAddon
	26, // 3: tourpackage.TourPackage.prices:type_name -> tourpackage.PackagePrice
	21, // 4: tourpackage.TourPackage.custom_policies:type_name -> tourpackage.CustomPolicy
	45, // 5: tourpackage.TourPackage.created_at:type_name -> google.protobuf.Timestamp
	45, // 6: tourpackage.TourHost.date_of_birth:type_name -> google.protobuf.Timestamp
	45, // 7: tourpackage.TourHost.created_at:type_name -> google.protobuf.Timestamp
	10, // 8: tourpackage.TourPackageRequest.medias:type_name -> tourpackage.PackageMedia
	14, // 9: tourpackage.TourPackageRequest.schedules:type_name -> tourpackage.PackageSchedule
	20, // 10: tourpackage.TourPackageRequest.addons:type_name -> tourpackage.PackageAddon
	26, // 11: tourpackage.TourPackageRequest.prices:type_name -> tourpackage.PackagePrice
	21, // 12: tourpackage.TourPackageRequest.custom_policies:type_name -> tourpackage.CustomPolicy
	0,  // 13: tourpackage.CreateTourPackageResponse.data:type_name -> tourpackage.TourPackage
	0,  // 14: tourpackage.TourPackageResponse.data:type_name -> tourpackage.TourPackage
	0,  // 15: tourpackage.UpdateTourPackageResponse.data:type_name -> tourpackage.TourPackage
	0,  // 16: tourpackage.PackageTagResponse.data:type_name -> tourpackage.TourPackage
	0,  // 17: tourpackage.PackageCategoryResponse.data:type_name -> tourpackage.TourPackage
	10, // 18: tourpackage.BrowsePackageMedia.data:type_name -> tourpackage.PackageMedia
	0,  // 19: tourpackage.PackageMediaResponse.data:type_name -> tourpackage.TourPackage
	45, // 20: tourpackage.PackageSchedule.start_date:type_name -> google.protobuf.Timestamp
	45, // 21: tourpackage.PackageSchedule.end_date:type_name -> google.protobuf.Timestamp
	45, // 22: tourpackage.ScheduleBrowseRequest.start_date:type_name -> google.protobuf.Timestamp
	45, // 23: tourpackage.ScheduleBrowseRequest.end_date:type_name -> google.protobuf.Timestamp
	30, // 24: tourpackage.ScheduleBrowseRequest.filters:type_name -> tourpackage.Filter
	30, // 25: tourpackage.AddOnBrowseRequest.filters:type_name -> tourpackage.Filter
	20, // 26: tourpackage.BrowseTourAddon.data:type_name -> tourpackage.PackageAddon
	14, // 27: tourpackage.BrowseTourSchedule.data:type_name -> tourpackage.PackageSchedule
	0,  // 28: tourpackage.PackageScheduleResponse.data:type_name -> tourpackage.TourPackage
	0,  // 29: tourpackage.DeletePackageResponse.data:type_name -> tourpackage.TourPackage
	1,  // 30: tourpackage.TourHostResponse.data:type_name -> tourpackage.TourHost
	0,  // 31: tourpackage.PackageAddonResponse.data:type_name -> tourpackage.TourPackage
	30, // 32: tourpackage.PriceListBrowseRequest.filters:type_name -> tourpackage.Filter
	26, // 33: tourpackage.BrowseTourPriceList.data:type_name -> tourpackage.PackagePrice
	0,  // 34: tourpackage.BrowseTourPackage.data:type_name -> tourpackage.TourPackage
	30, // 35: tourpackage.BrowseRequest.filters:type_name -> tourpackage.Filter
	30, // 36: tourpackage.BrowseRequestWishList.filters:type_name -> tourpackage.Filter
	45, // 37: tourpackage.DeleteSchedule.start_date:type_name -> google.protobuf.Timestamp
	45, // 38: tourpackage.DeleteSchedule.end_date:type_name -> google.protobuf.Timestamp
	33, // 39: tourpackage.DeleteScheduleResponse.data:type_name -> tourpackage.DeleteSchedule
	35, // 40: tourpackage.DeleteAddonResponse.data:type_name -> tourpackage.DeleteAddon
	37, // 41: tourpackage.DeleteMediaResponse.data:type_name -> tourpackage.DeleteMedia
	7,  // 42: tourpackage.CategoryListResponse.data:type_name -> tourpackage.PackageCategory
	40, // 43: tourpackage.AddWishListResponse.data:type_name -> tourpackage.AddWishListRequest
	40, // 44: tourpackage.WishListResponse.data:type_name -> tourpackage.AddWishListRequest
	0,  // 45: tourpackage.TourPackageService.CreateTourPackage:input_type -> tourpackage.TourPackage
	0,  // 46: tourpackage.TourPackageService.DeleteTourPackage:input_type -> tourpackage.TourPackage
	31, // 47: tourpackage.TourPackageService.GetTourPackage:input_type -> tourpackage.BrowseRequest
	0,  // 48: tourpackage.TourPackageService.GetDetailTourPackage:input_type -> tourpackage.TourPackage
	0,  // 49: tourpackage.TourPackageService.GetTourPackageByHostID:input_type -> tourpackage.TourPackage
	0,  // 50: tourpackage.TourPackageService.GetTourPackageRecommendations:input_type -> tourpackage.TourPackage
	0,  // 51: tourpackage.TourPackageService.GetDetailTourPackageByHostID:input_type -> tourpackage.TourPackage
	0,  // 52: tourpackage.TourPackageService.GetDetailHost:input_type -> tourpackage.TourPackage
	2,  // 53: tourpackage.TourPackageService.UpdateTourPackage:input_type -> tourpackage.TourPackageRequest
	40, // 54: tourpackage.WishListService.AddWishList:input_type -> tourpackage.AddWishListRequest
	32, // 55: tourpackage.WishListService.GetWishList:input_type -> tourpackage.BrowseRequestWishList
	4,  // 56: tourpackage.TourPackageService.CreateTourPackage:output_type -> tourpackage.TourPackageResponse
	22, // 57: tourpackage.TourPackageService.DeleteTourPackage:output_type -> tourpackage.DeletePackageResponse
	29, // 58: tourpackage.TourPackageService.GetTourPackage:output_type -> tourpackage.BrowseTourPackage
	4,  // 59: tourpackage.TourPackageService.GetDetailTourPackage:output_type -> tourpackage.TourPackageResponse
	29, // 60: tourpackage.TourPackageService.GetTourPackageByHostID:output_type -> tourpackage.BrowseTourPackage
	29, // 61: tourpackage.TourPackageService.GetTourPackageRecommendations:output_type -> tourpackage.BrowseTourPackage
	4,  // 62: tourpackage.TourPackageService.GetDetailTourPackageByHostID:output_type -> tourpackage.TourPackageResponse
	24, // 63: tourpackage.TourPackageService.GetDetailHost:output_type -> tourpackage.TourHostResponse
	5,  // 64: tourpackage.TourPackageService.UpdateTourPackage:output_type -> tourpackage.UpdateTourPackageResponse
	41, // 65: tourpackage.WishListService.AddWishList:output_type -> tourpackage.AddWishListResponse
	42, // 66: tourpackage.WishListService.GetWishList:output_type -> tourpackage.WishListResponse
	56, // [56:67] is the sub-list for method output_type
	45, // [45:56] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_pb_tourpackage_proto_init() }
func file_pb_tourpackage_proto_init() {
	if File_pb_tourpackage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_tourpackage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TourPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TourHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TourPackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTourPackageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TourPackageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTourPackageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageCategoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageMediaBrowseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowsePackageMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageMediaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleBrowseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOnBrowseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowseTourAddon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowseTourSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageAddon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePackageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TourHostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageAddonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceListBrowseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowseTourPriceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowseTourPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowseRequestWishList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAddon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAddonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMediaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddWishListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddWishListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WishListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestDetailPriceByParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_tourpackage_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseDetailPriceByParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_tourpackage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_pb_tourpackage_proto_goTypes,
		DependencyIndexes: file_pb_tourpackage_proto_depIdxs,
		MessageInfos:      file_pb_tourpackage_proto_msgTypes,
	}.Build()
	File_pb_tourpackage_proto = out.File
	file_pb_tourpackage_proto_rawDesc = nil
	file_pb_tourpackage_proto_goTypes = nil
	file_pb_tourpackage_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TourPackageServiceClient is the client API for TourPackageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TourPackageServiceClient interface {
	CreateTourPackage(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*TourPackageResponse, error)
	DeleteTourPackage(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*DeletePackageResponse, error)
	GetTourPackage(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*BrowseTourPackage, error)
	GetDetailTourPackage(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*TourPackageResponse, error)
	GetTourPackageByHostID(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*BrowseTourPackage, error)
	GetTourPackageRecommendations(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*BrowseTourPackage, error)
	GetDetailTourPackageByHostID(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*TourPackageResponse, error)
	GetDetailHost(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*TourHostResponse, error)
	UpdateTourPackage(ctx context.Context, in *TourPackageRequest, opts ...grpc.CallOption) (*UpdateTourPackageResponse, error)
}

type tourPackageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTourPackageServiceClient(cc grpc.ClientConnInterface) TourPackageServiceClient {
	return &tourPackageServiceClient{cc}
}

func (c *tourPackageServiceClient) CreateTourPackage(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*TourPackageResponse, error) {
	out := new(TourPackageResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/CreateTourPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) DeleteTourPackage(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*DeletePackageResponse, error) {
	out := new(DeletePackageResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/DeleteTourPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) GetTourPackage(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*BrowseTourPackage, error) {
	out := new(BrowseTourPackage)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/GetTourPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) GetDetailTourPackage(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*TourPackageResponse, error) {
	out := new(TourPackageResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/GetDetailTourPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) GetTourPackageByHostID(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*BrowseTourPackage, error) {
	out := new(BrowseTourPackage)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/GetTourPackageByHostID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) GetTourPackageRecommendations(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*BrowseTourPackage, error) {
	out := new(BrowseTourPackage)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/GetTourPackageRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) GetDetailTourPackageByHostID(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*TourPackageResponse, error) {
	out := new(TourPackageResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/GetDetailTourPackageByHostID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) GetDetailHost(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*TourHostResponse, error) {
	out := new(TourHostResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/GetDetailHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) UpdateTourPackage(ctx context.Context, in *TourPackageRequest, opts ...grpc.CallOption) (*UpdateTourPackageResponse, error) {
	out := new(UpdateTourPackageResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/UpdateTourPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TourPackageServiceServer is the server API for TourPackageService service.
type TourPackageServiceServer interface {
	CreateTourPackage(context.Context, *TourPackage) (*TourPackageResponse, error)
	DeleteTourPackage(context.Context, *TourPackage) (*DeletePackageResponse, error)
	GetTourPackage(context.Context, *BrowseRequest) (*BrowseTourPackage, error)
	GetDetailTourPackage(context.Context, *TourPackage) (*TourPackageResponse, error)
	GetTourPackageByHostID(context.Context, *TourPackage) (*BrowseTourPackage, error)
	GetTourPackageRecommendations(context.Context, *TourPackage) (*BrowseTourPackage, error)
	GetDetailTourPackageByHostID(context.Context, *TourPackage) (*TourPackageResponse, error)
	GetDetailHost(context.Context, *TourPackage) (*TourHostResponse, error)
	UpdateTourPackage(context.Context, *TourPackageRequest) (*UpdateTourPackageResponse, error)
}

// UnimplementedTourPackageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTourPackageServiceServer struct {
}

func (*UnimplementedTourPackageServiceServer) CreateTourPackage(context.Context, *TourPackage) (*TourPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTourPackage not implemented")
}
func (*UnimplementedTourPackageServiceServer) DeleteTourPackage(context.Context, *TourPackage) (*DeletePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTourPackage not implemented")
}
func (*UnimplementedTourPackageServiceServer) GetTourPackage(context.Context, *BrowseRequest) (*BrowseTourPackage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTourPackage not implemented")
}
func (*UnimplementedTourPackageServiceServer) GetDetailTourPackage(context.Context, *TourPackage) (*TourPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailTourPackage not implemented")
}
func (*UnimplementedTourPackageServiceServer) GetTourPackageByHostID(context.Context, *TourPackage) (*BrowseTourPackage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTourPackageByHostID not implemented")
}
func (*UnimplementedTourPackageServiceServer) GetTourPackageRecommendations(context.Context, *TourPackage) (*BrowseTourPackage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTourPackageRecommendations not implemented")
}
func (*UnimplementedTourPackageServiceServer) GetDetailTourPackageByHostID(context.Context, *TourPackage) (*TourPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailTourPackageByHostID not implemented")
}
func (*UnimplementedTourPackageServiceServer) GetDetailHost(context.Context, *TourPackage) (*TourHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailHost not implemented")
}
func (*UnimplementedTourPackageServiceServer) UpdateTourPackage(context.Context, *TourPackageRequest) (*UpdateTourPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTourPackage not implemented")
}

func RegisterTourPackageServiceServer(s *grpc.Server, srv TourPackageServiceServer) {
	s.RegisterService(&_TourPackageService_serviceDesc, srv)
}

func _TourPackageService_CreateTourPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).CreateTourPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/CreateTourPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).CreateTourPackage(ctx, req.(*TourPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_DeleteTourPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).DeleteTourPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/DeleteTourPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).DeleteTourPackage(ctx, req.(*TourPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_GetTourPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).GetTourPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/GetTourPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).GetTourPackage(ctx, req.(*BrowseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_GetDetailTourPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).GetDetailTourPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/GetDetailTourPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).GetDetailTourPackage(ctx, req.(*TourPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_GetTourPackageByHostID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).GetTourPackageByHostID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/GetTourPackageByHostID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).GetTourPackageByHostID(ctx, req.(*TourPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_GetTourPackageRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).GetTourPackageRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/GetTourPackageRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).GetTourPackageRecommendations(ctx, req.(*TourPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_GetDetailTourPackageByHostID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).GetDetailTourPackageByHostID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/GetDetailTourPackageByHostID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).GetDetailTourPackageByHostID(ctx, req.(*TourPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_GetDetailHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).GetDetailHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/GetDetailHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).GetDetailHost(ctx, req.(*TourPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_UpdateTourPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).UpdateTourPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/UpdateTourPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).UpdateTourPackage(ctx, req.(*TourPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TourPackageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tourpackage.TourPackageService",
	HandlerType: (*TourPackageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTourPackage",
			Handler:    _TourPackageService_CreateTourPackage_Handler,
		},
		{
			MethodName: "DeleteTourPackage",
			Handler:    _TourPackageService_DeleteTourPackage_Handler,
		},
		{
			MethodName: "GetTourPackage",
			Handler:    _TourPackageService_GetTourPackage_Handler,
		},
		{
			MethodName: "GetDetailTourPackage",
			Handler:    _TourPackageService_GetDetailTourPackage_Handler,
		},
		{
			MethodName: "GetTourPackageByHostID",
			Handler:    _TourPackageService_GetTourPackageByHostID_Handler,
		},
		{
			MethodName: "GetTourPackageRecommendations",
			Handler:    _TourPackageService_GetTourPackageRecommendations_Handler,
		},
		{
			MethodName: "GetDetailTourPackageByHostID",
			Handler:    _TourPackageService_GetDetailTourPackageByHostID_Handler,
		},
		{
			MethodName: "GetDetailHost",
			Handler:    _TourPackageService_GetDetailHost_Handler,
		},
		{
			MethodName: "UpdateTourPackage",
			Handler:    _TourPackageService_UpdateTourPackage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/tourpackage.proto",
}

// WishListServiceClient is the client API for WishListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WishListServiceClient interface {
	AddWishList(ctx context.Context, in *AddWishListRequest, opts ...grpc.CallOption) (*AddWishListResponse, error)
	GetWishList(ctx context.Context, in *BrowseRequestWishList, opts ...grpc.CallOption) (*WishListResponse, error)
}

type wishListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWishListServiceClient(cc grpc.ClientConnInterface) WishListServiceClient {
	return &wishListServiceClient{cc}
}

func (c *wishListServiceClient) AddWishList(ctx context.Context, in *AddWishListRequest, opts ...grpc.CallOption) (*AddWishListResponse, error) {
	out := new(AddWishListResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.WishListService/AddWishList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishListServiceClient) GetWishList(ctx context.Context, in *BrowseRequestWishList, opts ...grpc.CallOption) (*WishListResponse, error) {
	out := new(WishListResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.WishListService/GetWishList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WishListServiceServer is the server API for WishListService service.
type WishListServiceServer interface {
	AddWishList(context.Context, *AddWishListRequest) (*AddWishListResponse, error)
	GetWishList(context.Context, *BrowseRequestWishList) (*WishListResponse, error)
}

// UnimplementedWishListServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWishListServiceServer struct {
}

func (*UnimplementedWishListServiceServer) AddWishList(context.Context, *AddWishListRequest) (*AddWishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWishList not implemented")
}
func (*UnimplementedWishListServiceServer) GetWishList(context.Context, *BrowseRequestWishList) (*WishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWishList not implemented")
}

func RegisterWishListServiceServer(s *grpc.Server, srv WishListServiceServer) {
	s.RegisterService(&_WishListService_serviceDesc, srv)
}

func _WishListService_AddWishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWishListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishListServiceServer).AddWishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.WishListService/AddWishList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishListServiceServer).AddWishList(ctx, req.(*AddWishListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishListService_GetWishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseRequestWishList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishListServiceServer).GetWishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.WishListService/GetWishList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishListServiceServer).GetWishList(ctx, req.(*BrowseRequestWishList))
	}
	return interceptor(ctx, in, info, handler)
}

var _WishListService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tourpackage.WishListService",
	HandlerType: (*WishListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddWishList",
			Handler:    _WishListService_AddWishList_Handler,
		},
		{
			MethodName: "GetWishList",
			Handler:    _WishListService_GetWishList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/tourpackage.proto",
}
