// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.1
// source: tourpackage.proto

package tourpackage

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TourPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourId      string             `protobuf:"bytes,1,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Title       string             `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Medias      []*PackageMedia    `protobuf:"bytes,3,rep,name=medias,proto3" json:"medias,omitempty"`
	Schedules   []*PackageSchedule `protobuf:"bytes,4,rep,name=schedules,proto3" json:"schedules,omitempty"`
	Description string             `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Categories  []string           `protobuf:"bytes,7,rep,name=categories,proto3" json:"categories,omitempty"`
	Tags        []string           `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	Location    string             `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
	// @inject_tag: json:"rate"
	Rate float64 `protobuf:"fixed64,10,opt,name=rate,proto3" json:"rate,omitempty"`
	// @inject_tag: json:"review"
	Review           float64                `protobuf:"fixed64,11,opt,name=review,proto3" json:"review,omitempty"`
	Addons           []*PackageAddon        `protobuf:"bytes,12,rep,name=addons,proto3" json:"addons,omitempty"`
	IsCurated        bool                   `protobuf:"varint,13,opt,name=is_curated,json=isCurated,proto3" json:"is_curated,omitempty"`
	IsFeatured       bool                   `protobuf:"varint,14,opt,name=is_featured,json=isFeatured,proto3" json:"is_featured,omitempty"`
	IsRefundable     bool                   `protobuf:"varint,15,opt,name=is_refundable,json=isRefundable,proto3" json:"is_refundable,omitempty"`
	HostId           string                 `protobuf:"bytes,16,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	TypeTour         string                 `protobuf:"bytes,17,opt,name=type_tour,json=typeTour,proto3" json:"type_tour,omitempty"`
	Prices           []*PackagePrice        `protobuf:"bytes,18,rep,name=prices,proto3" json:"prices,omitempty"`
	TermsOfService   string                 `protobuf:"bytes,19,opt,name=terms_of_service,json=termsOfService,proto3" json:"terms_of_service,omitempty"`
	CustomPolicies   []*CustomPolicy        `protobuf:"bytes,20,rep,name=custom_policies,json=customPolicies,proto3" json:"custom_policies,omitempty"`
	AgeRestriction   string                 `protobuf:"bytes,21,opt,name=age_restriction,json=ageRestriction,proto3" json:"age_restriction,omitempty"`
	CostForeignGuest string                 `protobuf:"bytes,22,opt,name=cost_foreign_guest,json=costForeignGuest,proto3" json:"cost_foreign_guest,omitempty"`
	Itinerary        string                 `protobuf:"bytes,23,opt,name=itinerary,proto3" json:"itinerary,omitempty"`
	PolicyTitle      string                 `protobuf:"bytes,24,opt,name=policy_title,json=policyTitle,proto3" json:"policy_title,omitempty"`
	Policy           string                 `protobuf:"bytes,25,opt,name=policy,proto3" json:"policy,omitempty"`
	AdditionalCost   *AdditionalCost        `protobuf:"bytes,26,opt,name=additional_cost,json=additionalCost,proto3" json:"additional_cost,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	DeleteStatus     bool                   `protobuf:"varint,28,opt,name=delete_status,json=deleteStatus,proto3" json:"delete_status,omitempty"`
	UserUid          string                 `protobuf:"bytes,29,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	HavePromotion    bool                   `protobuf:"varint,30,opt,name=have_promotion,json=havePromotion,proto3" json:"have_promotion,omitempty"`
	UpdateAt         *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	Insurance        *Insurance             `protobuf:"bytes,32,opt,name=insurance,proto3" json:"insurance,omitempty"`
}

func (x *TourPackage) Reset() {
	*x = TourPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TourPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourPackage) ProtoMessage() {}

func (x *TourPackage) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourPackage.ProtoReflect.Descriptor instead.
func (*TourPackage) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{0}
}

func (x *TourPackage) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *TourPackage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TourPackage) GetMedias() []*PackageMedia {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *TourPackage) GetSchedules() []*PackageSchedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *TourPackage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TourPackage) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *TourPackage) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TourPackage) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *TourPackage) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *TourPackage) GetReview() float64 {
	if x != nil {
		return x.Review
	}
	return 0
}

func (x *TourPackage) GetAddons() []*PackageAddon {
	if x != nil {
		return x.Addons
	}
	return nil
}

func (x *TourPackage) GetIsCurated() bool {
	if x != nil {
		return x.IsCurated
	}
	return false
}

func (x *TourPackage) GetIsFeatured() bool {
	if x != nil {
		return x.IsFeatured
	}
	return false
}

func (x *TourPackage) GetIsRefundable() bool {
	if x != nil {
		return x.IsRefundable
	}
	return false
}

func (x *TourPackage) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *TourPackage) GetTypeTour() string {
	if x != nil {
		return x.TypeTour
	}
	return ""
}

func (x *TourPackage) GetPrices() []*PackagePrice {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *TourPackage) GetTermsOfService() string {
	if x != nil {
		return x.TermsOfService
	}
	return ""
}

func (x *TourPackage) GetCustomPolicies() []*CustomPolicy {
	if x != nil {
		return x.CustomPolicies
	}
	return nil
}

func (x *TourPackage) GetAgeRestriction() string {
	if x != nil {
		return x.AgeRestriction
	}
	return ""
}

func (x *TourPackage) GetCostForeignGuest() string {
	if x != nil {
		return x.CostForeignGuest
	}
	return ""
}

func (x *TourPackage) GetItinerary() string {
	if x != nil {
		return x.Itinerary
	}
	return ""
}

func (x *TourPackage) GetPolicyTitle() string {
	if x != nil {
		return x.PolicyTitle
	}
	return ""
}

func (x *TourPackage) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *TourPackage) GetAdditionalCost() *AdditionalCost {
	if x != nil {
		return x.AdditionalCost
	}
	return nil
}

func (x *TourPackage) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TourPackage) GetDeleteStatus() bool {
	if x != nil {
		return x.DeleteStatus
	}
	return false
}

func (x *TourPackage) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *TourPackage) GetHavePromotion() bool {
	if x != nil {
		return x.HavePromotion
	}
	return false
}

func (x *TourPackage) GetUpdateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

func (x *TourPackage) GetInsurance() *Insurance {
	if x != nil {
		return x.Insurance
	}
	return nil
}

type TourHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId             string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	FirstName          string                 `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName           string                 `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Gender             string                 `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`
	PhoneNumber        string                 `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	DateOfBirth        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	Password           string                 `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	ProfilePictureUrl  string                 `protobuf:"bytes,8,opt,name=profile_picture_url,json=profilePictureUrl,proto3" json:"profile_picture_url,omitempty"`
	BusinessName       string                 `protobuf:"bytes,9,opt,name=business_name,json=businessName,proto3" json:"business_name,omitempty"`
	BusinessCategory   string                 `protobuf:"bytes,10,opt,name=business_category,json=businessCategory,proto3" json:"business_category,omitempty"`
	Address            string                 `protobuf:"bytes,11,opt,name=address,proto3" json:"address,omitempty"`
	BusinessAbout      string                 `protobuf:"bytes,12,opt,name=business_about,json=businessAbout,proto3" json:"business_about,omitempty"`
	CardIdType         string                 `protobuf:"bytes,13,opt,name=card_id_type,json=cardIdType,proto3" json:"card_id_type,omitempty"`
	CardId             string                 `protobuf:"bytes,14,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	PersonWithId       string                 `protobuf:"bytes,15,opt,name=person_with_id,json=personWithId,proto3" json:"person_with_id,omitempty"`
	BussinessIdType    string                 `protobuf:"bytes,16,opt,name=bussiness_id_type,json=bussinessIdType,proto3" json:"bussiness_id_type,omitempty"`
	BussinessId        string                 `protobuf:"bytes,17,opt,name=bussiness_id,json=bussinessId,proto3" json:"bussiness_id,omitempty"`
	IsVerified         bool                   `protobuf:"varint,18,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	AccountNumber      string                 `protobuf:"bytes,19,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	Balance            int32                  `protobuf:"varint,20,opt,name=balance,proto3" json:"balance,omitempty"`
	UserUid            string                 `protobuf:"bytes,21,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	Email              string                 `protobuf:"bytes,22,opt,name=email,proto3" json:"email,omitempty"`
	CardIdStatus       int32                  `protobuf:"varint,23,opt,name=card_id_status,json=cardIdStatus,proto3" json:"card_id_status,omitempty"`
	BussinessIdStatus  int32                  `protobuf:"varint,24,opt,name=bussiness_id_status,json=bussinessIdStatus,proto3" json:"bussiness_id_status,omitempty"`
	Nationality        string                 `protobuf:"bytes,25,opt,name=nationality,proto3" json:"nationality,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	VerifiedAt         *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=verified_at,json=verifiedAt,proto3" json:"verified_at,omitempty"`
	DeletedPermanently bool                   `protobuf:"varint,29,opt,name=deleted_permanently,json=deletedPermanently,proto3" json:"deleted_permanently,omitempty"`
	IsDeactivate       bool                   `protobuf:"varint,30,opt,name=is_deactivate,json=isDeactivate,proto3" json:"is_deactivate,omitempty"`
}

func (x *TourHost) Reset() {
	*x = TourHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TourHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourHost) ProtoMessage() {}

func (x *TourHost) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourHost.ProtoReflect.Descriptor instead.
func (*TourHost) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{1}
}

func (x *TourHost) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *TourHost) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *TourHost) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *TourHost) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *TourHost) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *TourHost) GetDateOfBirth() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfBirth
	}
	return nil
}

func (x *TourHost) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *TourHost) GetProfilePictureUrl() string {
	if x != nil {
		return x.ProfilePictureUrl
	}
	return ""
}

func (x *TourHost) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *TourHost) GetBusinessCategory() string {
	if x != nil {
		return x.BusinessCategory
	}
	return ""
}

func (x *TourHost) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TourHost) GetBusinessAbout() string {
	if x != nil {
		return x.BusinessAbout
	}
	return ""
}

func (x *TourHost) GetCardIdType() string {
	if x != nil {
		return x.CardIdType
	}
	return ""
}

func (x *TourHost) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *TourHost) GetPersonWithId() string {
	if x != nil {
		return x.PersonWithId
	}
	return ""
}

func (x *TourHost) GetBussinessIdType() string {
	if x != nil {
		return x.BussinessIdType
	}
	return ""
}

func (x *TourHost) GetBussinessId() string {
	if x != nil {
		return x.BussinessId
	}
	return ""
}

func (x *TourHost) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

func (x *TourHost) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *TourHost) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *TourHost) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *TourHost) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *TourHost) GetCardIdStatus() int32 {
	if x != nil {
		return x.CardIdStatus
	}
	return 0
}

func (x *TourHost) GetBussinessIdStatus() int32 {
	if x != nil {
		return x.BussinessIdStatus
	}
	return 0
}

func (x *TourHost) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *TourHost) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TourHost) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TourHost) GetVerifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VerifiedAt
	}
	return nil
}

func (x *TourHost) GetDeletedPermanently() bool {
	if x != nil {
		return x.DeletedPermanently
	}
	return false
}

func (x *TourHost) GetIsDeactivate() bool {
	if x != nil {
		return x.IsDeactivate
	}
	return false
}

type Insurance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	TourId      string `protobuf:"bytes,3,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
}

func (x *Insurance) Reset() {
	*x = Insurance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Insurance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Insurance) ProtoMessage() {}

func (x *Insurance) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Insurance.ProtoReflect.Descriptor instead.
func (*Insurance) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{2}
}

func (x *Insurance) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Insurance) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Insurance) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

type TourPackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourId           string             `protobuf:"bytes,1,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Title            string             `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Medias           []*PackageMedia    `protobuf:"bytes,3,rep,name=medias,proto3" json:"medias,omitempty"`
	Schedules        []*PackageSchedule `protobuf:"bytes,4,rep,name=schedules,proto3" json:"schedules,omitempty"`
	Description      string             `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Categories       []string           `protobuf:"bytes,7,rep,name=categories,proto3" json:"categories,omitempty"`
	Tags             []string           `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	Location         string             `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
	Rate             float64            `protobuf:"fixed64,10,opt,name=rate,proto3" json:"rate,omitempty"`
	Review           float64            `protobuf:"fixed64,11,opt,name=review,proto3" json:"review,omitempty"`
	Addons           []*PackageAddon    `protobuf:"bytes,12,rep,name=addons,proto3" json:"addons,omitempty"`
	IsCurated        bool               `protobuf:"varint,13,opt,name=is_curated,json=isCurated,proto3" json:"is_curated,omitempty"`
	IsFeatured       bool               `protobuf:"varint,14,opt,name=is_featured,json=isFeatured,proto3" json:"is_featured,omitempty"`
	IsRefundable     bool               `protobuf:"varint,15,opt,name=is_refundable,json=isRefundable,proto3" json:"is_refundable,omitempty"`
	HostId           string             `protobuf:"bytes,16,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	TypeTour         string             `protobuf:"bytes,17,opt,name=type_tour,json=typeTour,proto3" json:"type_tour,omitempty"`
	Prices           []*PackagePrice    `protobuf:"bytes,18,rep,name=prices,proto3" json:"prices,omitempty"`
	TermsOfService   string             `protobuf:"bytes,19,opt,name=terms_of_service,json=termsOfService,proto3" json:"terms_of_service,omitempty"`
	CustomPolicies   []*CustomPolicy    `protobuf:"bytes,20,rep,name=custom_policies,json=customPolicies,proto3" json:"custom_policies,omitempty"`
	AgeRestriction   string             `protobuf:"bytes,21,opt,name=age_restriction,json=ageRestriction,proto3" json:"age_restriction,omitempty"`
	CostForeignGuest string             `protobuf:"bytes,22,opt,name=cost_foreign_guest,json=costForeignGuest,proto3" json:"cost_foreign_guest,omitempty"`
	Itinerary        string             `protobuf:"bytes,23,opt,name=itinerary,proto3" json:"itinerary,omitempty"`
	PolicyTitle      string             `protobuf:"bytes,24,opt,name=policy_title,json=policyTitle,proto3" json:"policy_title,omitempty"`
	Policy           string             `protobuf:"bytes,25,opt,name=policy,proto3" json:"policy,omitempty"`
	AdditionalCost   *AdditionalCost    `protobuf:"bytes,26,opt,name=additional_cost,json=additionalCost,proto3" json:"additional_cost,omitempty"`
	Insurance        *Insurance         `protobuf:"bytes,27,opt,name=insurance,proto3" json:"insurance,omitempty"`
}

func (x *TourPackageRequest) Reset() {
	*x = TourPackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TourPackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourPackageRequest) ProtoMessage() {}

func (x *TourPackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourPackageRequest.ProtoReflect.Descriptor instead.
func (*TourPackageRequest) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{3}
}

func (x *TourPackageRequest) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *TourPackageRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TourPackageRequest) GetMedias() []*PackageMedia {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *TourPackageRequest) GetSchedules() []*PackageSchedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *TourPackageRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TourPackageRequest) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *TourPackageRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TourPackageRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *TourPackageRequest) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *TourPackageRequest) GetReview() float64 {
	if x != nil {
		return x.Review
	}
	return 0
}

func (x *TourPackageRequest) GetAddons() []*PackageAddon {
	if x != nil {
		return x.Addons
	}
	return nil
}

func (x *TourPackageRequest) GetIsCurated() bool {
	if x != nil {
		return x.IsCurated
	}
	return false
}

func (x *TourPackageRequest) GetIsFeatured() bool {
	if x != nil {
		return x.IsFeatured
	}
	return false
}

func (x *TourPackageRequest) GetIsRefundable() bool {
	if x != nil {
		return x.IsRefundable
	}
	return false
}

func (x *TourPackageRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *TourPackageRequest) GetTypeTour() string {
	if x != nil {
		return x.TypeTour
	}
	return ""
}

func (x *TourPackageRequest) GetPrices() []*PackagePrice {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *TourPackageRequest) GetTermsOfService() string {
	if x != nil {
		return x.TermsOfService
	}
	return ""
}

func (x *TourPackageRequest) GetCustomPolicies() []*CustomPolicy {
	if x != nil {
		return x.CustomPolicies
	}
	return nil
}

func (x *TourPackageRequest) GetAgeRestriction() string {
	if x != nil {
		return x.AgeRestriction
	}
	return ""
}

func (x *TourPackageRequest) GetCostForeignGuest() string {
	if x != nil {
		return x.CostForeignGuest
	}
	return ""
}

func (x *TourPackageRequest) GetItinerary() string {
	if x != nil {
		return x.Itinerary
	}
	return ""
}

func (x *TourPackageRequest) GetPolicyTitle() string {
	if x != nil {
		return x.PolicyTitle
	}
	return ""
}

func (x *TourPackageRequest) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *TourPackageRequest) GetAdditionalCost() *AdditionalCost {
	if x != nil {
		return x.AdditionalCost
	}
	return nil
}

func (x *TourPackageRequest) GetInsurance() *Insurance {
	if x != nil {
		return x.Insurance
	}
	return nil
}

type CreateTourPackageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string       `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data  *TourPackage `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateTourPackageResponse) Reset() {
	*x = CreateTourPackageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTourPackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTourPackageResponse) ProtoMessage() {}

func (x *CreateTourPackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTourPackageResponse.ProtoReflect.Descriptor instead.
func (*CreateTourPackageResponse) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTourPackageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateTourPackageResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateTourPackageResponse) GetData() *TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

type TourPackageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TourPackage `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TourPackageResponse) Reset() {
	*x = TourPackageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TourPackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourPackageResponse) ProtoMessage() {}

func (x *TourPackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourPackageResponse.ProtoReflect.Descriptor instead.
func (*TourPackageResponse) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{5}
}

func (x *TourPackageResponse) GetData() *TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateTourPackageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string       `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data  *TourPackage `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateTourPackageResponse) Reset() {
	*x = UpdateTourPackageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTourPackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTourPackageResponse) ProtoMessage() {}

func (x *UpdateTourPackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTourPackageResponse.ProtoReflect.Descriptor instead.
func (*UpdateTourPackageResponse) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateTourPackageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateTourPackageResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateTourPackageResponse) GetData() *TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

type PackageTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TourPackage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PackageTagResponse) Reset() {
	*x = PackageTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageTagResponse) ProtoMessage() {}

func (x *PackageTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageTagResponse.ProtoReflect.Descriptor instead.
func (*PackageTagResponse) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{7}
}

func (x *PackageTagResponse) GetData() *TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

type PackageCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []string `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *PackageCategory) Reset() {
	*x = PackageCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageCategory) ProtoMessage() {}

func (x *PackageCategory) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageCategory.ProtoReflect.Descriptor instead.
func (*PackageCategory) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{8}
}

func (x *PackageCategory) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

type PackageTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *PackageTag) Reset() {
	*x = PackageTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageTag) ProtoMessage() {}

func (x *PackageTag) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageTag.ProtoReflect.Descriptor instead.
func (*PackageTag) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{9}
}

func (x *PackageTag) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type PackageCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TourPackage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PackageCategoryResponse) Reset() {
	*x = PackageCategoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageCategoryResponse) ProtoMessage() {}

func (x *PackageCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageCategoryResponse.ProtoReflect.Descriptor instead.
func (*PackageCategoryResponse) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{10}
}

func (x *PackageCategoryResponse) GetData() *TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

type PackageMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId string `protobuf:"bytes,1,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Type    string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	TourId  string `protobuf:"bytes,4,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
}

func (x *PackageMedia) Reset() {
	*x = PackageMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageMedia) ProtoMessage() {}

func (x *PackageMedia) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageMedia.ProtoReflect.Descriptor instead.
func (*PackageMedia) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{11}
}

func (x *PackageMedia) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *PackageMedia) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PackageMedia) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PackageMedia) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

type PackageMediaBrowseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId string `protobuf:"bytes,1,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Type    string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	TourId  string `protobuf:"bytes,4,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Limit   int32  `protobuf:"varint,12,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,13,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *PackageMediaBrowseRequest) Reset() {
	*x = PackageMediaBrowseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageMediaBrowseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageMediaBrowseRequest) ProtoMessage() {}

func (x *PackageMediaBrowseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageMediaBrowseRequest.ProtoReflect.Descriptor instead.
func (*PackageMediaBrowseRequest) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{12}
}

func (x *PackageMediaBrowseRequest) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *PackageMediaBrowseRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PackageMediaBrowseRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PackageMediaBrowseRequest) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *PackageMediaBrowseRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PackageMediaBrowseRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type BrowsePackageMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PackageMedia `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BrowsePackageMedia) Reset() {
	*x = BrowsePackageMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowsePackageMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowsePackageMedia) ProtoMessage() {}

func (x *BrowsePackageMedia) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowsePackageMedia.ProtoReflect.Descriptor instead.
func (*BrowsePackageMedia) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{13}
}

func (x *BrowsePackageMedia) GetData() []*PackageMedia {
	if x != nil {
		return x.Data
	}
	return nil
}

type PackageMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TourPackage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PackageMediaResponse) Reset() {
	*x = PackageMediaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageMediaResponse) ProtoMessage() {}

func (x *PackageMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageMediaResponse.ProtoReflect.Descriptor instead.
func (*PackageMediaResponse) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{14}
}

func (x *PackageMediaResponse) GetData() *TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

type PackageSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId string                 `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	TourId     string                 `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Durations  string                 `protobuf:"bytes,3,opt,name=durations,proto3" json:"durations,omitempty"`
	StartDate  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Quota      string                 `protobuf:"bytes,6,opt,name=quota,proto3" json:"quota,omitempty"`
	IsActive   bool                   `protobuf:"varint,7,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	MinQuota   string                 `protobuf:"bytes,8,opt,name=min_quota,json=minQuota,proto3" json:"min_quota,omitempty"`
	MaxQuota   string                 `protobuf:"bytes,9,opt,name=max_quota,json=maxQuota,proto3" json:"max_quota,omitempty"`
	IsBooked   bool                   `protobuf:"varint,10,opt,name=is_booked,json=isBooked,proto3" json:"is_booked,omitempty"`
	TourStatus string                 `protobuf:"bytes,11,opt,name=tour_status,json=tourStatus,proto3" json:"tour_status,omitempty"`
	OnHold     string                 `protobuf:"bytes,12,opt,name=on_hold,json=onHold,proto3" json:"on_hold,omitempty"`
	OnholdDate *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=onhold_date,json=onholdDate,proto3" json:"onhold_date,omitempty"`
}

func (x *PackageSchedule) Reset() {
	*x = PackageSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageSchedule) ProtoMessage() {}

func (x *PackageSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageSchedule.ProtoReflect.Descriptor instead.
func (*PackageSchedule) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{15}
}

func (x *PackageSchedule) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *PackageSchedule) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *PackageSchedule) GetDurations() string {
	if x != nil {
		return x.Durations
	}
	return ""
}

func (x *PackageSchedule) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *PackageSchedule) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *PackageSchedule) GetQuota() string {
	if x != nil {
		return x.Quota
	}
	return ""
}

func (x *PackageSchedule) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *PackageSchedule) GetMinQuota() string {
	if x != nil {
		return x.MinQuota
	}
	return ""
}

func (x *PackageSchedule) GetMaxQuota() string {
	if x != nil {
		return x.MaxQuota
	}
	return ""
}

func (x *PackageSchedule) GetIsBooked() bool {
	if x != nil {
		return x.IsBooked
	}
	return false
}

func (x *PackageSchedule) GetTourStatus() string {
	if x != nil {
		return x.TourStatus
	}
	return ""
}

func (x *PackageSchedule) GetOnHold() string {
	if x != nil {
		return x.OnHold
	}
	return ""
}

func (x *PackageSchedule) GetOnholdDate() *timestamppb.Timestamp {
	if x != nil {
		return x.OnholdDate
	}
	return nil
}

type ScheduleBrowseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId string                 `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	TourId     string                 `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Durations  string                 `protobuf:"bytes,3,opt,name=durations,proto3" json:"durations,omitempty"`
	StartDate  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Quota      string                 `protobuf:"bytes,6,opt,name=quota,proto3" json:"quota,omitempty"`
	IsActive   bool                   `protobuf:"varint,7,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	MinQuota   string                 `protobuf:"bytes,8,opt,name=min_quota,json=minQuota,proto3" json:"min_quota,omitempty"`
	MaxQuota   string                 `protobuf:"bytes,9,opt,name=max_quota,json=maxQuota,proto3" json:"max_quota,omitempty"`
	IsBooked   bool                   `protobuf:"varint,10,opt,name=is_booked,json=isBooked,proto3" json:"is_booked,omitempty"`
	Filters    []*Filter              `protobuf:"bytes,11,rep,name=filters,proto3" json:"filters,omitempty"`
	Limit      int32                  `protobuf:"varint,12,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     int32                  `protobuf:"varint,13,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ScheduleBrowseRequest) Reset() {
	*x = ScheduleBrowseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleBrowseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleBrowseRequest) ProtoMessage() {}

func (x *ScheduleBrowseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleBrowseRequest.ProtoReflect.Descriptor instead.
func (*ScheduleBrowseRequest) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{16}
}

func (x *ScheduleBrowseRequest) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *ScheduleBrowseRequest) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *ScheduleBrowseRequest) GetDurations() string {
	if x != nil {
		return x.Durations
	}
	return ""
}

func (x *ScheduleBrowseRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ScheduleBrowseRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ScheduleBrowseRequest) GetQuota() string {
	if x != nil {
		return x.Quota
	}
	return ""
}

func (x *ScheduleBrowseRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *ScheduleBrowseRequest) GetMinQuota() string {
	if x != nil {
		return x.MinQuota
	}
	return ""
}

func (x *ScheduleBrowseRequest) GetMaxQuota() string {
	if x != nil {
		return x.MaxQuota
	}
	return ""
}

func (x *ScheduleBrowseRequest) GetIsBooked() bool {
	if x != nil {
		return x.IsBooked
	}
	return false
}

func (x *ScheduleBrowseRequest) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ScheduleBrowseRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ScheduleBrowseRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type AddOnBrowseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddonId string    `protobuf:"bytes,1,opt,name=addon_id,json=addonId,proto3" json:"addon_id,omitempty"`
	TourId  string    `protobuf:"bytes,4,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Addon   string    `protobuf:"bytes,2,opt,name=addon,proto3" json:"addon,omitempty"`
	Price   string    `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	Filters []*Filter `protobuf:"bytes,11,rep,name=filters,proto3" json:"filters,omitempty"`
	Limit   int32     `protobuf:"varint,12,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32     `protobuf:"varint,13,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *AddOnBrowseRequest) Reset() {
	*x = AddOnBrowseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnBrowseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnBrowseRequest) ProtoMessage() {}

func (x *AddOnBrowseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnBrowseRequest.ProtoReflect.Descriptor instead.
func (*AddOnBrowseRequest) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{17}
}

func (x *AddOnBrowseRequest) GetAddonId() string {
	if x != nil {
		return x.AddonId
	}
	return ""
}

func (x *AddOnBrowseRequest) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *AddOnBrowseRequest) GetAddon() string {
	if x != nil {
		return x.Addon
	}
	return ""
}

func (x *AddOnBrowseRequest) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *AddOnBrowseRequest) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *AddOnBrowseRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *AddOnBrowseRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type BrowseTourAddon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PackageAddon `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BrowseTourAddon) Reset() {
	*x = BrowseTourAddon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowseTourAddon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowseTourAddon) ProtoMessage() {}

func (x *BrowseTourAddon) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowseTourAddon.ProtoReflect.Descriptor instead.
func (*BrowseTourAddon) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{18}
}

func (x *BrowseTourAddon) GetData() []*PackageAddon {
	if x != nil {
		return x.Data
	}
	return nil
}

type BrowseTourSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PackageSchedule `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BrowseTourSchedule) Reset() {
	*x = BrowseTourSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowseTourSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowseTourSchedule) ProtoMessage() {}

func (x *BrowseTourSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowseTourSchedule.ProtoReflect.Descriptor instead.
func (*BrowseTourSchedule) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{19}
}

func (x *BrowseTourSchedule) GetData() []*PackageSchedule {
	if x != nil {
		return x.Data
	}
	return nil
}

type PackageScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     *TourPackage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	MinQuota string       `protobuf:"bytes,5,opt,name=min_quota,json=minQuota,proto3" json:"min_quota,omitempty"`
	MaxQuota string       `protobuf:"bytes,6,opt,name=max_quota,json=maxQuota,proto3" json:"max_quota,omitempty"`
	IsActive bool         `protobuf:"varint,7,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	IsBooked bool         `protobuf:"varint,8,opt,name=is_booked,json=isBooked,proto3" json:"is_booked,omitempty"`
}

func (x *PackageScheduleResponse) Reset() {
	*x = PackageScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageScheduleResponse) ProtoMessage() {}

func (x *PackageScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageScheduleResponse.ProtoReflect.Descriptor instead.
func (*PackageScheduleResponse) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{20}
}

func (x *PackageScheduleResponse) GetData() *TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PackageScheduleResponse) GetMinQuota() string {
	if x != nil {
		return x.MinQuota
	}
	return ""
}

func (x *PackageScheduleResponse) GetMaxQuota() string {
	if x != nil {
		return x.MaxQuota
	}
	return ""
}

func (x *PackageScheduleResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *PackageScheduleResponse) GetIsBooked() bool {
	if x != nil {
		return x.IsBooked
	}
	return false
}

type PackageAddon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddonId   string `protobuf:"bytes,1,opt,name=addon_id,json=addonId,proto3" json:"addon_id,omitempty"`
	TourId    string `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Addon     string `protobuf:"bytes,3,opt,name=addon,proto3" json:"addon,omitempty"`
	Price     string `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
	PriceType string `protobuf:"bytes,5,opt,name=price_type,json=priceType,proto3" json:"price_type,omitempty"`
	Qty       int32  `protobuf:"varint,6,opt,name=qty,proto3" json:"qty,omitempty"`
	IsRental  bool   `protobuf:"varint,7,opt,name=is_rental,json=isRental,proto3" json:"is_rental,omitempty"`
	Image     string `protobuf:"bytes,8,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *PackageAddon) Reset() {
	*x = PackageAddon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageAddon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageAddon) ProtoMessage() {}

func (x *PackageAddon) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageAddon.ProtoReflect.Descriptor instead.
func (*PackageAddon) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{21}
}

func (x *PackageAddon) GetAddonId() string {
	if x != nil {
		return x.AddonId
	}
	return ""
}

func (x *PackageAddon) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *PackageAddon) GetAddon() string {
	if x != nil {
		return x.Addon
	}
	return ""
}

func (x *PackageAddon) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *PackageAddon) GetPriceType() string {
	if x != nil {
		return x.PriceType
	}
	return ""
}

func (x *PackageAddon) GetQty() int32 {
	if x != nil {
		return x.Qty
	}
	return 0
}

func (x *PackageAddon) GetIsRental() bool {
	if x != nil {
		return x.IsRental
	}
	return false
}

func (x *PackageAddon) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type CustomPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyName string `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	Policy     string `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	TourId     string `protobuf:"bytes,3,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
}

func (x *CustomPolicy) Reset() {
	*x = CustomPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomPolicy) ProtoMessage() {}

func (x *CustomPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomPolicy.ProtoReflect.Descriptor instead.
func (*CustomPolicy) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{22}
}

func (x *CustomPolicy) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *CustomPolicy) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *CustomPolicy) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

type DeletePackageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *TourPackage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Code  int32        `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Title string       `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *DeletePackageResponse) Reset() {
	*x = DeletePackageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePackageResponse) ProtoMessage() {}

func (x *DeletePackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePackageResponse.ProtoReflect.Descriptor instead.
func (*DeletePackageResponse) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{23}
}

func (x *DeletePackageResponse) GetData() *TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeletePackageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeletePackageResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type GeneralResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *GeneralResponse) Reset() {
	*x = GeneralResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralResponse) ProtoMessage() {}

func (x *GeneralResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralResponse.ProtoReflect.Descriptor instead.
func (*GeneralResponse) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{24}
}

func (x *GeneralResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GeneralResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type TourHostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TourHost `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TourHostResponse) Reset() {
	*x = TourHostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TourHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourHostResponse) ProtoMessage() {}

func (x *TourHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourHostResponse.ProtoReflect.Descriptor instead.
func (*TourHostResponse) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{25}
}

func (x *TourHostResponse) GetData() *TourHost {
	if x != nil {
		return x.Data
	}
	return nil
}

type PackageAddonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TourPackage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PackageAddonResponse) Reset() {
	*x = PackageAddonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageAddonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageAddonResponse) ProtoMessage() {}

func (x *PackageAddonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageAddonResponse.ProtoReflect.Descriptor instead.
func (*PackageAddonResponse) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{26}
}

func (x *PackageAddonResponse) GetData() *TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

type PackagePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceId        string `protobuf:"bytes,1,opt,name=price_id,json=priceId,proto3" json:"price_id,omitempty"`
	TourId         string `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	MinParticipant string `protobuf:"bytes,3,opt,name=min_participant,json=minParticipant,proto3" json:"min_participant,omitempty"`
	MaxParticipant string `protobuf:"bytes,4,opt,name=max_participant,json=maxParticipant,proto3" json:"max_participant,omitempty"`
	Price          string `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
	KidPrice       string `protobuf:"bytes,7,opt,name=kid_price,json=kidPrice,proto3" json:"kid_price,omitempty"`
	MinKidAge      string `protobuf:"bytes,8,opt,name=min_kid_age,json=minKidAge,proto3" json:"min_kid_age,omitempty"`
	MaxKidAge      string `protobuf:"bytes,9,opt,name=max_kid_age,json=maxKidAge,proto3" json:"max_kid_age,omitempty"`
}

func (x *PackagePrice) Reset() {
	*x = PackagePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagePrice) ProtoMessage() {}

func (x *PackagePrice) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagePrice.ProtoReflect.Descriptor instead.
func (*PackagePrice) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{27}
}

func (x *PackagePrice) GetPriceId() string {
	if x != nil {
		return x.PriceId
	}
	return ""
}

func (x *PackagePrice) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *PackagePrice) GetMinParticipant() string {
	if x != nil {
		return x.MinParticipant
	}
	return ""
}

func (x *PackagePrice) GetMaxParticipant() string {
	if x != nil {
		return x.MaxParticipant
	}
	return ""
}

func (x *PackagePrice) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *PackagePrice) GetKidPrice() string {
	if x != nil {
		return x.KidPrice
	}
	return ""
}

func (x *PackagePrice) GetMinKidAge() string {
	if x != nil {
		return x.MinKidAge
	}
	return ""
}

func (x *PackagePrice) GetMaxKidAge() string {
	if x != nil {
		return x.MaxKidAge
	}
	return ""
}

type PriceListBrowseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceId        string    `protobuf:"bytes,1,opt,name=price_id,json=priceId,proto3" json:"price_id,omitempty"`
	TourId         string    `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	MinParticipant string    `protobuf:"bytes,3,opt,name=min_participant,json=minParticipant,proto3" json:"min_participant,omitempty"`
	MaxParticipant string    `protobuf:"bytes,4,opt,name=max_participant,json=maxParticipant,proto3" json:"max_participant,omitempty"`
	Price          string    `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
	KidPrice       string    `protobuf:"bytes,7,opt,name=kid_price,json=kidPrice,proto3" json:"kid_price,omitempty"`
	MinKidAge      string    `protobuf:"bytes,8,opt,name=min_kid_age,json=minKidAge,proto3" json:"min_kid_age,omitempty"`
	MaxKidAge      string    `protobuf:"bytes,9,opt,name=max_kid_age,json=maxKidAge,proto3" json:"max_kid_age,omitempty"`
	Filters        []*Filter `protobuf:"bytes,11,rep,name=filters,proto3" json:"filters,omitempty"`
	Limit          int32     `protobuf:"varint,12,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset         int32     `protobuf:"varint,13,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *PriceListBrowseRequest) Reset() {
	*x = PriceListBrowseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceListBrowseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceListBrowseRequest) ProtoMessage() {}

func (x *PriceListBrowseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceListBrowseRequest.ProtoReflect.Descriptor instead.
func (*PriceListBrowseRequest) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{28}
}

func (x *PriceListBrowseRequest) GetPriceId() string {
	if x != nil {
		return x.PriceId
	}
	return ""
}

func (x *PriceListBrowseRequest) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *PriceListBrowseRequest) GetMinParticipant() string {
	if x != nil {
		return x.MinParticipant
	}
	return ""
}

func (x *PriceListBrowseRequest) GetMaxParticipant() string {
	if x != nil {
		return x.MaxParticipant
	}
	return ""
}

func (x *PriceListBrowseRequest) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *PriceListBrowseRequest) GetKidPrice() string {
	if x != nil {
		return x.KidPrice
	}
	return ""
}

func (x *PriceListBrowseRequest) GetMinKidAge() string {
	if x != nil {
		return x.MinKidAge
	}
	return ""
}

func (x *PriceListBrowseRequest) GetMaxKidAge() string {
	if x != nil {
		return x.MaxKidAge
	}
	return ""
}

func (x *PriceListBrowseRequest) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *PriceListBrowseRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PriceListBrowseRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type BrowseTourPriceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PackagePrice `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BrowseTourPriceList) Reset() {
	*x = BrowseTourPriceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowseTourPriceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowseTourPriceList) ProtoMessage() {}

func (x *BrowseTourPriceList) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowseTourPriceList.ProtoReflect.Descriptor instead.
func (*BrowseTourPriceList) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{29}
}

func (x *BrowseTourPriceList) GetData() []*PackagePrice {
	if x != nil {
		return x.Data
	}
	return nil
}

type BrowseTourPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     []*TourPackage `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Paginate *Paginate      `protobuf:"bytes,2,opt,name=paginate,proto3" json:"paginate,omitempty"`
}

func (x *BrowseTourPackage) Reset() {
	*x = BrowseTourPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowseTourPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowseTourPackage) ProtoMessage() {}

func (x *BrowseTourPackage) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowseTourPackage.ProtoReflect.Descriptor instead.
func (*BrowseTourPackage) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{30}
}

func (x *BrowseTourPackage) GetData() []*TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BrowseTourPackage) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field    string `protobuf:"bytes,1,opt,name=Field,proto3" json:"Field,omitempty"`
	Operator string `protobuf:"bytes,2,opt,name=Operator,proto3" json:"Operator,omitempty"`
	Value    string `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{31}
}

func (x *Filter) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Filter) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *Filter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type BrowseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*Filter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	Page    string    `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
	PerPage string    `protobuf:"bytes,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Param   string    `protobuf:"bytes,4,opt,name=param,proto3" json:"param,omitempty"`
	HostId  string    `protobuf:"bytes,5,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Key     string    `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *BrowseRequest) Reset() {
	*x = BrowseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowseRequest) ProtoMessage() {}

func (x *BrowseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowseRequest.ProtoReflect.Descriptor instead.
func (*BrowseRequest) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{32}
}

func (x *BrowseRequest) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *BrowseRequest) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *BrowseRequest) GetPerPage() string {
	if x != nil {
		return x.PerPage
	}
	return ""
}

func (x *BrowseRequest) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *BrowseRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *BrowseRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type BrowseRequestWishList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters  []*Filter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	Limit    int32     `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int32     `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	TourId   string    `protobuf:"bytes,4,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Title    string    `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Price    string    `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`
	Location string    `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
	Rate     string    `protobuf:"bytes,8,opt,name=rate,proto3" json:"rate,omitempty"`
	UserUid  string    `protobuf:"bytes,9,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
}

func (x *BrowseRequestWishList) Reset() {
	*x = BrowseRequestWishList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowseRequestWishList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowseRequestWishList) ProtoMessage() {}

func (x *BrowseRequestWishList) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowseRequestWishList.ProtoReflect.Descriptor instead.
func (*BrowseRequestWishList) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{33}
}

func (x *BrowseRequestWishList) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *BrowseRequestWishList) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *BrowseRequestWishList) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *BrowseRequestWishList) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *BrowseRequestWishList) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BrowseRequestWishList) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *BrowseRequestWishList) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *BrowseRequestWishList) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *BrowseRequestWishList) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

type DeleteSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId string                 `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	TourId     string                 `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	StartDate  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Quota      string                 `protobuf:"bytes,5,opt,name=quota,proto3" json:"quota,omitempty"`
	Durations  string                 `protobuf:"bytes,7,opt,name=durations,proto3" json:"durations,omitempty"`
	MinQuota   string                 `protobuf:"bytes,8,opt,name=min_quota,json=minQuota,proto3" json:"min_quota,omitempty"`
	MaxQuota   string                 `protobuf:"bytes,9,opt,name=max_quota,json=maxQuota,proto3" json:"max_quota,omitempty"`
	IsActive   bool                   `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	IsBooked   bool                   `protobuf:"varint,10,opt,name=is_booked,json=isBooked,proto3" json:"is_booked,omitempty"`
}

func (x *DeleteSchedule) Reset() {
	*x = DeleteSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSchedule) ProtoMessage() {}

func (x *DeleteSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSchedule.ProtoReflect.Descriptor instead.
func (*DeleteSchedule) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteSchedule) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *DeleteSchedule) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *DeleteSchedule) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *DeleteSchedule) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *DeleteSchedule) GetQuota() string {
	if x != nil {
		return x.Quota
	}
	return ""
}

func (x *DeleteSchedule) GetDurations() string {
	if x != nil {
		return x.Durations
	}
	return ""
}

func (x *DeleteSchedule) GetMinQuota() string {
	if x != nil {
		return x.MinQuota
	}
	return ""
}

func (x *DeleteSchedule) GetMaxQuota() string {
	if x != nil {
		return x.MaxQuota
	}
	return ""
}

func (x *DeleteSchedule) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *DeleteSchedule) GetIsBooked() bool {
	if x != nil {
		return x.IsBooked
	}
	return false
}

type DeleteScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *DeleteSchedule `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteScheduleResponse) Reset() {
	*x = DeleteScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScheduleResponse) ProtoMessage() {}

func (x *DeleteScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScheduleResponse.ProtoReflect.Descriptor instead.
func (*DeleteScheduleResponse) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteScheduleResponse) GetData() *DeleteSchedule {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteAddon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddonId string `protobuf:"bytes,1,opt,name=addon_id,json=addonId,proto3" json:"addon_id,omitempty"`
	TourId  string `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Addon   string `protobuf:"bytes,3,opt,name=addon,proto3" json:"addon,omitempty"`
	Price   string `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *DeleteAddon) Reset() {
	*x = DeleteAddon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAddon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAddon) ProtoMessage() {}

func (x *DeleteAddon) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAddon.ProtoReflect.Descriptor instead.
func (*DeleteAddon) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteAddon) GetAddonId() string {
	if x != nil {
		return x.AddonId
	}
	return ""
}

func (x *DeleteAddon) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *DeleteAddon) GetAddon() string {
	if x != nil {
		return x.Addon
	}
	return ""
}

func (x *DeleteAddon) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

type DeleteAddonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *DeleteAddon `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteAddonResponse) Reset() {
	*x = DeleteAddonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAddonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAddonResponse) ProtoMessage() {}

func (x *DeleteAddonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAddonResponse.ProtoReflect.Descriptor instead.
func (*DeleteAddonResponse) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteAddonResponse) GetData() *DeleteAddon {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId string `protobuf:"bytes,1,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Type    string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	TourId  string `protobuf:"bytes,4,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
}

func (x *DeleteMedia) Reset() {
	*x = DeleteMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMedia) ProtoMessage() {}

func (x *DeleteMedia) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMedia.ProtoReflect.Descriptor instead.
func (*DeleteMedia) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteMedia) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *DeleteMedia) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DeleteMedia) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DeleteMedia) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

type DeleteMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *DeleteMedia `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteMediaResponse) Reset() {
	*x = DeleteMediaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMediaResponse) ProtoMessage() {}

func (x *DeleteMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMediaResponse.ProtoReflect.Descriptor instead.
func (*DeleteMediaResponse) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{39}
}

func (x *DeleteMediaResponse) GetData() *DeleteMedia {
	if x != nil {
		return x.Data
	}
	return nil
}

type CategoryListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     []*CategoriesListing `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Paginate *Paginate            `protobuf:"bytes,2,opt,name=paginate,proto3" json:"paginate,omitempty"`
}

func (x *CategoryListResponse) Reset() {
	*x = CategoryListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryListResponse) ProtoMessage() {}

func (x *CategoryListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryListResponse.ProtoReflect.Descriptor instead.
func (*CategoryListResponse) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{40}
}

func (x *CategoryListResponse) GetData() []*CategoriesListing {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CategoryListResponse) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

type CategoriesListing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId       string `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Category         string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	CategoryImageUrl string `protobuf:"bytes,3,opt,name=category_image_url,json=categoryImageUrl,proto3" json:"category_image_url,omitempty"`
	CountUsed        int32  `protobuf:"varint,4,opt,name=count_used,json=countUsed,proto3" json:"count_used,omitempty"`
}

func (x *CategoriesListing) Reset() {
	*x = CategoriesListing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoriesListing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoriesListing) ProtoMessage() {}

func (x *CategoriesListing) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoriesListing.ProtoReflect.Descriptor instead.
func (*CategoriesListing) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{41}
}

func (x *CategoriesListing) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *CategoriesListing) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *CategoriesListing) GetCategoryImageUrl() string {
	if x != nil {
		return x.CategoryImageUrl
	}
	return ""
}

func (x *CategoriesListing) GetCountUsed() int32 {
	if x != nil {
		return x.CountUsed
	}
	return 0
}

type AddWishListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourId   string `protobuf:"bytes,1,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Title    string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Price    string `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	Location string `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Rate     string `protobuf:"bytes,5,opt,name=rate,proto3" json:"rate,omitempty"`
	UserUid  string `protobuf:"bytes,6,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
}

func (x *AddWishListRequest) Reset() {
	*x = AddWishListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddWishListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWishListRequest) ProtoMessage() {}

func (x *AddWishListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWishListRequest.ProtoReflect.Descriptor instead.
func (*AddWishListRequest) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{42}
}

func (x *AddWishListRequest) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *AddWishListRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AddWishListRequest) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *AddWishListRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *AddWishListRequest) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *AddWishListRequest) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

type AddWishListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *AddWishListRequest `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Code  int32               `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Title string              `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *AddWishListResponse) Reset() {
	*x = AddWishListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddWishListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWishListResponse) ProtoMessage() {}

func (x *AddWishListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWishListResponse.ProtoReflect.Descriptor instead.
func (*AddWishListResponse) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{43}
}

func (x *AddWishListResponse) GetData() *AddWishListRequest {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AddWishListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddWishListResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type WishListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*GetWishListResponse `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *WishListResponse) Reset() {
	*x = WishListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WishListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WishListResponse) ProtoMessage() {}

func (x *WishListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WishListResponse.ProtoReflect.Descriptor instead.
func (*WishListResponse) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{44}
}

func (x *WishListResponse) GetData() []*GetWishListResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetWishListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourId        string             `protobuf:"bytes,1,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Title         string             `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Price         string             `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	Location      string             `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	TypeTour      string             `protobuf:"bytes,5,opt,name=type_tour,json=typeTour,proto3" json:"type_tour,omitempty"`
	Rate          string             `protobuf:"bytes,6,opt,name=rate,proto3" json:"rate,omitempty"`
	UserUid       string             `protobuf:"bytes,7,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	HavePromotion bool               `protobuf:"varint,8,opt,name=have_promotion,json=havePromotion,proto3" json:"have_promotion,omitempty"`
	Medias        []*PackageMedia    `protobuf:"bytes,9,rep,name=medias,proto3" json:"medias,omitempty"`
	Schedules     []*PackageSchedule `protobuf:"bytes,10,rep,name=schedules,proto3" json:"schedules,omitempty"`
	HostInfo      *HostInfo          `protobuf:"bytes,11,opt,name=host_info,json=hostInfo,proto3" json:"host_info,omitempty"`
}

func (x *GetWishListResponse) Reset() {
	*x = GetWishListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWishListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWishListResponse) ProtoMessage() {}

func (x *GetWishListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWishListResponse.ProtoReflect.Descriptor instead.
func (*GetWishListResponse) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{45}
}

func (x *GetWishListResponse) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *GetWishListResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetWishListResponse) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *GetWishListResponse) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *GetWishListResponse) GetTypeTour() string {
	if x != nil {
		return x.TypeTour
	}
	return ""
}

func (x *GetWishListResponse) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *GetWishListResponse) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *GetWishListResponse) GetHavePromotion() bool {
	if x != nil {
		return x.HavePromotion
	}
	return false
}

func (x *GetWishListResponse) GetMedias() []*PackageMedia {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *GetWishListResponse) GetSchedules() []*PackageSchedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *GetWishListResponse) GetHostInfo() *HostInfo {
	if x != nil {
		return x.HostInfo
	}
	return nil
}

type HostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Image  string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	HostId string `protobuf:"bytes,3,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
}

func (x *HostInfo) Reset() {
	*x = HostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostInfo) ProtoMessage() {}

func (x *HostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostInfo.ProtoReflect.Descriptor instead.
func (*HostInfo) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{46}
}

func (x *HostInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HostInfo) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *HostInfo) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

type RequestDetailPriceByParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceId          string `protobuf:"bytes,1,opt,name=price_id,json=priceId,proto3" json:"price_id,omitempty"`
	TourId           string `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	MinParticipant   string `protobuf:"bytes,3,opt,name=min_participant,json=minParticipant,proto3" json:"min_participant,omitempty"`
	MaxParticipant   string `protobuf:"bytes,4,opt,name=max_participant,json=maxParticipant,proto3" json:"max_participant,omitempty"`
	Price            string `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
	KidPrice         string `protobuf:"bytes,7,opt,name=kid_price,json=kidPrice,proto3" json:"kid_price,omitempty"`
	MinKidAge        string `protobuf:"bytes,8,opt,name=min_kid_age,json=minKidAge,proto3" json:"min_kid_age,omitempty"`
	MaxKidAge        string `protobuf:"bytes,9,opt,name=max_kid_age,json=maxKidAge,proto3" json:"max_kid_age,omitempty"`
	AdultParticipant string `protobuf:"bytes,10,opt,name=adult_participant,json=adultParticipant,proto3" json:"adult_participant,omitempty"`
	KidParticipant   string `protobuf:"bytes,11,opt,name=kid_participant,json=kidParticipant,proto3" json:"kid_participant,omitempty"`
}

func (x *RequestDetailPriceByParticipant) Reset() {
	*x = RequestDetailPriceByParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestDetailPriceByParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDetailPriceByParticipant) ProtoMessage() {}

func (x *RequestDetailPriceByParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDetailPriceByParticipant.ProtoReflect.Descriptor instead.
func (*RequestDetailPriceByParticipant) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{47}
}

func (x *RequestDetailPriceByParticipant) GetPriceId() string {
	if x != nil {
		return x.PriceId
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetMinParticipant() string {
	if x != nil {
		return x.MinParticipant
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetMaxParticipant() string {
	if x != nil {
		return x.MaxParticipant
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetKidPrice() string {
	if x != nil {
		return x.KidPrice
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetMinKidAge() string {
	if x != nil {
		return x.MinKidAge
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetMaxKidAge() string {
	if x != nil {
		return x.MaxKidAge
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetAdultParticipant() string {
	if x != nil {
		return x.AdultParticipant
	}
	return ""
}

func (x *RequestDetailPriceByParticipant) GetKidParticipant() string {
	if x != nil {
		return x.KidParticipant
	}
	return ""
}

type ResponseDetailPriceByParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceId               string `protobuf:"bytes,1,opt,name=price_id,json=priceId,proto3" json:"price_id,omitempty"`
	TourId                string `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	MinParticipant        string `protobuf:"bytes,3,opt,name=min_participant,json=minParticipant,proto3" json:"min_participant,omitempty"`
	MaxParticipant        string `protobuf:"bytes,4,opt,name=max_participant,json=maxParticipant,proto3" json:"max_participant,omitempty"`
	Price                 string `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
	KidPrice              string `protobuf:"bytes,7,opt,name=kid_price,json=kidPrice,proto3" json:"kid_price,omitempty"`
	MinKidAge             string `protobuf:"bytes,8,opt,name=min_kid_age,json=minKidAge,proto3" json:"min_kid_age,omitempty"`
	MaxKidAge             string `protobuf:"bytes,9,opt,name=max_kid_age,json=maxKidAge,proto3" json:"max_kid_age,omitempty"`
	AdultParticipant      string `protobuf:"bytes,10,opt,name=adult_participant,json=adultParticipant,proto3" json:"adult_participant,omitempty"`
	KidParticipant        string `protobuf:"bytes,11,opt,name=kid_participant,json=kidParticipant,proto3" json:"kid_participant,omitempty"`
	TotalParticipant      string `protobuf:"bytes,12,opt,name=total_participant,json=totalParticipant,proto3" json:"total_participant,omitempty"`
	TotalAdultPrice       string `protobuf:"bytes,13,opt,name=total_adult_price,json=totalAdultPrice,proto3" json:"total_adult_price,omitempty"`
	TotalKidPrice         string `protobuf:"bytes,14,opt,name=total_kid_price,json=totalKidPrice,proto3" json:"total_kid_price,omitempty"`
	TotalPriceParticipant string `protobuf:"bytes,15,opt,name=total_price_participant,json=totalPriceParticipant,proto3" json:"total_price_participant,omitempty"`
}

func (x *ResponseDetailPriceByParticipant) Reset() {
	*x = ResponseDetailPriceByParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseDetailPriceByParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseDetailPriceByParticipant) ProtoMessage() {}

func (x *ResponseDetailPriceByParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseDetailPriceByParticipant.ProtoReflect.Descriptor instead.
func (*ResponseDetailPriceByParticipant) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{48}
}

func (x *ResponseDetailPriceByParticipant) GetPriceId() string {
	if x != nil {
		return x.PriceId
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetMinParticipant() string {
	if x != nil {
		return x.MinParticipant
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetMaxParticipant() string {
	if x != nil {
		return x.MaxParticipant
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetKidPrice() string {
	if x != nil {
		return x.KidPrice
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetMinKidAge() string {
	if x != nil {
		return x.MinKidAge
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetMaxKidAge() string {
	if x != nil {
		return x.MaxKidAge
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetAdultParticipant() string {
	if x != nil {
		return x.AdultParticipant
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetKidParticipant() string {
	if x != nil {
		return x.KidParticipant
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetTotalParticipant() string {
	if x != nil {
		return x.TotalParticipant
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetTotalAdultPrice() string {
	if x != nil {
		return x.TotalAdultPrice
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetTotalKidPrice() string {
	if x != nil {
		return x.TotalKidPrice
	}
	return ""
}

func (x *ResponseDetailPriceByParticipant) GetTotalPriceParticipant() string {
	if x != nil {
		return x.TotalPriceParticipant
	}
	return ""
}

type UpdateSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourId     string `protobuf:"bytes,1,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	ScheduleId string `protobuf:"bytes,2,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *UpdateSchedule) Reset() {
	*x = UpdateSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSchedule) ProtoMessage() {}

func (x *UpdateSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSchedule.ProtoReflect.Descriptor instead.
func (*UpdateSchedule) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{49}
}

func (x *UpdateSchedule) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *UpdateSchedule) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

type ReopenSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId        string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	TourId         string                 `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	ScheduleId     string                 `protobuf:"bytes,3,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Schedules      []*PackageSchedule     `protobuf:"bytes,4,rep,name=schedules,proto3" json:"schedules,omitempty"`
	EndDatePayment *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_date_payment,json=endDatePayment,proto3" json:"end_date_payment,omitempty"`
}

func (x *ReopenSchedule) Reset() {
	*x = ReopenSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReopenSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReopenSchedule) ProtoMessage() {}

func (x *ReopenSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReopenSchedule.ProtoReflect.Descriptor instead.
func (*ReopenSchedule) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{50}
}

func (x *ReopenSchedule) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ReopenSchedule) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *ReopenSchedule) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *ReopenSchedule) GetSchedules() []*PackageSchedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *ReopenSchedule) GetEndDatePayment() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDatePayment
	}
	return nil
}

type UpdateScheduleRespone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TourPackage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateScheduleRespone) Reset() {
	*x = UpdateScheduleRespone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScheduleRespone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduleRespone) ProtoMessage() {}

func (x *UpdateScheduleRespone) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduleRespone.ProtoReflect.Descriptor instead.
func (*UpdateScheduleRespone) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{51}
}

func (x *UpdateScheduleRespone) GetData() *TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

type RequestTourPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUid string `protobuf:"bytes,1,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
}

func (x *RequestTourPackage) Reset() {
	*x = RequestTourPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTourPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTourPackage) ProtoMessage() {}

func (x *RequestTourPackage) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTourPackage.ProtoReflect.Descriptor instead.
func (*RequestTourPackage) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{52}
}

func (x *RequestTourPackage) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

type BroadcastMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Host      *UserInfo              `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *BroadcastMessage) Reset() {
	*x = BroadcastMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastMessage) ProtoMessage() {}

func (x *BroadcastMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastMessage.ProtoReflect.Descriptor instead.
func (*BroadcastMessage) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{53}
}

func (x *BroadcastMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BroadcastMessage) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BroadcastMessage) GetHost() *UserInfo {
	if x != nil {
		return x.Host
	}
	return nil
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Image   string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	UserUid string `protobuf:"bytes,3,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{54}
}

func (x *UserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfo) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *UserInfo) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

type ActiveTour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourId           string              `protobuf:"bytes,1,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	ScheduleId       string              `protobuf:"bytes,2,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Title            string              `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Medias           []*PackageMedia     `protobuf:"bytes,4,rep,name=medias,proto3" json:"medias,omitempty"`
	Schedules        *PackageSchedule    `protobuf:"bytes,5,opt,name=schedules,proto3" json:"schedules,omitempty"`
	Location         string              `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	Description      string              `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Itinerary        string              `protobuf:"bytes,8,opt,name=itinerary,proto3" json:"itinerary,omitempty"`
	TotalParticipant int32               `protobuf:"varint,9,opt,name=total_participant,json=totalParticipant,proto3" json:"total_participant,omitempty"`
	TourStatus       string              `protobuf:"bytes,10,opt,name=tour_status,json=tourStatus,proto3" json:"tour_status,omitempty"`
	ConfirmEnd       bool                `protobuf:"varint,11,opt,name=confirm_end,json=confirmEnd,proto3" json:"confirm_end,omitempty"`
	Message          []*BroadcastMessage `protobuf:"bytes,12,rep,name=message,proto3" json:"message,omitempty"`
	HostInfo         *UserInfo           `protobuf:"bytes,13,opt,name=host_info,json=hostInfo,proto3" json:"host_info,omitempty"`
	GuestInfo        *UserInfo           `protobuf:"bytes,14,opt,name=guest_info,json=guestInfo,proto3" json:"guest_info,omitempty"`
}

func (x *ActiveTour) Reset() {
	*x = ActiveTour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveTour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveTour) ProtoMessage() {}

func (x *ActiveTour) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveTour.ProtoReflect.Descriptor instead.
func (*ActiveTour) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{55}
}

func (x *ActiveTour) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *ActiveTour) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *ActiveTour) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ActiveTour) GetMedias() []*PackageMedia {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *ActiveTour) GetSchedules() *PackageSchedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *ActiveTour) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ActiveTour) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ActiveTour) GetItinerary() string {
	if x != nil {
		return x.Itinerary
	}
	return ""
}

func (x *ActiveTour) GetTotalParticipant() int32 {
	if x != nil {
		return x.TotalParticipant
	}
	return 0
}

func (x *ActiveTour) GetTourStatus() string {
	if x != nil {
		return x.TourStatus
	}
	return ""
}

func (x *ActiveTour) GetConfirmEnd() bool {
	if x != nil {
		return x.ConfirmEnd
	}
	return false
}

func (x *ActiveTour) GetMessage() []*BroadcastMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ActiveTour) GetHostInfo() *UserInfo {
	if x != nil {
		return x.HostInfo
	}
	return nil
}

func (x *ActiveTour) GetGuestInfo() *UserInfo {
	if x != nil {
		return x.GuestInfo
	}
	return nil
}

type ParamActiveTour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourId     string `protobuf:"bytes,1,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	ScheduleId string `protobuf:"bytes,2,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Confirmed  bool   `protobuf:"varint,3,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
}

func (x *ParamActiveTour) Reset() {
	*x = ParamActiveTour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParamActiveTour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParamActiveTour) ProtoMessage() {}

func (x *ParamActiveTour) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParamActiveTour.ProtoReflect.Descriptor instead.
func (*ParamActiveTour) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{56}
}

func (x *ParamActiveTour) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *ParamActiveTour) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *ParamActiveTour) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

type ResponseActiveTour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string      `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data  *ActiveTour `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseActiveTour) Reset() {
	*x = ResponseActiveTour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseActiveTour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseActiveTour) ProtoMessage() {}

func (x *ResponseActiveTour) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseActiveTour.ProtoReflect.Descriptor instead.
func (*ResponseActiveTour) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{57}
}

func (x *ResponseActiveTour) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseActiveTour) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseActiveTour) GetData() *ActiveTour {
	if x != nil {
		return x.Data
	}
	return nil
}

type ResponseConfirmedToEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data  string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseConfirmedToEnd) Reset() {
	*x = ResponseConfirmedToEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseConfirmedToEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseConfirmedToEnd) ProtoMessage() {}

func (x *ResponseConfirmedToEnd) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseConfirmedToEnd.ProtoReflect.Descriptor instead.
func (*ResponseConfirmedToEnd) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{58}
}

func (x *ResponseConfirmedToEnd) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseConfirmedToEnd) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseConfirmedToEnd) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type Paginate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentPage int32 `protobuf:"varint,1,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	NextPage    int32 `protobuf:"varint,2,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	TotalPage   int32 `protobuf:"varint,3,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	PerPage     int32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *Paginate) Reset() {
	*x = Paginate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paginate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paginate) ProtoMessage() {}

func (x *Paginate) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paginate.ProtoReflect.Descriptor instead.
func (*Paginate) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{59}
}

func (x *Paginate) GetCurrentPage() int32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *Paginate) GetNextPage() int32 {
	if x != nil {
		return x.NextPage
	}
	return 0
}

func (x *Paginate) GetTotalPage() int32 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *Paginate) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type ScheduleTourStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId    string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	TourId     string `protobuf:"bytes,2,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	ScheduleId string `protobuf:"bytes,3,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	TourStatus string `protobuf:"bytes,4,opt,name=tour_status,json=tourStatus,proto3" json:"tour_status,omitempty"`
}

func (x *ScheduleTourStatus) Reset() {
	*x = ScheduleTourStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleTourStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleTourStatus) ProtoMessage() {}

func (x *ScheduleTourStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleTourStatus.ProtoReflect.Descriptor instead.
func (*ScheduleTourStatus) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{60}
}

func (x *ScheduleTourStatus) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ScheduleTourStatus) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *ScheduleTourStatus) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *ScheduleTourStatus) GetTourStatus() string {
	if x != nil {
		return x.TourStatus
	}
	return ""
}

type ScheduleTourStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TourPackage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ScheduleTourStatusResponse) Reset() {
	*x = ScheduleTourStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleTourStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleTourStatusResponse) ProtoMessage() {}

func (x *ScheduleTourStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleTourStatusResponse.ProtoReflect.Descriptor instead.
func (*ScheduleTourStatusResponse) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{61}
}

func (x *ScheduleTourStatusResponse) GetData() *TourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

type AdditionalCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdditionalAdultPrice string `protobuf:"bytes,1,opt,name=additional_adult_price,json=additionalAdultPrice,proto3" json:"additional_adult_price,omitempty"`
	AdditionalKidPrice   string `protobuf:"bytes,2,opt,name=additional_kid_price,json=additionalKidPrice,proto3" json:"additional_kid_price,omitempty"`
}

func (x *AdditionalCost) Reset() {
	*x = AdditionalCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalCost) ProtoMessage() {}

func (x *AdditionalCost) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalCost.ProtoReflect.Descriptor instead.
func (*AdditionalCost) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{62}
}

func (x *AdditionalCost) GetAdditionalAdultPrice() string {
	if x != nil {
		return x.AdditionalAdultPrice
	}
	return ""
}

func (x *AdditionalCost) GetAdditionalKidPrice() string {
	if x != nil {
		return x.AdditionalKidPrice
	}
	return ""
}

type CategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string             `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Code  int32              `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Data  *CategoriesListing `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CategoryResponse) Reset() {
	*x = CategoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryResponse) ProtoMessage() {}

func (x *CategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryResponse.ProtoReflect.Descriptor instead.
func (*CategoryResponse) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{63}
}

func (x *CategoryResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CategoryResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CategoryResponse) GetData() *CategoriesListing {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Code  int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *DeleteCategoryResponse) Reset() {
	*x = DeleteCategoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCategoryResponse) ProtoMessage() {}

func (x *DeleteCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCategoryResponse.ProtoReflect.Descriptor instead.
func (*DeleteCategoryResponse) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{64}
}

func (x *DeleteCategoryResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DeleteCategoryResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type RequestCountTour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId string `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
}

func (x *RequestCountTour) Reset() {
	*x = RequestCountTour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCountTour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCountTour) ProtoMessage() {}

func (x *RequestCountTour) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCountTour.ProtoReflect.Descriptor instead.
func (*RequestCountTour) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{65}
}

func (x *RequestCountTour) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

type ResponseCountTour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Total int32  `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ResponseCountTour) Reset() {
	*x = ResponseCountTour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseCountTour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseCountTour) ProtoMessage() {}

func (x *ResponseCountTour) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseCountTour.ProtoReflect.Descriptor instead.
func (*ResponseCountTour) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{66}
}

func (x *ResponseCountTour) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseCountTour) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseCountTour) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UsersWishlistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InWishlist bool `protobuf:"varint,1,opt,name=in_wishlist,json=inWishlist,proto3" json:"in_wishlist,omitempty"`
}

func (x *UsersWishlistResponse) Reset() {
	*x = UsersWishlistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersWishlistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersWishlistResponse) ProtoMessage() {}

func (x *UsersWishlistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersWishlistResponse.ProtoReflect.Descriptor instead.
func (*UsersWishlistResponse) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{67}
}

func (x *UsersWishlistResponse) GetInWishlist() bool {
	if x != nil {
		return x.InWishlist
	}
	return false
}

type HostsTourPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourId           string                 `protobuf:"bytes,1,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Title            string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Medias           []*PackageMedia        `protobuf:"bytes,3,rep,name=medias,proto3" json:"medias,omitempty"`
	Schedules        []*PackageSchedule     `protobuf:"bytes,4,rep,name=schedules,proto3" json:"schedules,omitempty"`
	Description      string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Categories       []string               `protobuf:"bytes,7,rep,name=categories,proto3" json:"categories,omitempty"`
	Tags             []string               `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	Location         string                 `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
	Rate             float64                `protobuf:"fixed64,10,opt,name=rate,proto3" json:"rate,omitempty"`
	Review           float64                `protobuf:"fixed64,11,opt,name=review,proto3" json:"review,omitempty"`
	Addons           []*PackageAddon        `protobuf:"bytes,12,rep,name=addons,proto3" json:"addons,omitempty"`
	IsCurated        bool                   `protobuf:"varint,13,opt,name=is_curated,json=isCurated,proto3" json:"is_curated,omitempty"`
	IsFeatured       bool                   `protobuf:"varint,14,opt,name=is_featured,json=isFeatured,proto3" json:"is_featured,omitempty"`
	IsRefundable     bool                   `protobuf:"varint,15,opt,name=is_refundable,json=isRefundable,proto3" json:"is_refundable,omitempty"`
	HostId           string                 `protobuf:"bytes,16,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	TypeTour         string                 `protobuf:"bytes,17,opt,name=type_tour,json=typeTour,proto3" json:"type_tour,omitempty"`
	Prices           []*PackagePrice        `protobuf:"bytes,18,rep,name=prices,proto3" json:"prices,omitempty"`
	TermsOfService   string                 `protobuf:"bytes,19,opt,name=terms_of_service,json=termsOfService,proto3" json:"terms_of_service,omitempty"`
	CustomPolicies   []*CustomPolicy        `protobuf:"bytes,20,rep,name=custom_policies,json=customPolicies,proto3" json:"custom_policies,omitempty"`
	AgeRestriction   string                 `protobuf:"bytes,21,opt,name=age_restriction,json=ageRestriction,proto3" json:"age_restriction,omitempty"`
	CostForeignGuest string                 `protobuf:"bytes,22,opt,name=cost_foreign_guest,json=costForeignGuest,proto3" json:"cost_foreign_guest,omitempty"`
	Itinerary        string                 `protobuf:"bytes,23,opt,name=itinerary,proto3" json:"itinerary,omitempty"`
	PolicyTitle      string                 `protobuf:"bytes,24,opt,name=policy_title,json=policyTitle,proto3" json:"policy_title,omitempty"`
	Policy           string                 `protobuf:"bytes,25,opt,name=policy,proto3" json:"policy,omitempty"`
	AdditionalCost   *AdditionalCost        `protobuf:"bytes,26,opt,name=additional_cost,json=additionalCost,proto3" json:"additional_cost,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	DeleteStatus     bool                   `protobuf:"varint,28,opt,name=delete_status,json=deleteStatus,proto3" json:"delete_status,omitempty"`
	UserUid          string                 `protobuf:"bytes,29,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	UpdateAt         *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	HostInfo         *TourHostsInfo         `protobuf:"bytes,31,opt,name=host_info,json=hostInfo,proto3" json:"host_info,omitempty"`
	HavePromotion    bool                   `protobuf:"varint,32,opt,name=have_promotion,json=havePromotion,proto3" json:"have_promotion,omitempty"`
	Insurance        *Insurance             `protobuf:"bytes,33,opt,name=insurance,proto3" json:"insurance,omitempty"`
}

func (x *HostsTourPackage) Reset() {
	*x = HostsTourPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostsTourPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostsTourPackage) ProtoMessage() {}

func (x *HostsTourPackage) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostsTourPackage.ProtoReflect.Descriptor instead.
func (*HostsTourPackage) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{68}
}

func (x *HostsTourPackage) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *HostsTourPackage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *HostsTourPackage) GetMedias() []*PackageMedia {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *HostsTourPackage) GetSchedules() []*PackageSchedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *HostsTourPackage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HostsTourPackage) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *HostsTourPackage) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *HostsTourPackage) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *HostsTourPackage) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *HostsTourPackage) GetReview() float64 {
	if x != nil {
		return x.Review
	}
	return 0
}

func (x *HostsTourPackage) GetAddons() []*PackageAddon {
	if x != nil {
		return x.Addons
	}
	return nil
}

func (x *HostsTourPackage) GetIsCurated() bool {
	if x != nil {
		return x.IsCurated
	}
	return false
}

func (x *HostsTourPackage) GetIsFeatured() bool {
	if x != nil {
		return x.IsFeatured
	}
	return false
}

func (x *HostsTourPackage) GetIsRefundable() bool {
	if x != nil {
		return x.IsRefundable
	}
	return false
}

func (x *HostsTourPackage) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *HostsTourPackage) GetTypeTour() string {
	if x != nil {
		return x.TypeTour
	}
	return ""
}

func (x *HostsTourPackage) GetPrices() []*PackagePrice {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *HostsTourPackage) GetTermsOfService() string {
	if x != nil {
		return x.TermsOfService
	}
	return ""
}

func (x *HostsTourPackage) GetCustomPolicies() []*CustomPolicy {
	if x != nil {
		return x.CustomPolicies
	}
	return nil
}

func (x *HostsTourPackage) GetAgeRestriction() string {
	if x != nil {
		return x.AgeRestriction
	}
	return ""
}

func (x *HostsTourPackage) GetCostForeignGuest() string {
	if x != nil {
		return x.CostForeignGuest
	}
	return ""
}

func (x *HostsTourPackage) GetItinerary() string {
	if x != nil {
		return x.Itinerary
	}
	return ""
}

func (x *HostsTourPackage) GetPolicyTitle() string {
	if x != nil {
		return x.PolicyTitle
	}
	return ""
}

func (x *HostsTourPackage) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *HostsTourPackage) GetAdditionalCost() *AdditionalCost {
	if x != nil {
		return x.AdditionalCost
	}
	return nil
}

func (x *HostsTourPackage) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *HostsTourPackage) GetDeleteStatus() bool {
	if x != nil {
		return x.DeleteStatus
	}
	return false
}

func (x *HostsTourPackage) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *HostsTourPackage) GetUpdateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

func (x *HostsTourPackage) GetHostInfo() *TourHostsInfo {
	if x != nil {
		return x.HostInfo
	}
	return nil
}

func (x *HostsTourPackage) GetHavePromotion() bool {
	if x != nil {
		return x.HavePromotion
	}
	return false
}

func (x *HostsTourPackage) GetInsurance() *Insurance {
	if x != nil {
		return x.Insurance
	}
	return nil
}

type TourHostsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfilePictureUrl string `protobuf:"bytes,1,opt,name=profile_picture_url,json=profilePictureUrl,proto3" json:"profile_picture_url,omitempty"`
	BusinessName      string `protobuf:"bytes,2,opt,name=business_name,json=businessName,proto3" json:"business_name,omitempty"`
	BusinessCategory  string `protobuf:"bytes,3,opt,name=business_category,json=businessCategory,proto3" json:"business_category,omitempty"`
	Address           string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	BusinessAbout     string `protobuf:"bytes,5,opt,name=business_about,json=businessAbout,proto3" json:"business_about,omitempty"`
	Email             string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *TourHostsInfo) Reset() {
	*x = TourHostsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TourHostsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourHostsInfo) ProtoMessage() {}

func (x *TourHostsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourHostsInfo.ProtoReflect.Descriptor instead.
func (*TourHostsInfo) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{69}
}

func (x *TourHostsInfo) GetProfilePictureUrl() string {
	if x != nil {
		return x.ProfilePictureUrl
	}
	return ""
}

func (x *TourHostsInfo) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *TourHostsInfo) GetBusinessCategory() string {
	if x != nil {
		return x.BusinessCategory
	}
	return ""
}

func (x *TourHostsInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TourHostsInfo) GetBusinessAbout() string {
	if x != nil {
		return x.BusinessAbout
	}
	return ""
}

func (x *TourHostsInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type BrowseHostTourPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     []*HostsTourPackage `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Paginate *Paginate           `protobuf:"bytes,2,opt,name=paginate,proto3" json:"paginate,omitempty"`
}

func (x *BrowseHostTourPackage) Reset() {
	*x = BrowseHostTourPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowseHostTourPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowseHostTourPackage) ProtoMessage() {}

func (x *BrowseHostTourPackage) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowseHostTourPackage.ProtoReflect.Descriptor instead.
func (*BrowseHostTourPackage) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{70}
}

func (x *BrowseHostTourPackage) GetData() []*HostsTourPackage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BrowseHostTourPackage) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

type RequestSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *RequestSync) Reset() {
	*x = RequestSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSync) ProtoMessage() {}

func (x *RequestSync) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSync.ProtoReflect.Descriptor instead.
func (*RequestSync) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{71}
}

func (x *RequestSync) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ResponseSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string             `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Data  []*TourPackageSync `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseSync) Reset() {
	*x = ResponseSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseSync) ProtoMessage() {}

func (x *ResponseSync) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseSync.ProtoReflect.Descriptor instead.
func (*ResponseSync) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{72}
}

func (x *ResponseSync) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseSync) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseSync) GetData() []*TourPackageSync {
	if x != nil {
		return x.Data
	}
	return nil
}

type TourPackageSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourId      string             `protobuf:"bytes,1,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	Title       string             `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Medias      []*PackageMedia    `protobuf:"bytes,3,rep,name=medias,proto3" json:"medias,omitempty"`
	Schedules   []*PackageSchedule `protobuf:"bytes,4,rep,name=schedules,proto3" json:"schedules,omitempty"`
	Description string             `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Categories  []string           `protobuf:"bytes,7,rep,name=categories,proto3" json:"categories,omitempty"`
	Tags        []string           `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	Location    string             `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
	// @inject_tag: json:"rate"
	Rate float64 `protobuf:"fixed64,10,opt,name=rate,proto3" json:"rate,omitempty"`
	// @inject_tag: json:"review"
	Review           float64                `protobuf:"fixed64,11,opt,name=review,proto3" json:"review,omitempty"`
	Addons           []*PackageAddon        `protobuf:"bytes,12,rep,name=addons,proto3" json:"addons,omitempty"`
	IsCurated        bool                   `protobuf:"varint,13,opt,name=is_curated,json=isCurated,proto3" json:"is_curated,omitempty"`
	IsFeatured       bool                   `protobuf:"varint,14,opt,name=is_featured,json=isFeatured,proto3" json:"is_featured,omitempty"`
	IsRefundable     bool                   `protobuf:"varint,15,opt,name=is_refundable,json=isRefundable,proto3" json:"is_refundable,omitempty"`
	HostId           string                 `protobuf:"bytes,16,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	TypeTour         string                 `protobuf:"bytes,17,opt,name=type_tour,json=typeTour,proto3" json:"type_tour,omitempty"`
	Prices           []*PackagePrice        `protobuf:"bytes,18,rep,name=prices,proto3" json:"prices,omitempty"`
	TermsOfService   string                 `protobuf:"bytes,19,opt,name=terms_of_service,json=termsOfService,proto3" json:"terms_of_service,omitempty"`
	CustomPolicies   []*CustomPolicy        `protobuf:"bytes,20,rep,name=custom_policies,json=customPolicies,proto3" json:"custom_policies,omitempty"`
	AgeRestriction   string                 `protobuf:"bytes,21,opt,name=age_restriction,json=ageRestriction,proto3" json:"age_restriction,omitempty"`
	CostForeignGuest string                 `protobuf:"bytes,22,opt,name=cost_foreign_guest,json=costForeignGuest,proto3" json:"cost_foreign_guest,omitempty"`
	Itinerary        string                 `protobuf:"bytes,23,opt,name=itinerary,proto3" json:"itinerary,omitempty"`
	PolicyTitle      string                 `protobuf:"bytes,24,opt,name=policy_title,json=policyTitle,proto3" json:"policy_title,omitempty"`
	Policy           string                 `protobuf:"bytes,25,opt,name=policy,proto3" json:"policy,omitempty"`
	AdditionalCost   *AdditionalCost        `protobuf:"bytes,26,opt,name=additional_cost,json=additionalCost,proto3" json:"additional_cost,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	DeleteStatus     bool                   `protobuf:"varint,28,opt,name=delete_status,json=deleteStatus,proto3" json:"delete_status,omitempty"`
	UserUid          string                 `protobuf:"bytes,29,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	HavePromotion    bool                   `protobuf:"varint,30,opt,name=have_promotion,json=havePromotion,proto3" json:"have_promotion,omitempty"`
	UpdateAt         *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	PromoInfo        []*Promotion           `protobuf:"bytes,32,rep,name=promo_info,json=promoInfo,proto3" json:"promo_info,omitempty"`
}

func (x *TourPackageSync) Reset() {
	*x = TourPackageSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TourPackageSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourPackageSync) ProtoMessage() {}

func (x *TourPackageSync) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourPackageSync.ProtoReflect.Descriptor instead.
func (*TourPackageSync) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{73}
}

func (x *TourPackageSync) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *TourPackageSync) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TourPackageSync) GetMedias() []*PackageMedia {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *TourPackageSync) GetSchedules() []*PackageSchedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *TourPackageSync) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TourPackageSync) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *TourPackageSync) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TourPackageSync) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *TourPackageSync) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *TourPackageSync) GetReview() float64 {
	if x != nil {
		return x.Review
	}
	return 0
}

func (x *TourPackageSync) GetAddons() []*PackageAddon {
	if x != nil {
		return x.Addons
	}
	return nil
}

func (x *TourPackageSync) GetIsCurated() bool {
	if x != nil {
		return x.IsCurated
	}
	return false
}

func (x *TourPackageSync) GetIsFeatured() bool {
	if x != nil {
		return x.IsFeatured
	}
	return false
}

func (x *TourPackageSync) GetIsRefundable() bool {
	if x != nil {
		return x.IsRefundable
	}
	return false
}

func (x *TourPackageSync) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *TourPackageSync) GetTypeTour() string {
	if x != nil {
		return x.TypeTour
	}
	return ""
}

func (x *TourPackageSync) GetPrices() []*PackagePrice {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *TourPackageSync) GetTermsOfService() string {
	if x != nil {
		return x.TermsOfService
	}
	return ""
}

func (x *TourPackageSync) GetCustomPolicies() []*CustomPolicy {
	if x != nil {
		return x.CustomPolicies
	}
	return nil
}

func (x *TourPackageSync) GetAgeRestriction() string {
	if x != nil {
		return x.AgeRestriction
	}
	return ""
}

func (x *TourPackageSync) GetCostForeignGuest() string {
	if x != nil {
		return x.CostForeignGuest
	}
	return ""
}

func (x *TourPackageSync) GetItinerary() string {
	if x != nil {
		return x.Itinerary
	}
	return ""
}

func (x *TourPackageSync) GetPolicyTitle() string {
	if x != nil {
		return x.PolicyTitle
	}
	return ""
}

func (x *TourPackageSync) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *TourPackageSync) GetAdditionalCost() *AdditionalCost {
	if x != nil {
		return x.AdditionalCost
	}
	return nil
}

func (x *TourPackageSync) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TourPackageSync) GetDeleteStatus() bool {
	if x != nil {
		return x.DeleteStatus
	}
	return false
}

func (x *TourPackageSync) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *TourPackageSync) GetHavePromotion() bool {
	if x != nil {
		return x.HavePromotion
	}
	return false
}

func (x *TourPackageSync) GetUpdateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

func (x *TourPackageSync) GetPromoInfo() []*Promotion {
	if x != nil {
		return x.PromoInfo
	}
	return nil
}

type Promotion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PromoId    string                 `protobuf:"bytes,1,opt,name=promo_id,json=promoId,proto3" json:"promo_id,omitempty"`
	TitlePromo string                 `protobuf:"bytes,2,opt,name=title_promo,json=titlePromo,proto3" json:"title_promo,omitempty"`
	CodePromo  string                 `protobuf:"bytes,3,opt,name=code_promo,json=codePromo,proto3" json:"code_promo,omitempty"`
	Discount   float64                `protobuf:"fixed64,4,opt,name=discount,proto3" json:"discount,omitempty"`
	Expired    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expired,proto3" json:"expired,omitempty"`
	IsActive   bool                   `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *Promotion) Reset() {
	*x = Promotion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Promotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Promotion) ProtoMessage() {}

func (x *Promotion) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Promotion.ProtoReflect.Descriptor instead.
func (*Promotion) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{74}
}

func (x *Promotion) GetPromoId() string {
	if x != nil {
		return x.PromoId
	}
	return ""
}

func (x *Promotion) GetTitlePromo() string {
	if x != nil {
		return x.TitlePromo
	}
	return ""
}

func (x *Promotion) GetCodePromo() string {
	if x != nil {
		return x.CodePromo
	}
	return ""
}

func (x *Promotion) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *Promotion) GetExpired() *timestamppb.Timestamp {
	if x != nil {
		return x.Expired
	}
	return nil
}

func (x *Promotion) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type ChangeRequestDemo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourId     string `protobuf:"bytes,1,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	ScheduleId string `protobuf:"bytes,2,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Status     string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ChangeRequestDemo) Reset() {
	*x = ChangeRequestDemo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tourpackage_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeRequestDemo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeRequestDemo) ProtoMessage() {}

func (x *ChangeRequestDemo) ProtoReflect() protoreflect.Message {
	mi := &file_tourpackage_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeRequestDemo.ProtoReflect.Descriptor instead.
func (*ChangeRequestDemo) Descriptor() ([]byte, []int) {
	return file_tourpackage_proto_rawDescGZIP(), []int{75}
}

func (x *ChangeRequestDemo) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *ChangeRequestDemo) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *ChangeRequestDemo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_tourpackage_proto protoreflect.FileDescriptor

var file_tourpackage_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xbf, 0x09, 0x0a, 0x0b, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x73, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x31, 0x0a, 0x06, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x5f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x74, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x72, 0x79, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x74, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x72, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74,
	0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x68,
	0x61, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x69,
	0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x73,
	0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0xfd, 0x08, 0x0a, 0x08, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x20, 0x0a,
	0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x73, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75,
	0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b,
	0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74,
	0x6c, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x22, 0x5c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x22,
	0xeb, 0x07, 0x0a, 0x12, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x06, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x75, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x6f, 0x75, 0x72,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x12, 0x31, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x06, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x6f, 0x66, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a,
	0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x67, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x74, 0x69, 0x6e,
	0x65, 0x72, 0x61, 0x72, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x74, 0x69,
	0x6e, 0x65, 0x72, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x73, 0x0a,
	0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x43, 0x0a, 0x13, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x73, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x42, 0x0a, 0x12,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54,
	0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x31, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x0a, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x47, 0x0a, 0x17, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75,
	0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x68,
	0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x43,
	0x0a, 0x12, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdc, 0x03, 0x0a, 0x0f, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69,
	0x6e, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x69, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6f,
	0x6e, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6f, 0x6e,
	0x68, 0x6f, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0xc8, 0x03, 0x0a, 0x15, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x42, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x42, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x40, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x46, 0x0a, 0x12, 0x42, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xbb, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x69, 0x6e, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x69, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x22,
	0xd2, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f,
	0x75, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x71, 0x74,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x22, 0x60, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3b, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x22, 0x3d, 0x0a, 0x10, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x87, 0x02, 0x0a, 0x0c, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x69, 0x64, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x69, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x6b, 0x69, 0x64, 0x5f, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4b, 0x69, 0x64,
	0x41, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x69, 0x64, 0x5f, 0x61,
	0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4b, 0x69, 0x64,
	0x41, 0x67, 0x65, 0x22, 0xee, 0x02, 0x0a, 0x16, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x69, 0x6e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x69,
	0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b,
	0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x6b,
	0x69, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69,
	0x6e, 0x4b, 0x69, 0x64, 0x41, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6b,
	0x69, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x4b, 0x69, 0x64, 0x41, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0x44, 0x0a, 0x13, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x74, 0x0a, 0x11, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12,
	0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x22, 0x50, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x0d, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0x84, 0x02, 0x0a, 0x15, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f,
	0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0xe4, 0x02, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x69, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x65,
	0x64, 0x22, 0x49, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6d, 0x0a, 0x0b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x43, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x67, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7d,
	0x0a, 0x14, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x22, 0x9d, 0x01,
	0x0a, 0x11, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x64, 0x22, 0xa4, 0x01,
	0x0a, 0x12, 0x41, 0x64, 0x64, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x69, 0x64, 0x22, 0x74, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x57, 0x69, 0x73, 0x68, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x57, 0x69, 0x73, 0x68, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x48, 0x0a, 0x10, 0x57, 0x69,
	0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69,
	0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x8c, 0x03, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x57, 0x69, 0x73, 0x68,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x76,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x68, 0x61, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x4d, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x22, 0xf0, 0x02, 0x0a, 0x1f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x69,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61,
	0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x6b, 0x69, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4b, 0x69, 0x64, 0x41, 0x67, 0x65, 0x12,
	0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x69, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4b, 0x69, 0x64, 0x41, 0x67, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x75, 0x6c,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x6b, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x69, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0xaa, 0x04, 0x0a, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x69, 0x64, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x69, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x6b, 0x69, 0x64, 0x5f, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4b, 0x69, 0x64,
	0x41, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x69, 0x64, 0x5f, 0x61,
	0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4b, 0x69, 0x64,
	0x41, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x64, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x69, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x64, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4b, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xe7,
	0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x45, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f,
	0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x2f, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64,
	0x22, 0x92, 0x01, 0x0a, 0x10, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0xb9, 0x04, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x74, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x72, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x74, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x72, 0x79,
	0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x6e, 0x64, 0x12,
	0x37, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0a,
	0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x67, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x69, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x22, 0x6b, 0x0a,
	0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x6f, 0x75, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2b, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x6f, 0x75, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x56, 0x0a, 0x16, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x54,
	0x6f, 0x45, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x84, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f,
	0x75, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4a, 0x0a, 0x1a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x78, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x41, 0x64, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x4b, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x70, 0x0a, 0x10,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x42,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x2b, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22,
	0x53, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x6f, 0x75, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x38, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x73, 0x57, 0x69, 0x73,
	0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xfd,
	0x09, 0x0a, 0x10, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x06, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x31, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x75, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x31, 0x0a,
	0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x72, 0x6d,
	0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x47, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x74, 0x69, 0x6e, 0x65, 0x72, 0x61,
	0x72, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x74, 0x69, 0x6e, 0x65, 0x72,
	0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x44,
	0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x43, 0x6f, 0x73, 0x74, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12,
	0x37, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f,
	0x73, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x76, 0x65, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xe8,
	0x01, 0x0a, 0x0d, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x62,
	0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x7d, 0x0a, 0x15, 0x42, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x22, 0x1f, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x6a, 0x0a, 0x0c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e,
	0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc4, 0x09, 0x0a, 0x0f, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x52, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63,
	0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x43, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74,
	0x6f, 0x75, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x54,
	0x6f, 0x75, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x06,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f,
	0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x42, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x12, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x67, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x73, 0x74, 0x46,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x74, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x72, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x74, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68,
	0x61, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd5, 0x01, 0x0a,
	0x09, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x22, 0x65, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6d, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0xbd, 0x1c, 0x0a, 0x12,
	0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x7f, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x65, 0x6d, 0x6f, 0x12, 0x1e, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x65, 0x6d, 0x6f, 0x1a, 0x1c, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x3a, 0x01, 0x2a, 0x12, 0x4e, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x75, 0x72,
	0x48, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x6f, 0x75, 0x72, 0x1a, 0x1e, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x6f, 0x75, 0x72, 0x12, 0x84, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x1a, 0x20, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x79, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f,
	0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x1a, 0x22, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x6f, 0x75,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x86, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x17, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x1a, 0x1f, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x75,
	0x72, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x6e,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x7a,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x6f, 0x75, 0x72, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x1a, 0x20, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54,
	0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x89, 0x01, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x42, 0x79, 0x48,
	0x6f, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e,
	0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f,
	0x62, 0x79, 0x2d, 0x74, 0x6f, 0x75, 0x72, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x91, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x1a, 0x1e, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x2f, 0x7b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x42, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x1a, 0x20, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12,
	0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x62, 0x79, 0x2d, 0x74, 0x6f, 0x75, 0x72, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x1a, 0x1d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f,
	0x7b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2d, 0x74, 0x6f, 0x75, 0x72, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0x87, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x32, 0x1e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x79,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x1a, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e,
	0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2d, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x1c, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x1a, 0x23, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x22,
	0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x32, 0x3a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x2d, 0x74, 0x6f, 0x2d, 0x65, 0x6e, 0x64, 0x2f, 0x7b, 0x74, 0x6f, 0x75,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f,
	0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0xa4, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x26, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x32, 0x36, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x96, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x2a, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f,
	0x7b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0x7f, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1e, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x1d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x13, 0x45, 0x64, 0x69, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1e, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x1d, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x32, 0x32, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d,
	0x3a, 0x01, 0x2a, 0x12, 0x93, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1e, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x23, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x2a, 0x2d, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x8d, 0x01, 0x0a, 0x0e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x1d, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75,
	0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x61, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x55, 0x49, 0x44, 0x4f, 0x66, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x1a, 0x1e, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x1a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x22, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x65, 0x12, 0x57, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x52, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x1a, 0x22, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x41, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x1a, 0x20, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x19, 0x55, 0x64, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x27, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79,
	0x0a, 0x13, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x45, 0x78, 0x70,
	0x6c, 0x6f, 0x72, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x1a,
	0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x27, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x9f, 0x01, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x56, 0x31, 0x5f, 0x31,
	0x12, 0x1c, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x1a, 0x23,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x6f,
	0x45, 0x6e, 0x64, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x32, 0x3b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x62, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x74, 0x6f, 0x2d, 0x65, 0x6e, 0x64,
	0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x32, 0xc1, 0x03, 0x0a, 0x0f,
	0x57, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x90, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1f, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x33, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x69, 0x73, 0x68, 0x2d,
	0x6c, 0x69, 0x73, 0x74, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x7d, 0x3a,
	0x01, 0x2a, 0x12, 0x83, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x22, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69,
	0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x2f, 0x77, 0x69, 0x73, 0x68, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x94, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x69, 0x73, 0x68, 0x2d,
	0x6c, 0x69, 0x73, 0x74, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x7d, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tourpackage_proto_rawDescOnce sync.Once
	file_tourpackage_proto_rawDescData = file_tourpackage_proto_rawDesc
)

func file_tourpackage_proto_rawDescGZIP() []byte {
	file_tourpackage_proto_rawDescOnce.Do(func() {
		file_tourpackage_proto_rawDescData = protoimpl.X.CompressGZIP(file_tourpackage_proto_rawDescData)
	})
	return file_tourpackage_proto_rawDescData
}

var file_tourpackage_proto_msgTypes = make([]protoimpl.MessageInfo, 76)
var file_tourpackage_proto_goTypes = []interface{}{
	(*TourPackage)(nil),                      // 0: tourpackage.TourPackage
	(*TourHost)(nil),                         // 1: tourpackage.TourHost
	(*Insurance)(nil),                        // 2: tourpackage.Insurance
	(*TourPackageRequest)(nil),               // 3: tourpackage.TourPackageRequest
	(*CreateTourPackageResponse)(nil),        // 4: tourpackage.CreateTourPackageResponse
	(*TourPackageResponse)(nil),              // 5: tourpackage.TourPackageResponse
	(*UpdateTourPackageResponse)(nil),        // 6: tourpackage.UpdateTourPackageResponse
	(*PackageTagResponse)(nil),               // 7: tourpackage.PackageTagResponse
	(*PackageCategory)(nil),                  // 8: tourpackage.PackageCategory
	(*PackageTag)(nil),                       // 9: tourpackage.PackageTag
	(*PackageCategoryResponse)(nil),          // 10: tourpackage.PackageCategoryResponse
	(*PackageMedia)(nil),                     // 11: tourpackage.PackageMedia
	(*PackageMediaBrowseRequest)(nil),        // 12: tourpackage.PackageMediaBrowseRequest
	(*BrowsePackageMedia)(nil),               // 13: tourpackage.BrowsePackageMedia
	(*PackageMediaResponse)(nil),             // 14: tourpackage.PackageMediaResponse
	(*PackageSchedule)(nil),                  // 15: tourpackage.PackageSchedule
	(*ScheduleBrowseRequest)(nil),            // 16: tourpackage.ScheduleBrowseRequest
	(*AddOnBrowseRequest)(nil),               // 17: tourpackage.AddOnBrowseRequest
	(*BrowseTourAddon)(nil),                  // 18: tourpackage.BrowseTourAddon
	(*BrowseTourSchedule)(nil),               // 19: tourpackage.BrowseTourSchedule
	(*PackageScheduleResponse)(nil),          // 20: tourpackage.PackageScheduleResponse
	(*PackageAddon)(nil),                     // 21: tourpackage.PackageAddon
	(*CustomPolicy)(nil),                     // 22: tourpackage.CustomPolicy
	(*DeletePackageResponse)(nil),            // 23: tourpackage.DeletePackageResponse
	(*GeneralResponse)(nil),                  // 24: tourpackage.GeneralResponse
	(*TourHostResponse)(nil),                 // 25: tourpackage.TourHostResponse
	(*PackageAddonResponse)(nil),             // 26: tourpackage.PackageAddonResponse
	(*PackagePrice)(nil),                     // 27: tourpackage.PackagePrice
	(*PriceListBrowseRequest)(nil),           // 28: tourpackage.PriceListBrowseRequest
	(*BrowseTourPriceList)(nil),              // 29: tourpackage.BrowseTourPriceList
	(*BrowseTourPackage)(nil),                // 30: tourpackage.BrowseTourPackage
	(*Filter)(nil),                           // 31: tourpackage.Filter
	(*BrowseRequest)(nil),                    // 32: tourpackage.BrowseRequest
	(*BrowseRequestWishList)(nil),            // 33: tourpackage.BrowseRequestWishList
	(*DeleteSchedule)(nil),                   // 34: tourpackage.DeleteSchedule
	(*DeleteScheduleResponse)(nil),           // 35: tourpackage.DeleteScheduleResponse
	(*DeleteAddon)(nil),                      // 36: tourpackage.DeleteAddon
	(*DeleteAddonResponse)(nil),              // 37: tourpackage.DeleteAddonResponse
	(*DeleteMedia)(nil),                      // 38: tourpackage.DeleteMedia
	(*DeleteMediaResponse)(nil),              // 39: tourpackage.DeleteMediaResponse
	(*CategoryListResponse)(nil),             // 40: tourpackage.CategoryListResponse
	(*CategoriesListing)(nil),                // 41: tourpackage.CategoriesListing
	(*AddWishListRequest)(nil),               // 42: tourpackage.AddWishListRequest
	(*AddWishListResponse)(nil),              // 43: tourpackage.AddWishListResponse
	(*WishListResponse)(nil),                 // 44: tourpackage.WishListResponse
	(*GetWishListResponse)(nil),              // 45: tourpackage.GetWishListResponse
	(*HostInfo)(nil),                         // 46: tourpackage.HostInfo
	(*RequestDetailPriceByParticipant)(nil),  // 47: tourpackage.RequestDetailPriceByParticipant
	(*ResponseDetailPriceByParticipant)(nil), // 48: tourpackage.ResponseDetailPriceByParticipant
	(*UpdateSchedule)(nil),                   // 49: tourpackage.UpdateSchedule
	(*ReopenSchedule)(nil),                   // 50: tourpackage.ReopenSchedule
	(*UpdateScheduleRespone)(nil),            // 51: tourpackage.UpdateScheduleRespone
	(*RequestTourPackage)(nil),               // 52: tourpackage.RequestTourPackage
	(*BroadcastMessage)(nil),                 // 53: tourpackage.BroadcastMessage
	(*UserInfo)(nil),                         // 54: tourpackage.UserInfo
	(*ActiveTour)(nil),                       // 55: tourpackage.ActiveTour
	(*ParamActiveTour)(nil),                  // 56: tourpackage.ParamActiveTour
	(*ResponseActiveTour)(nil),               // 57: tourpackage.ResponseActiveTour
	(*ResponseConfirmedToEnd)(nil),           // 58: tourpackage.ResponseConfirmedToEnd
	(*Paginate)(nil),                         // 59: tourpackage.Paginate
	(*ScheduleTourStatus)(nil),               // 60: tourpackage.ScheduleTourStatus
	(*ScheduleTourStatusResponse)(nil),       // 61: tourpackage.ScheduleTourStatusResponse
	(*AdditionalCost)(nil),                   // 62: tourpackage.AdditionalCost
	(*CategoryResponse)(nil),                 // 63: tourpackage.CategoryResponse
	(*DeleteCategoryResponse)(nil),           // 64: tourpackage.DeleteCategoryResponse
	(*RequestCountTour)(nil),                 // 65: tourpackage.RequestCountTour
	(*ResponseCountTour)(nil),                // 66: tourpackage.ResponseCountTour
	(*UsersWishlistResponse)(nil),            // 67: tourpackage.UsersWishlistResponse
	(*HostsTourPackage)(nil),                 // 68: tourpackage.HostsTourPackage
	(*TourHostsInfo)(nil),                    // 69: tourpackage.TourHostsInfo
	(*BrowseHostTourPackage)(nil),            // 70: tourpackage.BrowseHostTourPackage
	(*RequestSync)(nil),                      // 71: tourpackage.RequestSync
	(*ResponseSync)(nil),                     // 72: tourpackage.ResponseSync
	(*TourPackageSync)(nil),                  // 73: tourpackage.TourPackageSync
	(*Promotion)(nil),                        // 74: tourpackage.Promotion
	(*ChangeRequestDemo)(nil),                // 75: tourpackage.ChangeRequestDemo
	(*timestamppb.Timestamp)(nil),            // 76: google.protobuf.Timestamp
}
var file_tourpackage_proto_depIdxs = []int32{
	11,  // 0: tourpackage.TourPackage.medias:type_name -> tourpackage.PackageMedia
	15,  // 1: tourpackage.TourPackage.schedules:type_name -> tourpackage.PackageSchedule
	21,  // 2: tourpackage.TourPackage.addons:type_name -> tourpackage.PackageAddon
	27,  // 3: tourpackage.TourPackage.prices:type_name -> tourpackage.PackagePrice
	22,  // 4: tourpackage.TourPackage.custom_policies:type_name -> tourpackage.CustomPolicy
	62,  // 5: tourpackage.TourPackage.additional_cost:type_name -> tourpackage.AdditionalCost
	76,  // 6: tourpackage.TourPackage.created_at:type_name -> google.protobuf.Timestamp
	76,  // 7: tourpackage.TourPackage.update_at:type_name -> google.protobuf.Timestamp
	2,   // 8: tourpackage.TourPackage.insurance:type_name -> tourpackage.Insurance
	76,  // 9: tourpackage.TourHost.date_of_birth:type_name -> google.protobuf.Timestamp
	76,  // 10: tourpackage.TourHost.updated_at:type_name -> google.protobuf.Timestamp
	76,  // 11: tourpackage.TourHost.created_at:type_name -> google.protobuf.Timestamp
	76,  // 12: tourpackage.TourHost.verified_at:type_name -> google.protobuf.Timestamp
	11,  // 13: tourpackage.TourPackageRequest.medias:type_name -> tourpackage.PackageMedia
	15,  // 14: tourpackage.TourPackageRequest.schedules:type_name -> tourpackage.PackageSchedule
	21,  // 15: tourpackage.TourPackageRequest.addons:type_name -> tourpackage.PackageAddon
	27,  // 16: tourpackage.TourPackageRequest.prices:type_name -> tourpackage.PackagePrice
	22,  // 17: tourpackage.TourPackageRequest.custom_policies:type_name -> tourpackage.CustomPolicy
	62,  // 18: tourpackage.TourPackageRequest.additional_cost:type_name -> tourpackage.AdditionalCost
	2,   // 19: tourpackage.TourPackageRequest.insurance:type_name -> tourpackage.Insurance
	0,   // 20: tourpackage.CreateTourPackageResponse.data:type_name -> tourpackage.TourPackage
	0,   // 21: tourpackage.TourPackageResponse.data:type_name -> tourpackage.TourPackage
	0,   // 22: tourpackage.UpdateTourPackageResponse.data:type_name -> tourpackage.TourPackage
	0,   // 23: tourpackage.PackageTagResponse.data:type_name -> tourpackage.TourPackage
	0,   // 24: tourpackage.PackageCategoryResponse.data:type_name -> tourpackage.TourPackage
	11,  // 25: tourpackage.BrowsePackageMedia.data:type_name -> tourpackage.PackageMedia
	0,   // 26: tourpackage.PackageMediaResponse.data:type_name -> tourpackage.TourPackage
	76,  // 27: tourpackage.PackageSchedule.start_date:type_name -> google.protobuf.Timestamp
	76,  // 28: tourpackage.PackageSchedule.end_date:type_name -> google.protobuf.Timestamp
	76,  // 29: tourpackage.PackageSchedule.onhold_date:type_name -> google.protobuf.Timestamp
	76,  // 30: tourpackage.ScheduleBrowseRequest.start_date:type_name -> google.protobuf.Timestamp
	76,  // 31: tourpackage.ScheduleBrowseRequest.end_date:type_name -> google.protobuf.Timestamp
	31,  // 32: tourpackage.ScheduleBrowseRequest.filters:type_name -> tourpackage.Filter
	31,  // 33: tourpackage.AddOnBrowseRequest.filters:type_name -> tourpackage.Filter
	21,  // 34: tourpackage.BrowseTourAddon.data:type_name -> tourpackage.PackageAddon
	15,  // 35: tourpackage.BrowseTourSchedule.data:type_name -> tourpackage.PackageSchedule
	0,   // 36: tourpackage.PackageScheduleResponse.data:type_name -> tourpackage.TourPackage
	0,   // 37: tourpackage.DeletePackageResponse.data:type_name -> tourpackage.TourPackage
	1,   // 38: tourpackage.TourHostResponse.data:type_name -> tourpackage.TourHost
	0,   // 39: tourpackage.PackageAddonResponse.data:type_name -> tourpackage.TourPackage
	31,  // 40: tourpackage.PriceListBrowseRequest.filters:type_name -> tourpackage.Filter
	27,  // 41: tourpackage.BrowseTourPriceList.data:type_name -> tourpackage.PackagePrice
	0,   // 42: tourpackage.BrowseTourPackage.data:type_name -> tourpackage.TourPackage
	59,  // 43: tourpackage.BrowseTourPackage.paginate:type_name -> tourpackage.Paginate
	31,  // 44: tourpackage.BrowseRequest.filters:type_name -> tourpackage.Filter
	31,  // 45: tourpackage.BrowseRequestWishList.filters:type_name -> tourpackage.Filter
	76,  // 46: tourpackage.DeleteSchedule.start_date:type_name -> google.protobuf.Timestamp
	76,  // 47: tourpackage.DeleteSchedule.end_date:type_name -> google.protobuf.Timestamp
	34,  // 48: tourpackage.DeleteScheduleResponse.data:type_name -> tourpackage.DeleteSchedule
	36,  // 49: tourpackage.DeleteAddonResponse.data:type_name -> tourpackage.DeleteAddon
	38,  // 50: tourpackage.DeleteMediaResponse.data:type_name -> tourpackage.DeleteMedia
	41,  // 51: tourpackage.CategoryListResponse.data:type_name -> tourpackage.CategoriesListing
	59,  // 52: tourpackage.CategoryListResponse.paginate:type_name -> tourpackage.Paginate
	42,  // 53: tourpackage.AddWishListResponse.data:type_name -> tourpackage.AddWishListRequest
	45,  // 54: tourpackage.WishListResponse.data:type_name -> tourpackage.GetWishListResponse
	11,  // 55: tourpackage.GetWishListResponse.medias:type_name -> tourpackage.PackageMedia
	15,  // 56: tourpackage.GetWishListResponse.schedules:type_name -> tourpackage.PackageSchedule
	46,  // 57: tourpackage.GetWishListResponse.host_info:type_name -> tourpackage.HostInfo
	15,  // 58: tourpackage.ReopenSchedule.schedules:type_name -> tourpackage.PackageSchedule
	76,  // 59: tourpackage.ReopenSchedule.end_date_payment:type_name -> google.protobuf.Timestamp
	0,   // 60: tourpackage.UpdateScheduleRespone.data:type_name -> tourpackage.TourPackage
	76,  // 61: tourpackage.BroadcastMessage.created_at:type_name -> google.protobuf.Timestamp
	54,  // 62: tourpackage.BroadcastMessage.host:type_name -> tourpackage.UserInfo
	11,  // 63: tourpackage.ActiveTour.medias:type_name -> tourpackage.PackageMedia
	15,  // 64: tourpackage.ActiveTour.schedules:type_name -> tourpackage.PackageSchedule
	53,  // 65: tourpackage.ActiveTour.message:type_name -> tourpackage.BroadcastMessage
	54,  // 66: tourpackage.ActiveTour.host_info:type_name -> tourpackage.UserInfo
	54,  // 67: tourpackage.ActiveTour.guest_info:type_name -> tourpackage.UserInfo
	55,  // 68: tourpackage.ResponseActiveTour.data:type_name -> tourpackage.ActiveTour
	0,   // 69: tourpackage.ScheduleTourStatusResponse.data:type_name -> tourpackage.TourPackage
	41,  // 70: tourpackage.CategoryResponse.data:type_name -> tourpackage.CategoriesListing
	11,  // 71: tourpackage.HostsTourPackage.medias:type_name -> tourpackage.PackageMedia
	15,  // 72: tourpackage.HostsTourPackage.schedules:type_name -> tourpackage.PackageSchedule
	21,  // 73: tourpackage.HostsTourPackage.addons:type_name -> tourpackage.PackageAddon
	27,  // 74: tourpackage.HostsTourPackage.prices:type_name -> tourpackage.PackagePrice
	22,  // 75: tourpackage.HostsTourPackage.custom_policies:type_name -> tourpackage.CustomPolicy
	62,  // 76: tourpackage.HostsTourPackage.additional_cost:type_name -> tourpackage.AdditionalCost
	76,  // 77: tourpackage.HostsTourPackage.created_at:type_name -> google.protobuf.Timestamp
	76,  // 78: tourpackage.HostsTourPackage.update_at:type_name -> google.protobuf.Timestamp
	69,  // 79: tourpackage.HostsTourPackage.host_info:type_name -> tourpackage.TourHostsInfo
	2,   // 80: tourpackage.HostsTourPackage.insurance:type_name -> tourpackage.Insurance
	68,  // 81: tourpackage.BrowseHostTourPackage.data:type_name -> tourpackage.HostsTourPackage
	59,  // 82: tourpackage.BrowseHostTourPackage.paginate:type_name -> tourpackage.Paginate
	73,  // 83: tourpackage.ResponseSync.data:type_name -> tourpackage.TourPackageSync
	11,  // 84: tourpackage.TourPackageSync.medias:type_name -> tourpackage.PackageMedia
	15,  // 85: tourpackage.TourPackageSync.schedules:type_name -> tourpackage.PackageSchedule
	21,  // 86: tourpackage.TourPackageSync.addons:type_name -> tourpackage.PackageAddon
	27,  // 87: tourpackage.TourPackageSync.prices:type_name -> tourpackage.PackagePrice
	22,  // 88: tourpackage.TourPackageSync.custom_policies:type_name -> tourpackage.CustomPolicy
	62,  // 89: tourpackage.TourPackageSync.additional_cost:type_name -> tourpackage.AdditionalCost
	76,  // 90: tourpackage.TourPackageSync.created_at:type_name -> google.protobuf.Timestamp
	76,  // 91: tourpackage.TourPackageSync.update_at:type_name -> google.protobuf.Timestamp
	74,  // 92: tourpackage.TourPackageSync.promo_info:type_name -> tourpackage.Promotion
	76,  // 93: tourpackage.Promotion.expired:type_name -> google.protobuf.Timestamp
	75,  // 94: tourpackage.TourPackageService.ChangeStatusDemo:input_type -> tourpackage.ChangeRequestDemo
	65,  // 95: tourpackage.TourPackageService.CountTourHost:input_type -> tourpackage.RequestCountTour
	0,   // 96: tourpackage.TourPackageService.CreateTourPackage:input_type -> tourpackage.TourPackage
	0,   // 97: tourpackage.TourPackageService.DeleteTourPackage:input_type -> tourpackage.TourPackage
	55,  // 98: tourpackage.TourPackageService.GetActiveTour:input_type -> tourpackage.ActiveTour
	32,  // 99: tourpackage.TourPackageService.GetTourPackage:input_type -> tourpackage.BrowseRequest
	0,   // 100: tourpackage.TourPackageService.GetDetailTourPackage:input_type -> tourpackage.TourPackage
	32,  // 101: tourpackage.TourPackageService.GetTourPackageByHostID:input_type -> tourpackage.BrowseRequest
	0,   // 102: tourpackage.TourPackageService.GetTourPackageRecommendations:input_type -> tourpackage.TourPackage
	0,   // 103: tourpackage.TourPackageService.GetDetailTourPackageByHostID:input_type -> tourpackage.TourPackage
	0,   // 104: tourpackage.TourPackageService.GetDetailHost:input_type -> tourpackage.TourPackage
	3,   // 105: tourpackage.TourPackageService.UpdateTourPackage:input_type -> tourpackage.TourPackageRequest
	32,  // 106: tourpackage.TourPackageService.GetListCategory:input_type -> tourpackage.BrowseRequest
	56,  // 107: tourpackage.TourPackageService.ConfirmEndTour:input_type -> tourpackage.ParamActiveTour
	15,  // 108: tourpackage.TourPackageService.AddSchedule:input_type -> tourpackage.PackageSchedule
	15,  // 109: tourpackage.TourPackageService.UpdateScheduleTourPackage:input_type -> tourpackage.PackageSchedule
	15,  // 110: tourpackage.TourPackageService.DeleteSchedule:input_type -> tourpackage.PackageSchedule
	41,  // 111: tourpackage.TourPackageService.AddCategoryByAdmin:input_type -> tourpackage.CategoriesListing
	41,  // 112: tourpackage.TourPackageService.EditCategoryByAdmin:input_type -> tourpackage.CategoriesListing
	41,  // 113: tourpackage.TourPackageService.DeleteCategoryByAdmin:input_type -> tourpackage.CategoriesListing
	41,  // 114: tourpackage.TourPackageService.DetailCategory:input_type -> tourpackage.CategoriesListing
	52,  // 115: tourpackage.TourPackageService.GetTourPackageByUserUIDOfHosts:input_type -> tourpackage.RequestTourPackage
	49,  // 116: tourpackage.TourPackageService.UpdateScheduleAfterBooking:input_type -> tourpackage.UpdateSchedule
	50,  // 117: tourpackage.TourPackageService.UpdateScheduleStatus:input_type -> tourpackage.ReopenSchedule
	0,   // 118: tourpackage.TourPackageService.UpdateReviewAndRate:input_type -> tourpackage.TourPackage
	60,  // 119: tourpackage.TourPackageService.UdpdateScheduleTourStatus:input_type -> tourpackage.ScheduleTourStatus
	71,  // 120: tourpackage.TourPackageService.SynchronizeExplorer:input_type -> tourpackage.RequestSync
	56,  // 121: tourpackage.TourPackageService.ConfirmEndTourV1_1:input_type -> tourpackage.ParamActiveTour
	42,  // 122: tourpackage.WishListService.AddWishList:input_type -> tourpackage.AddWishListRequest
	33,  // 123: tourpackage.WishListService.GetWishList:input_type -> tourpackage.BrowseRequestWishList
	33,  // 124: tourpackage.WishListService.UsersWishlist:input_type -> tourpackage.BrowseRequestWishList
	24,  // 125: tourpackage.TourPackageService.ChangeStatusDemo:output_type -> tourpackage.GeneralResponse
	66,  // 126: tourpackage.TourPackageService.CountTourHost:output_type -> tourpackage.ResponseCountTour
	5,   // 127: tourpackage.TourPackageService.CreateTourPackage:output_type -> tourpackage.TourPackageResponse
	23,  // 128: tourpackage.TourPackageService.DeleteTourPackage:output_type -> tourpackage.DeletePackageResponse
	57,  // 129: tourpackage.TourPackageService.GetActiveTour:output_type -> tourpackage.ResponseActiveTour
	70,  // 130: tourpackage.TourPackageService.GetTourPackage:output_type -> tourpackage.BrowseHostTourPackage
	5,   // 131: tourpackage.TourPackageService.GetDetailTourPackage:output_type -> tourpackage.TourPackageResponse
	30,  // 132: tourpackage.TourPackageService.GetTourPackageByHostID:output_type -> tourpackage.BrowseTourPackage
	30,  // 133: tourpackage.TourPackageService.GetTourPackageRecommendations:output_type -> tourpackage.BrowseTourPackage
	5,   // 134: tourpackage.TourPackageService.GetDetailTourPackageByHostID:output_type -> tourpackage.TourPackageResponse
	25,  // 135: tourpackage.TourPackageService.GetDetailHost:output_type -> tourpackage.TourHostResponse
	6,   // 136: tourpackage.TourPackageService.UpdateTourPackage:output_type -> tourpackage.UpdateTourPackageResponse
	40,  // 137: tourpackage.TourPackageService.GetListCategory:output_type -> tourpackage.CategoryListResponse
	58,  // 138: tourpackage.TourPackageService.ConfirmEndTour:output_type -> tourpackage.ResponseConfirmedToEnd
	6,   // 139: tourpackage.TourPackageService.AddSchedule:output_type -> tourpackage.UpdateTourPackageResponse
	6,   // 140: tourpackage.TourPackageService.UpdateScheduleTourPackage:output_type -> tourpackage.UpdateTourPackageResponse
	6,   // 141: tourpackage.TourPackageService.DeleteSchedule:output_type -> tourpackage.UpdateTourPackageResponse
	63,  // 142: tourpackage.TourPackageService.AddCategoryByAdmin:output_type -> tourpackage.CategoryResponse
	63,  // 143: tourpackage.TourPackageService.EditCategoryByAdmin:output_type -> tourpackage.CategoryResponse
	64,  // 144: tourpackage.TourPackageService.DeleteCategoryByAdmin:output_type -> tourpackage.DeleteCategoryResponse
	63,  // 145: tourpackage.TourPackageService.DetailCategory:output_type -> tourpackage.CategoryResponse
	30,  // 146: tourpackage.TourPackageService.GetTourPackageByUserUIDOfHosts:output_type -> tourpackage.BrowseTourPackage
	51,  // 147: tourpackage.TourPackageService.UpdateScheduleAfterBooking:output_type -> tourpackage.UpdateScheduleRespone
	51,  // 148: tourpackage.TourPackageService.UpdateScheduleStatus:output_type -> tourpackage.UpdateScheduleRespone
	5,   // 149: tourpackage.TourPackageService.UpdateReviewAndRate:output_type -> tourpackage.TourPackageResponse
	61,  // 150: tourpackage.TourPackageService.UdpdateScheduleTourStatus:output_type -> tourpackage.ScheduleTourStatusResponse
	72,  // 151: tourpackage.TourPackageService.SynchronizeExplorer:output_type -> tourpackage.ResponseSync
	58,  // 152: tourpackage.TourPackageService.ConfirmEndTourV1_1:output_type -> tourpackage.ResponseConfirmedToEnd
	43,  // 153: tourpackage.WishListService.AddWishList:output_type -> tourpackage.AddWishListResponse
	44,  // 154: tourpackage.WishListService.GetWishList:output_type -> tourpackage.WishListResponse
	67,  // 155: tourpackage.WishListService.UsersWishlist:output_type -> tourpackage.UsersWishlistResponse
	125, // [125:156] is the sub-list for method output_type
	94,  // [94:125] is the sub-list for method input_type
	94,  // [94:94] is the sub-list for extension type_name
	94,  // [94:94] is the sub-list for extension extendee
	0,   // [0:94] is the sub-list for field type_name
}

func init() { file_tourpackage_proto_init() }
func file_tourpackage_proto_init() {
	if File_tourpackage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tourpackage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TourPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TourHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Insurance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TourPackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTourPackageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TourPackageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTourPackageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageCategoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageMediaBrowseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowsePackageMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageMediaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleBrowseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOnBrowseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowseTourAddon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowseTourSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageAddon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePackageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TourHostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageAddonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceListBrowseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowseTourPriceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowseTourPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowseRequestWishList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAddon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAddonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMediaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoriesListing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddWishListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddWishListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WishListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWishListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestDetailPriceByParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseDetailPriceByParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReopenSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScheduleRespone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTourPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveTour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParamActiveTour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseActiveTour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseConfirmedToEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paginate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleTourStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleTourStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCategoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCountTour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseCountTour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersWishlistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostsTourPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TourHostsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowseHostTourPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TourPackageSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Promotion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tourpackage_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeRequestDemo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tourpackage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   76,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_tourpackage_proto_goTypes,
		DependencyIndexes: file_tourpackage_proto_depIdxs,
		MessageInfos:      file_tourpackage_proto_msgTypes,
	}.Build()
	File_tourpackage_proto = out.File
	file_tourpackage_proto_rawDesc = nil
	file_tourpackage_proto_goTypes = nil
	file_tourpackage_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TourPackageServiceClient is the client API for TourPackageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TourPackageServiceClient interface {
	ChangeStatusDemo(ctx context.Context, in *ChangeRequestDemo, opts ...grpc.CallOption) (*GeneralResponse, error)
	CountTourHost(ctx context.Context, in *RequestCountTour, opts ...grpc.CallOption) (*ResponseCountTour, error)
	CreateTourPackage(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*TourPackageResponse, error)
	DeleteTourPackage(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*DeletePackageResponse, error)
	GetActiveTour(ctx context.Context, in *ActiveTour, opts ...grpc.CallOption) (*ResponseActiveTour, error)
	GetTourPackage(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*BrowseHostTourPackage, error)
	GetDetailTourPackage(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*TourPackageResponse, error)
	GetTourPackageByHostID(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*BrowseTourPackage, error)
	GetTourPackageRecommendations(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*BrowseTourPackage, error)
	GetDetailTourPackageByHostID(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*TourPackageResponse, error)
	GetDetailHost(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*TourHostResponse, error)
	UpdateTourPackage(ctx context.Context, in *TourPackageRequest, opts ...grpc.CallOption) (*UpdateTourPackageResponse, error)
	GetListCategory(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*CategoryListResponse, error)
	ConfirmEndTour(ctx context.Context, in *ParamActiveTour, opts ...grpc.CallOption) (*ResponseConfirmedToEnd, error)
	AddSchedule(ctx context.Context, in *PackageSchedule, opts ...grpc.CallOption) (*UpdateTourPackageResponse, error)
	UpdateScheduleTourPackage(ctx context.Context, in *PackageSchedule, opts ...grpc.CallOption) (*UpdateTourPackageResponse, error)
	DeleteSchedule(ctx context.Context, in *PackageSchedule, opts ...grpc.CallOption) (*UpdateTourPackageResponse, error)
	AddCategoryByAdmin(ctx context.Context, in *CategoriesListing, opts ...grpc.CallOption) (*CategoryResponse, error)
	EditCategoryByAdmin(ctx context.Context, in *CategoriesListing, opts ...grpc.CallOption) (*CategoryResponse, error)
	DeleteCategoryByAdmin(ctx context.Context, in *CategoriesListing, opts ...grpc.CallOption) (*DeleteCategoryResponse, error)
	DetailCategory(ctx context.Context, in *CategoriesListing, opts ...grpc.CallOption) (*CategoryResponse, error)
	//this method ony use for getting package data using its user UID
	GetTourPackageByUserUIDOfHosts(ctx context.Context, in *RequestTourPackage, opts ...grpc.CallOption) (*BrowseTourPackage, error)
	//This service only use after booking process complate
	UpdateScheduleAfterBooking(ctx context.Context, in *UpdateSchedule, opts ...grpc.CallOption) (*UpdateScheduleRespone, error)
	//This service only use after booking failed to paid
	UpdateScheduleStatus(ctx context.Context, in *ReopenSchedule, opts ...grpc.CallOption) (*UpdateScheduleRespone, error)
	//This Service use for update reviews and rateing only
	UpdateReviewAndRate(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*TourPackageResponse, error)
	//This method only use for update tour status
	UdpdateScheduleTourStatus(ctx context.Context, in *ScheduleTourStatus, opts ...grpc.CallOption) (*ScheduleTourStatusResponse, error)
	SynchronizeExplorer(ctx context.Context, in *RequestSync, opts ...grpc.CallOption) (*ResponseSync, error)
	ConfirmEndTourV1_1(ctx context.Context, in *ParamActiveTour, opts ...grpc.CallOption) (*ResponseConfirmedToEnd, error)
}

type tourPackageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTourPackageServiceClient(cc grpc.ClientConnInterface) TourPackageServiceClient {
	return &tourPackageServiceClient{cc}
}

func (c *tourPackageServiceClient) ChangeStatusDemo(ctx context.Context, in *ChangeRequestDemo, opts ...grpc.CallOption) (*GeneralResponse, error) {
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/ChangeStatusDemo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) CountTourHost(ctx context.Context, in *RequestCountTour, opts ...grpc.CallOption) (*ResponseCountTour, error) {
	out := new(ResponseCountTour)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/CountTourHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) CreateTourPackage(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*TourPackageResponse, error) {
	out := new(TourPackageResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/CreateTourPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) DeleteTourPackage(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*DeletePackageResponse, error) {
	out := new(DeletePackageResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/DeleteTourPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) GetActiveTour(ctx context.Context, in *ActiveTour, opts ...grpc.CallOption) (*ResponseActiveTour, error) {
	out := new(ResponseActiveTour)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/GetActiveTour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) GetTourPackage(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*BrowseHostTourPackage, error) {
	out := new(BrowseHostTourPackage)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/GetTourPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) GetDetailTourPackage(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*TourPackageResponse, error) {
	out := new(TourPackageResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/GetDetailTourPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) GetTourPackageByHostID(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*BrowseTourPackage, error) {
	out := new(BrowseTourPackage)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/GetTourPackageByHostID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) GetTourPackageRecommendations(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*BrowseTourPackage, error) {
	out := new(BrowseTourPackage)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/GetTourPackageRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) GetDetailTourPackageByHostID(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*TourPackageResponse, error) {
	out := new(TourPackageResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/GetDetailTourPackageByHostID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) GetDetailHost(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*TourHostResponse, error) {
	out := new(TourHostResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/GetDetailHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) UpdateTourPackage(ctx context.Context, in *TourPackageRequest, opts ...grpc.CallOption) (*UpdateTourPackageResponse, error) {
	out := new(UpdateTourPackageResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/UpdateTourPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) GetListCategory(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*CategoryListResponse, error) {
	out := new(CategoryListResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/GetListCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) ConfirmEndTour(ctx context.Context, in *ParamActiveTour, opts ...grpc.CallOption) (*ResponseConfirmedToEnd, error) {
	out := new(ResponseConfirmedToEnd)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/ConfirmEndTour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) AddSchedule(ctx context.Context, in *PackageSchedule, opts ...grpc.CallOption) (*UpdateTourPackageResponse, error) {
	out := new(UpdateTourPackageResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/AddSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) UpdateScheduleTourPackage(ctx context.Context, in *PackageSchedule, opts ...grpc.CallOption) (*UpdateTourPackageResponse, error) {
	out := new(UpdateTourPackageResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/UpdateScheduleTourPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) DeleteSchedule(ctx context.Context, in *PackageSchedule, opts ...grpc.CallOption) (*UpdateTourPackageResponse, error) {
	out := new(UpdateTourPackageResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/DeleteSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) AddCategoryByAdmin(ctx context.Context, in *CategoriesListing, opts ...grpc.CallOption) (*CategoryResponse, error) {
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/AddCategoryByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) EditCategoryByAdmin(ctx context.Context, in *CategoriesListing, opts ...grpc.CallOption) (*CategoryResponse, error) {
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/EditCategoryByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) DeleteCategoryByAdmin(ctx context.Context, in *CategoriesListing, opts ...grpc.CallOption) (*DeleteCategoryResponse, error) {
	out := new(DeleteCategoryResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/DeleteCategoryByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) DetailCategory(ctx context.Context, in *CategoriesListing, opts ...grpc.CallOption) (*CategoryResponse, error) {
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/DetailCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) GetTourPackageByUserUIDOfHosts(ctx context.Context, in *RequestTourPackage, opts ...grpc.CallOption) (*BrowseTourPackage, error) {
	out := new(BrowseTourPackage)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/GetTourPackageByUserUIDOfHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) UpdateScheduleAfterBooking(ctx context.Context, in *UpdateSchedule, opts ...grpc.CallOption) (*UpdateScheduleRespone, error) {
	out := new(UpdateScheduleRespone)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/UpdateScheduleAfterBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) UpdateScheduleStatus(ctx context.Context, in *ReopenSchedule, opts ...grpc.CallOption) (*UpdateScheduleRespone, error) {
	out := new(UpdateScheduleRespone)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/UpdateScheduleStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) UpdateReviewAndRate(ctx context.Context, in *TourPackage, opts ...grpc.CallOption) (*TourPackageResponse, error) {
	out := new(TourPackageResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/UpdateReviewAndRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) UdpdateScheduleTourStatus(ctx context.Context, in *ScheduleTourStatus, opts ...grpc.CallOption) (*ScheduleTourStatusResponse, error) {
	out := new(ScheduleTourStatusResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/UdpdateScheduleTourStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) SynchronizeExplorer(ctx context.Context, in *RequestSync, opts ...grpc.CallOption) (*ResponseSync, error) {
	out := new(ResponseSync)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/SynchronizeExplorer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourPackageServiceClient) ConfirmEndTourV1_1(ctx context.Context, in *ParamActiveTour, opts ...grpc.CallOption) (*ResponseConfirmedToEnd, error) {
	out := new(ResponseConfirmedToEnd)
	err := c.cc.Invoke(ctx, "/tourpackage.TourPackageService/ConfirmEndTourV1_1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TourPackageServiceServer is the server API for TourPackageService service.
type TourPackageServiceServer interface {
	ChangeStatusDemo(context.Context, *ChangeRequestDemo) (*GeneralResponse, error)
	CountTourHost(context.Context, *RequestCountTour) (*ResponseCountTour, error)
	CreateTourPackage(context.Context, *TourPackage) (*TourPackageResponse, error)
	DeleteTourPackage(context.Context, *TourPackage) (*DeletePackageResponse, error)
	GetActiveTour(context.Context, *ActiveTour) (*ResponseActiveTour, error)
	GetTourPackage(context.Context, *BrowseRequest) (*BrowseHostTourPackage, error)
	GetDetailTourPackage(context.Context, *TourPackage) (*TourPackageResponse, error)
	GetTourPackageByHostID(context.Context, *BrowseRequest) (*BrowseTourPackage, error)
	GetTourPackageRecommendations(context.Context, *TourPackage) (*BrowseTourPackage, error)
	GetDetailTourPackageByHostID(context.Context, *TourPackage) (*TourPackageResponse, error)
	GetDetailHost(context.Context, *TourPackage) (*TourHostResponse, error)
	UpdateTourPackage(context.Context, *TourPackageRequest) (*UpdateTourPackageResponse, error)
	GetListCategory(context.Context, *BrowseRequest) (*CategoryListResponse, error)
	ConfirmEndTour(context.Context, *ParamActiveTour) (*ResponseConfirmedToEnd, error)
	AddSchedule(context.Context, *PackageSchedule) (*UpdateTourPackageResponse, error)
	UpdateScheduleTourPackage(context.Context, *PackageSchedule) (*UpdateTourPackageResponse, error)
	DeleteSchedule(context.Context, *PackageSchedule) (*UpdateTourPackageResponse, error)
	AddCategoryByAdmin(context.Context, *CategoriesListing) (*CategoryResponse, error)
	EditCategoryByAdmin(context.Context, *CategoriesListing) (*CategoryResponse, error)
	DeleteCategoryByAdmin(context.Context, *CategoriesListing) (*DeleteCategoryResponse, error)
	DetailCategory(context.Context, *CategoriesListing) (*CategoryResponse, error)
	//this method ony use for getting package data using its user UID
	GetTourPackageByUserUIDOfHosts(context.Context, *RequestTourPackage) (*BrowseTourPackage, error)
	//This service only use after booking process complate
	UpdateScheduleAfterBooking(context.Context, *UpdateSchedule) (*UpdateScheduleRespone, error)
	//This service only use after booking failed to paid
	UpdateScheduleStatus(context.Context, *ReopenSchedule) (*UpdateScheduleRespone, error)
	//This Service use for update reviews and rateing only
	UpdateReviewAndRate(context.Context, *TourPackage) (*TourPackageResponse, error)
	//This method only use for update tour status
	UdpdateScheduleTourStatus(context.Context, *ScheduleTourStatus) (*ScheduleTourStatusResponse, error)
	SynchronizeExplorer(context.Context, *RequestSync) (*ResponseSync, error)
	ConfirmEndTourV1_1(context.Context, *ParamActiveTour) (*ResponseConfirmedToEnd, error)
}

// UnimplementedTourPackageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTourPackageServiceServer struct {
}

func (*UnimplementedTourPackageServiceServer) ChangeStatusDemo(context.Context, *ChangeRequestDemo) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeStatusDemo not implemented")
}
func (*UnimplementedTourPackageServiceServer) CountTourHost(context.Context, *RequestCountTour) (*ResponseCountTour, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTourHost not implemented")
}
func (*UnimplementedTourPackageServiceServer) CreateTourPackage(context.Context, *TourPackage) (*TourPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTourPackage not implemented")
}
func (*UnimplementedTourPackageServiceServer) DeleteTourPackage(context.Context, *TourPackage) (*DeletePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTourPackage not implemented")
}
func (*UnimplementedTourPackageServiceServer) GetActiveTour(context.Context, *ActiveTour) (*ResponseActiveTour, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveTour not implemented")
}
func (*UnimplementedTourPackageServiceServer) GetTourPackage(context.Context, *BrowseRequest) (*BrowseHostTourPackage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTourPackage not implemented")
}
func (*UnimplementedTourPackageServiceServer) GetDetailTourPackage(context.Context, *TourPackage) (*TourPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailTourPackage not implemented")
}
func (*UnimplementedTourPackageServiceServer) GetTourPackageByHostID(context.Context, *BrowseRequest) (*BrowseTourPackage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTourPackageByHostID not implemented")
}
func (*UnimplementedTourPackageServiceServer) GetTourPackageRecommendations(context.Context, *TourPackage) (*BrowseTourPackage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTourPackageRecommendations not implemented")
}
func (*UnimplementedTourPackageServiceServer) GetDetailTourPackageByHostID(context.Context, *TourPackage) (*TourPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailTourPackageByHostID not implemented")
}
func (*UnimplementedTourPackageServiceServer) GetDetailHost(context.Context, *TourPackage) (*TourHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailHost not implemented")
}
func (*UnimplementedTourPackageServiceServer) UpdateTourPackage(context.Context, *TourPackageRequest) (*UpdateTourPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTourPackage not implemented")
}
func (*UnimplementedTourPackageServiceServer) GetListCategory(context.Context, *BrowseRequest) (*CategoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListCategory not implemented")
}
func (*UnimplementedTourPackageServiceServer) ConfirmEndTour(context.Context, *ParamActiveTour) (*ResponseConfirmedToEnd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmEndTour not implemented")
}
func (*UnimplementedTourPackageServiceServer) AddSchedule(context.Context, *PackageSchedule) (*UpdateTourPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSchedule not implemented")
}
func (*UnimplementedTourPackageServiceServer) UpdateScheduleTourPackage(context.Context, *PackageSchedule) (*UpdateTourPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScheduleTourPackage not implemented")
}
func (*UnimplementedTourPackageServiceServer) DeleteSchedule(context.Context, *PackageSchedule) (*UpdateTourPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchedule not implemented")
}
func (*UnimplementedTourPackageServiceServer) AddCategoryByAdmin(context.Context, *CategoriesListing) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCategoryByAdmin not implemented")
}
func (*UnimplementedTourPackageServiceServer) EditCategoryByAdmin(context.Context, *CategoriesListing) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCategoryByAdmin not implemented")
}
func (*UnimplementedTourPackageServiceServer) DeleteCategoryByAdmin(context.Context, *CategoriesListing) (*DeleteCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategoryByAdmin not implemented")
}
func (*UnimplementedTourPackageServiceServer) DetailCategory(context.Context, *CategoriesListing) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailCategory not implemented")
}
func (*UnimplementedTourPackageServiceServer) GetTourPackageByUserUIDOfHosts(context.Context, *RequestTourPackage) (*BrowseTourPackage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTourPackageByUserUIDOfHosts not implemented")
}
func (*UnimplementedTourPackageServiceServer) UpdateScheduleAfterBooking(context.Context, *UpdateSchedule) (*UpdateScheduleRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScheduleAfterBooking not implemented")
}
func (*UnimplementedTourPackageServiceServer) UpdateScheduleStatus(context.Context, *ReopenSchedule) (*UpdateScheduleRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScheduleStatus not implemented")
}
func (*UnimplementedTourPackageServiceServer) UpdateReviewAndRate(context.Context, *TourPackage) (*TourPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReviewAndRate not implemented")
}
func (*UnimplementedTourPackageServiceServer) UdpdateScheduleTourStatus(context.Context, *ScheduleTourStatus) (*ScheduleTourStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UdpdateScheduleTourStatus not implemented")
}
func (*UnimplementedTourPackageServiceServer) SynchronizeExplorer(context.Context, *RequestSync) (*ResponseSync, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SynchronizeExplorer not implemented")
}
func (*UnimplementedTourPackageServiceServer) ConfirmEndTourV1_1(context.Context, *ParamActiveTour) (*ResponseConfirmedToEnd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmEndTourV1_1 not implemented")
}

func RegisterTourPackageServiceServer(s *grpc.Server, srv TourPackageServiceServer) {
	s.RegisterService(&_TourPackageService_serviceDesc, srv)
}

func _TourPackageService_ChangeStatusDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRequestDemo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).ChangeStatusDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/ChangeStatusDemo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).ChangeStatusDemo(ctx, req.(*ChangeRequestDemo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_CountTourHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCountTour)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).CountTourHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/CountTourHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).CountTourHost(ctx, req.(*RequestCountTour))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_CreateTourPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).CreateTourPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/CreateTourPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).CreateTourPackage(ctx, req.(*TourPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_DeleteTourPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).DeleteTourPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/DeleteTourPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).DeleteTourPackage(ctx, req.(*TourPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_GetActiveTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActiveTour)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).GetActiveTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/GetActiveTour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).GetActiveTour(ctx, req.(*ActiveTour))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_GetTourPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).GetTourPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/GetTourPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).GetTourPackage(ctx, req.(*BrowseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_GetDetailTourPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).GetDetailTourPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/GetDetailTourPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).GetDetailTourPackage(ctx, req.(*TourPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_GetTourPackageByHostID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).GetTourPackageByHostID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/GetTourPackageByHostID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).GetTourPackageByHostID(ctx, req.(*BrowseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_GetTourPackageRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).GetTourPackageRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/GetTourPackageRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).GetTourPackageRecommendations(ctx, req.(*TourPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_GetDetailTourPackageByHostID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).GetDetailTourPackageByHostID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/GetDetailTourPackageByHostID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).GetDetailTourPackageByHostID(ctx, req.(*TourPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_GetDetailHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).GetDetailHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/GetDetailHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).GetDetailHost(ctx, req.(*TourPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_UpdateTourPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).UpdateTourPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/UpdateTourPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).UpdateTourPackage(ctx, req.(*TourPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_GetListCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).GetListCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/GetListCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).GetListCategory(ctx, req.(*BrowseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_ConfirmEndTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamActiveTour)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).ConfirmEndTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/ConfirmEndTour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).ConfirmEndTour(ctx, req.(*ParamActiveTour))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_AddSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).AddSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/AddSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).AddSchedule(ctx, req.(*PackageSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_UpdateScheduleTourPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).UpdateScheduleTourPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/UpdateScheduleTourPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).UpdateScheduleTourPackage(ctx, req.(*PackageSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_DeleteSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).DeleteSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/DeleteSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).DeleteSchedule(ctx, req.(*PackageSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_AddCategoryByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoriesListing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).AddCategoryByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/AddCategoryByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).AddCategoryByAdmin(ctx, req.(*CategoriesListing))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_EditCategoryByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoriesListing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).EditCategoryByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/EditCategoryByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).EditCategoryByAdmin(ctx, req.(*CategoriesListing))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_DeleteCategoryByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoriesListing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).DeleteCategoryByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/DeleteCategoryByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).DeleteCategoryByAdmin(ctx, req.(*CategoriesListing))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_DetailCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoriesListing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).DetailCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/DetailCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).DetailCategory(ctx, req.(*CategoriesListing))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_GetTourPackageByUserUIDOfHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTourPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).GetTourPackageByUserUIDOfHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/GetTourPackageByUserUIDOfHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).GetTourPackageByUserUIDOfHosts(ctx, req.(*RequestTourPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_UpdateScheduleAfterBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).UpdateScheduleAfterBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/UpdateScheduleAfterBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).UpdateScheduleAfterBooking(ctx, req.(*UpdateSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_UpdateScheduleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReopenSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).UpdateScheduleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/UpdateScheduleStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).UpdateScheduleStatus(ctx, req.(*ReopenSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_UpdateReviewAndRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).UpdateReviewAndRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/UpdateReviewAndRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).UpdateReviewAndRate(ctx, req.(*TourPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_UdpdateScheduleTourStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleTourStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).UdpdateScheduleTourStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/UdpdateScheduleTourStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).UdpdateScheduleTourStatus(ctx, req.(*ScheduleTourStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_SynchronizeExplorer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).SynchronizeExplorer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/SynchronizeExplorer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).SynchronizeExplorer(ctx, req.(*RequestSync))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourPackageService_ConfirmEndTourV1_1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamActiveTour)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourPackageServiceServer).ConfirmEndTourV1_1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.TourPackageService/ConfirmEndTourV1_1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourPackageServiceServer).ConfirmEndTourV1_1(ctx, req.(*ParamActiveTour))
	}
	return interceptor(ctx, in, info, handler)
}

var _TourPackageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tourpackage.TourPackageService",
	HandlerType: (*TourPackageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangeStatusDemo",
			Handler:    _TourPackageService_ChangeStatusDemo_Handler,
		},
		{
			MethodName: "CountTourHost",
			Handler:    _TourPackageService_CountTourHost_Handler,
		},
		{
			MethodName: "CreateTourPackage",
			Handler:    _TourPackageService_CreateTourPackage_Handler,
		},
		{
			MethodName: "DeleteTourPackage",
			Handler:    _TourPackageService_DeleteTourPackage_Handler,
		},
		{
			MethodName: "GetActiveTour",
			Handler:    _TourPackageService_GetActiveTour_Handler,
		},
		{
			MethodName: "GetTourPackage",
			Handler:    _TourPackageService_GetTourPackage_Handler,
		},
		{
			MethodName: "GetDetailTourPackage",
			Handler:    _TourPackageService_GetDetailTourPackage_Handler,
		},
		{
			MethodName: "GetTourPackageByHostID",
			Handler:    _TourPackageService_GetTourPackageByHostID_Handler,
		},
		{
			MethodName: "GetTourPackageRecommendations",
			Handler:    _TourPackageService_GetTourPackageRecommendations_Handler,
		},
		{
			MethodName: "GetDetailTourPackageByHostID",
			Handler:    _TourPackageService_GetDetailTourPackageByHostID_Handler,
		},
		{
			MethodName: "GetDetailHost",
			Handler:    _TourPackageService_GetDetailHost_Handler,
		},
		{
			MethodName: "UpdateTourPackage",
			Handler:    _TourPackageService_UpdateTourPackage_Handler,
		},
		{
			MethodName: "GetListCategory",
			Handler:    _TourPackageService_GetListCategory_Handler,
		},
		{
			MethodName: "ConfirmEndTour",
			Handler:    _TourPackageService_ConfirmEndTour_Handler,
		},
		{
			MethodName: "AddSchedule",
			Handler:    _TourPackageService_AddSchedule_Handler,
		},
		{
			MethodName: "UpdateScheduleTourPackage",
			Handler:    _TourPackageService_UpdateScheduleTourPackage_Handler,
		},
		{
			MethodName: "DeleteSchedule",
			Handler:    _TourPackageService_DeleteSchedule_Handler,
		},
		{
			MethodName: "AddCategoryByAdmin",
			Handler:    _TourPackageService_AddCategoryByAdmin_Handler,
		},
		{
			MethodName: "EditCategoryByAdmin",
			Handler:    _TourPackageService_EditCategoryByAdmin_Handler,
		},
		{
			MethodName: "DeleteCategoryByAdmin",
			Handler:    _TourPackageService_DeleteCategoryByAdmin_Handler,
		},
		{
			MethodName: "DetailCategory",
			Handler:    _TourPackageService_DetailCategory_Handler,
		},
		{
			MethodName: "GetTourPackageByUserUIDOfHosts",
			Handler:    _TourPackageService_GetTourPackageByUserUIDOfHosts_Handler,
		},
		{
			MethodName: "UpdateScheduleAfterBooking",
			Handler:    _TourPackageService_UpdateScheduleAfterBooking_Handler,
		},
		{
			MethodName: "UpdateScheduleStatus",
			Handler:    _TourPackageService_UpdateScheduleStatus_Handler,
		},
		{
			MethodName: "UpdateReviewAndRate",
			Handler:    _TourPackageService_UpdateReviewAndRate_Handler,
		},
		{
			MethodName: "UdpdateScheduleTourStatus",
			Handler:    _TourPackageService_UdpdateScheduleTourStatus_Handler,
		},
		{
			MethodName: "SynchronizeExplorer",
			Handler:    _TourPackageService_SynchronizeExplorer_Handler,
		},
		{
			MethodName: "ConfirmEndTourV1_1",
			Handler:    _TourPackageService_ConfirmEndTourV1_1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tourpackage.proto",
}

// WishListServiceClient is the client API for WishListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WishListServiceClient interface {
	AddWishList(ctx context.Context, in *AddWishListRequest, opts ...grpc.CallOption) (*AddWishListResponse, error)
	GetWishList(ctx context.Context, in *BrowseRequestWishList, opts ...grpc.CallOption) (*WishListResponse, error)
	UsersWishlist(ctx context.Context, in *BrowseRequestWishList, opts ...grpc.CallOption) (*UsersWishlistResponse, error)
}

type wishListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWishListServiceClient(cc grpc.ClientConnInterface) WishListServiceClient {
	return &wishListServiceClient{cc}
}

func (c *wishListServiceClient) AddWishList(ctx context.Context, in *AddWishListRequest, opts ...grpc.CallOption) (*AddWishListResponse, error) {
	out := new(AddWishListResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.WishListService/AddWishList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishListServiceClient) GetWishList(ctx context.Context, in *BrowseRequestWishList, opts ...grpc.CallOption) (*WishListResponse, error) {
	out := new(WishListResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.WishListService/GetWishList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishListServiceClient) UsersWishlist(ctx context.Context, in *BrowseRequestWishList, opts ...grpc.CallOption) (*UsersWishlistResponse, error) {
	out := new(UsersWishlistResponse)
	err := c.cc.Invoke(ctx, "/tourpackage.WishListService/UsersWishlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WishListServiceServer is the server API for WishListService service.
type WishListServiceServer interface {
	AddWishList(context.Context, *AddWishListRequest) (*AddWishListResponse, error)
	GetWishList(context.Context, *BrowseRequestWishList) (*WishListResponse, error)
	UsersWishlist(context.Context, *BrowseRequestWishList) (*UsersWishlistResponse, error)
}

// UnimplementedWishListServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWishListServiceServer struct {
}

func (*UnimplementedWishListServiceServer) AddWishList(context.Context, *AddWishListRequest) (*AddWishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWishList not implemented")
}
func (*UnimplementedWishListServiceServer) GetWishList(context.Context, *BrowseRequestWishList) (*WishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWishList not implemented")
}
func (*UnimplementedWishListServiceServer) UsersWishlist(context.Context, *BrowseRequestWishList) (*UsersWishlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersWishlist not implemented")
}

func RegisterWishListServiceServer(s *grpc.Server, srv WishListServiceServer) {
	s.RegisterService(&_WishListService_serviceDesc, srv)
}

func _WishListService_AddWishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWishListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishListServiceServer).AddWishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.WishListService/AddWishList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishListServiceServer).AddWishList(ctx, req.(*AddWishListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishListService_GetWishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseRequestWishList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishListServiceServer).GetWishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.WishListService/GetWishList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishListServiceServer).GetWishList(ctx, req.(*BrowseRequestWishList))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishListService_UsersWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseRequestWishList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishListServiceServer).UsersWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tourpackage.WishListService/UsersWishlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishListServiceServer).UsersWishlist(ctx, req.(*BrowseRequestWishList))
	}
	return interceptor(ctx, in, info, handler)
}

var _WishListService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tourpackage.WishListService",
	HandlerType: (*WishListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddWishList",
			Handler:    _WishListService_AddWishList_Handler,
		},
		{
			MethodName: "GetWishList",
			Handler:    _WishListService_GetWishList_Handler,
		},
		{
			MethodName: "UsersWishlist",
			Handler:    _WishListService_UsersWishlist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tourpackage.proto",
}
