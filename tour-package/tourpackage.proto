syntax = "proto3";
package tourpackage;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

message TourPackage{
  string tour_id = 1;
  string title = 2;
  repeated PackageMedia medias = 3;
  repeated PackageSchedule schedules = 4;
  string description = 5;
  repeated string categories = 7;
  repeated string tags = 8;
  string location = 9;
  string rate = 10;
  string review = 11;
  repeated PackageAddon addons = 12;
  bool is_curated = 13;
  bool is_featured = 14;
  bool is_refundable = 15;
  string host_id = 16;
  string type_tour = 17;
  repeated PackagePrice prices = 18;
  string terms_of_service = 19;
  repeated CustomPolicy custom_policies = 20;
  string age_restriction = 21;
  string cost_foreign_guest = 22;
  string itinerary = 23;
  string policy_title = 24;
  string policy = 25;
  AdditionalCost additional_cost = 26;
  google.protobuf.Timestamp created_at = 27;
  bool delete_status = 28;
  string user_uid = 29;
  google.protobuf.Timestamp update_at = 30;
}

message TourHost{
  string host_id = 1;
  string first_name = 2;
  string last_name = 3;
  string gender = 4;
  string phone_number = 5;
  google.protobuf.Timestamp date_of_birth = 6;
  string password = 7;
  string profile_picture_url = 8;
  string business_name = 9;
  string business_category = 10;
  string address = 11;
  string business_about  = 12;
  string card_id_type = 13;
  string card_id = 14;
  string person_with_id = 15;
  string bussiness_id_type = 16;
  string bussiness_id = 17;
  bool is_verified = 18;
  string account_number = 19;
  string balance = 20;
  string user_uid = 21;
  string email = 22 ;
  int32 card_id_status = 23;
  int32 bussiness_id_status = 24;
  string nationality = 25;
  google.protobuf.Timestamp updated_at = 26;
  google.protobuf.Timestamp created_at = 27;
  google.protobuf.Timestamp verified_at = 28;
}

message TourPackageRequest{
  string tour_id = 1;
  string title = 2;
  repeated PackageMedia medias = 3;
  repeated PackageSchedule schedules = 4;
  string description = 5;
  repeated string categories = 7;
  repeated string tags = 8;
  string location = 9;
  string rate = 10;
  string review = 11;
  repeated PackageAddon addons = 12;
  bool is_curated = 13;
  bool is_featured = 14;
  bool is_refundable = 15;
  string host_id = 16;
  string type_tour = 17;
  repeated PackagePrice prices = 18;
  string terms_of_service = 19;
  repeated CustomPolicy custom_policies = 20;
  string age_restriction = 21;
  string cost_foreign_guest = 22;
  string itinerary = 23;
  string policy_title = 24;
  string policy = 25;
  AdditionalCost additional_cost = 26;
}

message CreateTourPackageResponse{
  int32 code = 1;
  string title = 2;
  TourPackage data = 3;
}

message TourPackageResponse{
  TourPackage data = 3;
}

message UpdateTourPackageResponse{
  int32 code = 1;
  string title = 2;
  TourPackage data = 3;
}

message PackageTagResponse{
  TourPackage data = 1;
}

message PackageCategory{
  repeated string categories = 1;
}

message PackageTag{
  repeated string tags = 1;
}

message PackageCategoryResponse{
  TourPackage data = 1;
}

message PackageMedia{
  string media_id = 1;
  string url = 2;
  string type = 3 ;
  string tour_id = 4;
}

message PackageMediaBrowseRequest{
  string media_id = 1;
  string url = 2;
  string type = 3 ;
  string tour_id = 4;
  int32 limit = 12;
  int32 offset = 13;
}

message BrowsePackageMedia{
  repeated PackageMedia data = 1;
}

message PackageMediaResponse{
  TourPackage data = 1;
}

message PackageSchedule{
  string schedule_id = 1;
  string tour_id = 2;
  string durations = 3;
  google.protobuf.Timestamp start_date = 4;
  google.protobuf.Timestamp end_date = 5;
  string quota = 6;
  bool is_active = 7;
  string min_quota = 8;
  string max_quota = 9;
  bool is_booked = 10;
  string tour_status = 11;
}

message ScheduleBrowseRequest{
  string schedule_id = 1;
  string tour_id = 2;
  string durations = 3;
  google.protobuf.Timestamp start_date = 4;
  google.protobuf.Timestamp end_date = 5;
  string quota = 6;
  bool is_active = 7;
  string min_quota = 8;
  string max_quota = 9;
  bool is_booked = 10;
  repeated Filter filters = 11;
  int32 limit = 12;
  int32 offset = 13;
}

message AddOnBrowseRequest{
  string addon_id = 1;
  string tour_id = 4;
  string addon = 2;
  string price = 3;
  repeated Filter filters = 11;
  int32 limit = 12;
  int32 offset = 13;
}

message BrowseTourAddon {
  repeated PackageAddon data = 1;
}

message BrowseTourSchedule{
  repeated PackageSchedule data = 1;
}

message PackageScheduleResponse{
  TourPackage data = 1;
  string min_quota = 5;
  string max_quota = 6;
  bool is_active = 7;
  bool is_booked = 8;
}

message PackageAddon{
  string addon_id = 1;
  string tour_id = 4;
  string addon = 2;
  string price = 3;
}

message CustomPolicy{
  string policy_name = 1;
  string policy = 2;
  string tour_id = 3;
}

message DeletePackageResponse{
  TourPackage data = 1;
  int32 code = 2;
  string title = 3;
}

message GeneralResponse{
  int32 code = 1;
  string title = 2;
}

message TourHostResponse {
  TourHost data = 2;
}

message PackageAddonResponse{
  TourPackage data = 1;
}

message PackagePrice{
  string price_id = 1;
  string tour_id = 2;
  string min_participant = 3;
  string max_participant = 4;
  string price = 5;
  string kid_price = 7;
  string min_kid_age = 8;
  string max_kid_age = 9;
}

message PriceListBrowseRequest{
  string price_id = 1;
  string tour_id = 2;
  string min_participant = 3;
  string max_participant = 4;
  string price = 5;
  string kid_price = 7;
  string min_kid_age = 8;
  string max_kid_age = 9;
  repeated Filter filters = 11;
  int32 limit = 12;
  int32 offset = 13;
}

message BrowseTourPriceList{
  repeated PackagePrice data = 1;
}

message BrowseTourPackage{
  repeated TourPackage data = 1;
  Paginate paginate = 2;
}

message Filter{
  string Field = 1;
  string Operator = 2;
  string Value = 3;
}

message BrowseRequest{
  repeated Filter filters = 1;
  string page = 2;
  string per_page = 3;
  string param = 4;
  string host_id = 5;
  string key = 6;
}

message BrowseRequestWishList{
  repeated Filter filters = 1;
  int32 limit = 2;
  int32 offset = 3;
  string tour_id = 4 ;
  string title = 5 ;
  string price = 6 ;
  string location = 7 ;
  string rate = 8 ;
  string user_uid = 9;
}

message DeleteSchedule{
  string schedule_id = 1;
  string tour_id = 2;
  google.protobuf.Timestamp start_date = 3;
  google.protobuf.Timestamp end_date = 4;
  string quota = 5;
  string durations = 7;
  string min_quota = 8;
  string max_quota = 9;
  bool is_active = 6;
  bool is_booked = 10;
}

message DeleteScheduleResponse{
  DeleteSchedule data = 1;
}

message DeleteAddon{
  string addon_id = 1;
  string tour_id = 2;
  string addon = 3;
  string price = 4;
}

message DeleteAddonResponse{
  DeleteAddon data = 1;
}

message DeleteMedia{
  string media_id = 1;
  string url = 2;
  string type = 3 ;
  string tour_id = 4;
}

message DeleteMediaResponse{
  DeleteMedia data = 1;
}

message CategoryListResponse{
  repeated CategoriesListing data = 1 ;
  Paginate paginate = 2;
}
message CategoriesListing{
  string category_id = 1;
  string category = 2;
  string category_image_url = 3;
  int32 count_used = 4;
}

message AddWishListRequest{
  string tour_id = 1 ;
  string title = 2 ;
  string price = 3 ;
  string location = 4 ;
  string rate = 5 ;
  string user_uid = 6;
}

message AddWishListResponse{
  AddWishListRequest data = 1;
  int32 Code = 2 ;
  string title = 3 ;
}

message WishListResponse{
  repeated AddWishListRequest data = 1;
}

message RequestDetailPriceByParticipant {
  string price_id = 1;
  string tour_id = 2;
  string min_participant = 3;
  string max_participant = 4;
  string price = 5;
  string kid_price = 7;
  string min_kid_age = 8;
  string max_kid_age = 9;
  string adult_participant = 10;
  string kid_participant = 11;
}

message ResponseDetailPriceByParticipant {
  string price_id = 1;
  string tour_id = 2;
  string min_participant = 3;
  string max_participant = 4;
  string price = 5;
  string kid_price = 7;
  string min_kid_age = 8;
  string max_kid_age = 9;
  string adult_participant = 10;
  string kid_participant = 11;
  string total_participant = 12;
  string total_adult_price = 13;
  string total_kid_price = 14;
  string total_price_participant = 15;
}

message UpdateSchedule {
  string tour_id = 1;
  string schedule_id = 2;
}

message ReopenSchedule {
  string order_id = 1;
  string tour_id = 2;
  string schedule_id = 3;
  repeated PackageSchedule schedules = 4;
  google.protobuf.Timestamp end_date_payment = 5;
}

message UpdateScheduleRespone{
  TourPackage data = 1;
}

message RequestTourPackage{
  string user_uid = 1 ;
}

message BroadcastMessage {
  string message = 1;
  google.protobuf.Timestamp created_at = 2;
  UserInfo host = 3;
}

message UserInfo {
  string name = 1;
  string image = 2;
}

message ActiveTour {
  string tour_id = 1;
  string schedule_id = 2;
  string title = 3;
  repeated PackageMedia medias = 4;
  PackageSchedule schedules = 5;
  string location = 6;
  string description = 7;
  string itinerary = 8;  
  int32 total_participant = 9;
  string tour_status = 10;
  bool confirm_end   = 11;
  repeated BroadcastMessage message = 12;
}

message ParamActiveTour {
  string tour_id = 1;
  string schedule_id = 2;
  bool confirmed = 3;
}

message ResponseActiveTour {
  int32 code = 1;
  string title = 2;
  ActiveTour data = 3;
}

message ResponseConfirmedToEnd {
  int32 code = 1;
  string title = 2;
  string data = 3;
}

message Paginate {
  int32 current_page = 1;
  int32 next_page = 2;
  int32 total_page = 3;
  int32 per_page = 4;
  int32 total = 5;
}

message ScheduleTourStatus {
  string order_id = 1;
  string tour_id = 2;
  string schedule_id = 3;
  string tour_status = 4;
}

message ScheduleTourStatusResponse{
  TourPackage data = 1;
}

message AdditionalCost{
  string additional_adult_price = 1;
  string additional_kid_price = 2;
}

message CategoryResponse{
  string title =1;
  int32 code =2;
  CategoriesListing data = 3;
}

message DeleteCategoryResponse{
  string title =1;
  int32 code =2;
}

message RequestCountTour {
  string host_id = 1;
}

message ResponseCountTour {
  int32 code = 1;
  string title = 2;
  int32 total = 3;
}

service TourPackageService{
  
  rpc CountTourHost (RequestCountTour) returns (ResponseCountTour);

  rpc CreateTourPackage(TourPackage) returns (TourPackageResponse){
    option(google.api.http) = {
      post : "/api/v1/tourpackages/tourhosts/{host_id}",
      body : "*"
    };
  }

  rpc DeleteTourPackage(TourPackage) returns (DeletePackageResponse){
    option(google.api.http) = {
      delete : "/api/v1/tourpackages/{tour_id}"
    };
  }

  rpc GetActiveTour (ActiveTour) returns (ResponseActiveTour) {
    option (google.api.http) = {
      get : "/api/v1/tourpackages/active/{tour_id}/{schedule_id}",
    };
  }

  rpc GetTourPackage(BrowseRequest)returns(BrowseTourPackage){
    option (google.api.http) = {
      get : "/api/v1/tourpackages"
    };
  }

  rpc GetDetailTourPackage(TourPackage)returns(TourPackageResponse){
    option (google.api.http) = {
      get : "/api/v1/tourpackages/{tour_id}"
    };
  }

  rpc GetTourPackageByHostID(BrowseRequest)returns(BrowseTourPackage){
    option (google.api.http) = {
      get : "/api/v1/tourpackages/by-tourhosts/{host_id}"
    };
  }

  rpc GetTourPackageRecommendations(TourPackage) returns (BrowseTourPackage){
    option (google.api.http) = {
      get : "/api/v1/tourpackages/{host_id}/recommendations",
    };
  }

  rpc GetDetailTourPackageByHostID(TourPackage)returns(TourPackageResponse){
    option (google.api.http) = {
      get : "/api/v1/tourpackages/{tour_id}/by-tourhosts/{host_id}"
    };
  }

  rpc GetDetailHost(TourPackage)returns(TourHostResponse){
    option (google.api.http) = {
      get : "/api/v1/tourpackages/{tour_id}/detail-tourhosts/{host_id}"
    };
  }

  rpc UpdateTourPackage(TourPackageRequest)returns(UpdateTourPackageResponse){
    option (google.api.http) = {
      patch : "/api/v1/tourpackages/{tour_id}",
      body : "*"
    };
  }

  rpc GetListCategory(BrowseRequest)returns(CategoryListResponse){
    option (google.api.http) = {
      get : "/api/v1/tourpackages-categories"
    };
  }

  rpc ConfirmEndTour (ParamActiveTour) returns (ResponseConfirmedToEnd) {
    option (google.api.http) = {
      patch : "/api/v1/tourpackages/active-to-end/{tour_id}/{schedule_id}",
      body : "*"
    };
  }

  rpc AddSchedule(PackageSchedule)returns(UpdateTourPackageResponse){
    option (google.api.http) = {
      post : "/api/v1/tourpackages/{tour_id}/schedules",
      body : "*"
    };
  }

  rpc UpdateScheduleTourPackage(PackageSchedule)returns(UpdateTourPackageResponse){
    option (google.api.http) = {
      patch : "/api/v1/tourpackages/{tour_id}/schedules/{schedule_id}",
      body : "*"
    };
  }

   rpc DeleteSchedule(PackageSchedule) returns (UpdateTourPackageResponse){
    option(google.api.http) = {
      delete : "/api/v1/tourpackages/{tour_id}/schedules/{schedule_id}"
    };
  }

 rpc AddCategoryByAdmin(CategoriesListing) returns (CategoryResponse){
    option(google.api.http) = {
      post : "/api/v1/tourpackages/categories",
      body : "*"
    };
  }

  rpc EditCategoryByAdmin(CategoriesListing) returns (CategoryResponse){
    option(google.api.http) = {
      patch : "/api/v1/tourpackages/categories/{category_id}",
      body : "*"
    };
  }

  rpc DeleteCategoryByAdmin(CategoriesListing) returns (DeleteCategoryResponse){
    option(google.api.http) = {
      delete : "/api/v1/tourpackages/categories/{category_id}"
    };
  }

  rpc DetailCategory(CategoriesListing)returns(CategoryResponse){
    option (google.api.http) = {
      get : "/api/v1/tourpackages/categories/{category_id}/detail"
    };
  }

  //this method ony use for getting package data using its user UID
  rpc GetTourPackageByUserUIDOfHosts(RequestTourPackage)returns(BrowseTourPackage);

  //This service only use after booking process complate
  rpc UpdateScheduleAfterBooking (UpdateSchedule) returns (UpdateScheduleRespone);

  //This service only use after booking failed to paid 
  rpc UpdateScheduleStatus (ReopenSchedule) returns (UpdateScheduleRespone);

  //This Service use for update reviews and rateing only 
  rpc UpdateReviewAndRate (TourPackage) returns (TourPackageResponse);

  //This method only use for update tour status 
  rpc UdpdateScheduleTourStatus (ScheduleTourStatus) returns (ScheduleTourStatusResponse);
  
}

service WishListService{
  rpc AddWishList(AddWishListRequest)returns(AddWishListResponse){
    option (google.api.http) = {
      post : "/api/v1/tourpackages/{tour_id}/wish-list/{user_uid}",
      body :"*"
    };
  }

  rpc GetWishList(BrowseRequestWishList)returns(WishListResponse){
    option (google.api.http) = {
      get : "/api/v1/tourpackages/wish-list/{user_uid}",
    };
  }
}

