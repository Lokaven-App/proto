syntax = "proto3";
package tourpackage;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

message TourPackage{
  string tour_id = 1;
  string title = 2;
  repeated PackageMedia medias = 3;
  repeated PackageSchedule schedules = 4;
  string description = 5;
  string price = 6;
  repeated string categories = 7;
  repeated string tags = 8;
  string location = 9;
  string rate = 10;
  string review = 11;
  repeated PackageAddon addons = 12;
  bool is_curated = 13;
  bool is_featured = 14;
  bool is_refundable = 15;
  string host_id = 16;
  string type_tour = 17;
  repeated PackagePriceList price_list = 18;
  string terms_of_service = 19;
  string custom_policies = 20;
  string age_restriction = 21;
  string cost_foreign_guest = 22;
  string itinerary = 23;
  string policy_title = 24;
  string policy = 25;
  string additional_cost = 26;
  google.protobuf.Timestamp created_at = 27;
}

message TourHost{
  string host_id = 1;
  string first_name = 2;
  string last_name = 3;
  string gender = 4;
  string phone_number = 5;
  google.protobuf.Timestamp date_of_birth = 6;
  string password = 7;
  string business_name = 8;
  string business_category = 9;
  string address = 10;
  string business_about = 11;
  string personalid_type = 12;
  string personalid_number = 13;
  string verification_type = 14;
  string verification_number = 15;
  bool is_verified = 16;
  string account_number = 17;
  string balance = 18;
  string user_uid = 19;
  google.protobuf.Timestamp created_at = 20;
  string email = 21 ;
}

message TourPackageRequest{
  string tour_id = 1;
  string title = 2;
  repeated PackageMedia medias = 3;
  repeated PackageSchedule schedules = 4;
  string description = 5;
  string price = 6;
  repeated string categories = 7;
  repeated string tags = 8;
  string location = 9;
  string rate = 10;
  string review = 11;
  repeated PackageAddon addons = 12;
  bool is_curated = 13;
  bool is_featured = 14;
  bool is_refundable = 15;
  string host_id = 16;
  string type_tour = 17;
  repeated PackagePriceList price_list = 18;
  string terms_of_service = 19;
  string custom_policies = 20;
  string age_restriction = 21;
  string cost_foreign_guest = 22;
  string itinerary = 23;
  string policy_title = 24;
  string policy = 25;
  string additional_cost = 26;
}

message TourPackageResponse{
  TourPackage data = 1;
}

message UpdateTourPackageResponse{
  TourPackage data = 1;
}

message PackageTag{
  string tag_name = 1;
  string tour_id = 2;
}

message PackageTagResponse{
  TourPackage data = 1;
}

message PackageCategory{
  repeated string category_name = 1;
  string tour_id = 2;
}

message PackageCategoryResponse{
  TourPackage data = 1;
}

message PackageMedia{
  string media_id = 1;
  string url = 2;
  string type = 3 ;
  string tour_id = 4;
}

message PackageMediaResponse{
  TourPackage data = 1;
}

message PackageSchedule{
  string schedule_id = 1;
  string tour_id = 2;
  string durations = 3;
  google.protobuf.Timestamp start_date = 4;
  google.protobuf.Timestamp end_date = 5;
  string quota = 6;
  bool is_active = 7;
  string min_quota = 8;
  string max_quota = 9;
  bool is_booked = 10;
}

message BrowseTourSchedule{
  repeated PackageSchedule data = 1;
}

message PackageScheduleResponse{
  TourPackage data = 1;
  string min_quota = 5;
  string max_quota = 6;
  bool is_active = 7;
  bool is_booked = 8;
}

message PackageAddon{
  string addon = 1;
  string price = 2;
  string tour_id = 3;
}

message DeletePackageResponse{
  TourPackage data = 1;
  int32 code = 2;
  string title = 3;
}

message TourHostResponse {
  TourHost data = 2;
}

message PackageAddonResponse{
  TourPackage data = 1;
}

message PackagePriceList{
  string price_id = 1;
  string min_participant = 2;
  string max_participant = 3;
  string price = 4;
  string kid_price = 5;
  string min_kid_age = 6;
  string max_kid_age = 7;
}

message BrowseTourPackage{
  repeated TourPackage data = 1;
}

message Filter{
  string Field = 1;
  string Operator = 2;
  string Value = 3;
}

message BrowseRequest{
  repeated Filter filters = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message DeleteSchedule{
  string schedule_id = 1;
  string tour_id = 2;
  google.protobuf.Timestamp start_date = 3;
  google.protobuf.Timestamp end_date = 4;
  string quota = 5;
  string durations = 7;
  string min_quota = 8;
  string max_quota = 9;
  bool is_active = 6;
  bool is_booked = 10;
}

message DeleteScheduleRespone{
  DeleteSchedule data = 1;
}

message DeleteAddon{
  string addon = 1;
  string price = 2;
  string tour_id = 3;
}

message DeleteAddonRespone{
  DeleteAddon data = 1;
}

message DeleteMedia{
  string media_id = 1;
  string url = 2;
  string type = 3 ;
  string tour_id = 4;
}

message DeleteMediaRespone{
  DeleteMedia data = 1;
}

message CategoryListRespone{
  repeated PackageCategory data = 1 ;
}

service TourPackageService{
  rpc CreateTourPackage(TourPackage) returns (TourPackageResponse){
    option(google.api.http) = {
      post : "/api/v1/tourpackages/tourhosts/{host_id}",
      body : "*"
    };
  }

  rpc DeleteTourPackage(TourPackage) returns (DeletePackageResponse){
    option(google.api.http) = {
      delete : "/api/v1/tourpackages/{tour_id}"
    };
  }

  rpc GetTourPackage(BrowseRequest)returns(BrowseTourPackage){
    option (google.api.http) = {
      get : "/api/v1/tourpackages"
    };
  }

  rpc GetDetailTourPackage(TourPackage)returns(TourPackageResponse){
    option (google.api.http) = {
      get : "/api/v1/tourpackages/{tour_id}"
    };
  }

  rpc GetTourPackageByHostID(TourPackage)returns(BrowseTourPackage){
    option (google.api.http) = {
      get : "/api/v1/tourpackages/by-tourhosts/{host_id}"
    };
  }

  rpc GetDetailTourPackageByHostID(TourPackage)returns(TourPackageResponse){
    option (google.api.http) = {
      get : "/api/v1/tourpackages/{tour_id}/by-tourhosts/{host_id}"
    };
  }

  rpc GetDetailHost(TourPackage)returns(TourHostResponse){
    option (google.api.http) = {
      get : "/api/v1/tourpackages/detail-tourhosts/{host_id}"
    };
  }

  rpc UpdateTourPackage(TourPackageRequest)returns(UpdateTourPackageResponse){
    option (google.api.http) = {
      patch : "/api/v1/tourpackages/{tour_id}",
      body : "*"
    };
  }

  rpc AddPackageTag(TourPackage) returns (PackageTagResponse){
    option (google.api.http) = {
      post : "/api/v1/tourpackages/{tour_id}/tags",
      body : "*"
    };
  }

  rpc DeletePackageTag(TourPackage) returns (PackageTagResponse){
    option (google.api.http) = {
      delete : "/api/v1/tourpackages/{tour_id}/tags",
    };
  }

  rpc AddPackageCategory(TourPackage) returns (PackageCategoryResponse){
    option (google.api.http) = {
      post: "/api/v1/tourpackages/{tour_id}/categories",
      body: "*"
    };
  }

  rpc DeletePackageCategory(TourPackage) returns (PackageCategoryResponse){
    option (google.api.http) = {
      delete : "/api/v1/tourpackages/{tour_id}/categories",
    };
  }

  rpc AddPackageMedia(TourPackage)returns(PackageMediaResponse){
    option (google.api.http) = {
      post: "/api/v1/tourpackages/{tour_id}/medias",
      body: "*"
    };
  }

  rpc DeletePackageMedia(DeleteMedia)returns(DeleteMediaRespone){
    option (google.api.http) = {
      delete: "/api/v1/tourpackages/{tour_id}/medias/{media_id}",
    };
  }

  rpc AddPackageSchedule(TourPackage)returns(PackageScheduleResponse){
    option (google.api.http) = {
      post: "/api/v1/tourpackages/{tour_id}/schedules",
      body: "*"
    };
  }

  rpc UpdatePackageSchedule(TourPackage) returns(PackageScheduleResponse) {
    option (google.api.http) = {
      patch : "/api/v1/tourpackages/{tour_id}/schedules",
      body : "*"
    };
  }

  rpc GetListPackageSchedule(TourPackage) returns(BrowseTourSchedule) {
    option (google.api.http) = {
      get : "/api/v1/tourpackages/{tour_id}/schedules"
    };
  }

  rpc DeletePackageSchedule(DeleteSchedule)returns(DeleteScheduleRespone){
    option (google.api.http) = {
      delete: "/api/v1/tourpackages/{tour_id}/schedules/{schedule_id}",
    };
  }

  rpc AddPackageAddon(TourPackage)returns(PackageAddonResponse){
    option (google.api.http) = {
      post: "/api/v1/tourpackages/{tour_id}/addons",
      body: "*"
    };
  }

  rpc DeletePackageAddon(DeleteAddon)returns(DeleteAddonRespone){
    option (google.api.http) = {
      delete: "/api/v1/tourpackages/{tour_id}/addons/{addon}",
    };
  }

  rpc GetListCategory(BrowseRequest) returns (CategoryListRespone){
    option (google.api.http) = {
      get : "/api/v1/tourpackages/categories",
    };
  }
}
