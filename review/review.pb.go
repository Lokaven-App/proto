// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: pb/review.proto

package review

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RatingReview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReviewId   string                 `protobuf:"bytes,1,opt,name=review_id,json=reviewId,proto3" json:"review_id,omitempty"`
	OrderId    string                 `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	UserUid    string                 `protobuf:"bytes,3,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	TourId     string                 `protobuf:"bytes,4,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	ScheduleId string                 `protobuf:"bytes,5,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	StartDate  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Rating     string                 `protobuf:"bytes,8,opt,name=rating,proto3" json:"rating,omitempty"`
	Review     string                 `protobuf:"bytes,9,opt,name=review,proto3" json:"review,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UserInfo   *UserDetail            `protobuf:"bytes,12,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
}

func (x *RatingReview) Reset() {
	*x = RatingReview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_review_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingReview) ProtoMessage() {}

func (x *RatingReview) ProtoReflect() protoreflect.Message {
	mi := &file_pb_review_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingReview.ProtoReflect.Descriptor instead.
func (*RatingReview) Descriptor() ([]byte, []int) {
	return file_pb_review_proto_rawDescGZIP(), []int{0}
}

func (x *RatingReview) GetReviewId() string {
	if x != nil {
		return x.ReviewId
	}
	return ""
}

func (x *RatingReview) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *RatingReview) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *RatingReview) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *RatingReview) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *RatingReview) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *RatingReview) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *RatingReview) GetRating() string {
	if x != nil {
		return x.Rating
	}
	return ""
}

func (x *RatingReview) GetReview() string {
	if x != nil {
		return x.Review
	}
	return ""
}

func (x *RatingReview) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RatingReview) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *RatingReview) GetUserInfo() *UserDetail {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type RequestAddRatingReview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReviewId   string                 `protobuf:"bytes,1,opt,name=review_id,json=reviewId,proto3" json:"review_id,omitempty"`
	OrderId    string                 `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	UserUid    string                 `protobuf:"bytes,3,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	TourId     string                 `protobuf:"bytes,4,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	ScheduleId string                 `protobuf:"bytes,5,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	StartDate  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Rating     string                 `protobuf:"bytes,8,opt,name=rating,proto3" json:"rating,omitempty"`
	Review     string                 `protobuf:"bytes,9,opt,name=review,proto3" json:"review,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UserInfo   *UserDetail            `protobuf:"bytes,11,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
}

func (x *RequestAddRatingReview) Reset() {
	*x = RequestAddRatingReview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_review_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestAddRatingReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAddRatingReview) ProtoMessage() {}

func (x *RequestAddRatingReview) ProtoReflect() protoreflect.Message {
	mi := &file_pb_review_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAddRatingReview.ProtoReflect.Descriptor instead.
func (*RequestAddRatingReview) Descriptor() ([]byte, []int) {
	return file_pb_review_proto_rawDescGZIP(), []int{1}
}

func (x *RequestAddRatingReview) GetReviewId() string {
	if x != nil {
		return x.ReviewId
	}
	return ""
}

func (x *RequestAddRatingReview) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *RequestAddRatingReview) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *RequestAddRatingReview) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *RequestAddRatingReview) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *RequestAddRatingReview) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *RequestAddRatingReview) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *RequestAddRatingReview) GetRating() string {
	if x != nil {
		return x.Rating
	}
	return ""
}

func (x *RequestAddRatingReview) GetReview() string {
	if x != nil {
		return x.Review
	}
	return ""
}

func (x *RequestAddRatingReview) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RequestAddRatingReview) GetUserInfo() *UserDetail {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type RequestUpdateRatingReview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReviewId   string                 `protobuf:"bytes,1,opt,name=review_id,json=reviewId,proto3" json:"review_id,omitempty"`
	OrderId    string                 `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	UserUid    string                 `protobuf:"bytes,3,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	TourId     string                 `protobuf:"bytes,4,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	ScheduleId string                 `protobuf:"bytes,5,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	StartDate  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Rating     string                 `protobuf:"bytes,8,opt,name=rating,proto3" json:"rating,omitempty"`
	Review     string                 `protobuf:"bytes,9,opt,name=review,proto3" json:"review,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UserInfo   *UserDetail            `protobuf:"bytes,12,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
}

func (x *RequestUpdateRatingReview) Reset() {
	*x = RequestUpdateRatingReview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_review_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestUpdateRatingReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestUpdateRatingReview) ProtoMessage() {}

func (x *RequestUpdateRatingReview) ProtoReflect() protoreflect.Message {
	mi := &file_pb_review_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestUpdateRatingReview.ProtoReflect.Descriptor instead.
func (*RequestUpdateRatingReview) Descriptor() ([]byte, []int) {
	return file_pb_review_proto_rawDescGZIP(), []int{2}
}

func (x *RequestUpdateRatingReview) GetReviewId() string {
	if x != nil {
		return x.ReviewId
	}
	return ""
}

func (x *RequestUpdateRatingReview) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *RequestUpdateRatingReview) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *RequestUpdateRatingReview) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *RequestUpdateRatingReview) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *RequestUpdateRatingReview) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *RequestUpdateRatingReview) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *RequestUpdateRatingReview) GetRating() string {
	if x != nil {
		return x.Rating
	}
	return ""
}

func (x *RequestUpdateRatingReview) GetReview() string {
	if x != nil {
		return x.Review
	}
	return ""
}

func (x *RequestUpdateRatingReview) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RequestUpdateRatingReview) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *RequestUpdateRatingReview) GetUserInfo() *UserDetail {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type UpdateRatingReviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *RequestUpdateRatingReview `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Code  int32                      `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Title string                     `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *UpdateRatingReviewResponse) Reset() {
	*x = UpdateRatingReviewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_review_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRatingReviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRatingReviewResponse) ProtoMessage() {}

func (x *UpdateRatingReviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_review_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRatingReviewResponse.ProtoReflect.Descriptor instead.
func (*UpdateRatingReviewResponse) Descriptor() ([]byte, []int) {
	return file_pb_review_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateRatingReviewResponse) GetData() *RequestUpdateRatingReview {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateRatingReviewResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateRatingReviewResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type RatingReviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *RequestAddRatingReview `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Code  int32                   `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Title string                  `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *RatingReviewResponse) Reset() {
	*x = RatingReviewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_review_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingReviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingReviewResponse) ProtoMessage() {}

func (x *RatingReviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_review_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingReviewResponse.ProtoReflect.Descriptor instead.
func (*RatingReviewResponse) Descriptor() ([]byte, []int) {
	return file_pb_review_proto_rawDescGZIP(), []int{4}
}

func (x *RatingReviewResponse) GetData() *RequestAddRatingReview {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RatingReviewResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RatingReviewResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type RequestParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       string `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage    string `protobuf:"bytes,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	TourId     string `protobuf:"bytes,3,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	ScheduleId string `protobuf:"bytes,4,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *RequestParams) Reset() {
	*x = RequestParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_review_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestParams) ProtoMessage() {}

func (x *RequestParams) ProtoReflect() protoreflect.Message {
	mi := &file_pb_review_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestParams.ProtoReflect.Descriptor instead.
func (*RequestParams) Descriptor() ([]byte, []int) {
	return file_pb_review_proto_rawDescGZIP(), []int{5}
}

func (x *RequestParams) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *RequestParams) GetPerPage() string {
	if x != nil {
		return x.PerPage
	}
	return ""
}

func (x *RequestParams) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *RequestParams) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

type GetRatingReviewListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data          []*RatingReview `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Code          int32           `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Title         string          `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Paginate      *Paginate       `protobuf:"bytes,4,opt,name=paginate,proto3" json:"paginate,omitempty"`
	AvgRating     float64         `protobuf:"fixed64,5,opt,name=avg_rating,json=avgRating,proto3" json:"avg_rating,omitempty"`
	TotalReviewer int32           `protobuf:"varint,6,opt,name=total_reviewer,json=totalReviewer,proto3" json:"total_reviewer,omitempty"`
}

func (x *GetRatingReviewListResponse) Reset() {
	*x = GetRatingReviewListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_review_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRatingReviewListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRatingReviewListResponse) ProtoMessage() {}

func (x *GetRatingReviewListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_review_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRatingReviewListResponse.ProtoReflect.Descriptor instead.
func (*GetRatingReviewListResponse) Descriptor() ([]byte, []int) {
	return file_pb_review_proto_rawDescGZIP(), []int{6}
}

func (x *GetRatingReviewListResponse) GetData() []*RatingReview {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetRatingReviewListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetRatingReviewListResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetRatingReviewListResponse) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

func (x *GetRatingReviewListResponse) GetAvgRating() float64 {
	if x != nil {
		return x.AvgRating
	}
	return 0
}

func (x *GetRatingReviewListResponse) GetTotalReviewer() int32 {
	if x != nil {
		return x.TotalReviewer
	}
	return 0
}

type Paginate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentPage int32 `protobuf:"varint,1,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	NextPage    int32 `protobuf:"varint,2,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	TotalPage   int32 `protobuf:"varint,3,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	PerPage     int32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *Paginate) Reset() {
	*x = Paginate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_review_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paginate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paginate) ProtoMessage() {}

func (x *Paginate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_review_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paginate.ProtoReflect.Descriptor instead.
func (*Paginate) Descriptor() ([]byte, []int) {
	return file_pb_review_proto_rawDescGZIP(), []int{7}
}

func (x *Paginate) GetCurrentPage() int32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *Paginate) GetNextPage() int32 {
	if x != nil {
		return x.NextPage
	}
	return 0
}

func (x *Paginate) GetTotalPage() int32 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *Paginate) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type GetSingleRatingReviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data          *RatingReview `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Code          int32         `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Title         string        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	TotalReviewer int32         `protobuf:"varint,4,opt,name=total_reviewer,json=totalReviewer,proto3" json:"total_reviewer,omitempty"`
}

func (x *GetSingleRatingReviewResponse) Reset() {
	*x = GetSingleRatingReviewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_review_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSingleRatingReviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingleRatingReviewResponse) ProtoMessage() {}

func (x *GetSingleRatingReviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_review_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingleRatingReviewResponse.ProtoReflect.Descriptor instead.
func (*GetSingleRatingReviewResponse) Descriptor() ([]byte, []int) {
	return file_pb_review_proto_rawDescGZIP(), []int{8}
}

func (x *GetSingleRatingReviewResponse) GetData() *RatingReview {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetSingleRatingReviewResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSingleRatingReviewResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetSingleRatingReviewResponse) GetTotalReviewer() int32 {
	if x != nil {
		return x.TotalReviewer
	}
	return 0
}

type UserDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fullname string `protobuf:"bytes,1,opt,name=fullname,proto3" json:"fullname,omitempty"`
	UrlPhoto string `protobuf:"bytes,2,opt,name=url_photo,json=urlPhoto,proto3" json:"url_photo,omitempty"`
}

func (x *UserDetail) Reset() {
	*x = UserDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_review_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDetail) ProtoMessage() {}

func (x *UserDetail) ProtoReflect() protoreflect.Message {
	mi := &file_pb_review_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDetail.ProtoReflect.Descriptor instead.
func (*UserDetail) Descriptor() ([]byte, []int) {
	return file_pb_review_proto_rawDescGZIP(), []int{9}
}

func (x *UserDetail) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *UserDetail) GetUrlPhoto() string {
	if x != nil {
		return x.UrlPhoto
	}
	return ""
}

type CounterRating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stars string `protobuf:"bytes,1,opt,name=stars,proto3" json:"stars,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CounterRating) Reset() {
	*x = CounterRating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_review_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterRating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterRating) ProtoMessage() {}

func (x *CounterRating) ProtoReflect() protoreflect.Message {
	mi := &file_pb_review_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterRating.ProtoReflect.Descriptor instead.
func (*CounterRating) Descriptor() ([]byte, []int) {
	return file_pb_review_proto_rawDescGZIP(), []int{10}
}

func (x *CounterRating) GetStars() string {
	if x != nil {
		return x.Stars
	}
	return ""
}

func (x *CounterRating) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetRatingListReviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataRates     []*CounterRating `protobuf:"bytes,1,rep,name=data_rates,json=dataRates,proto3" json:"data_rates,omitempty"`
	Data          []*RatingReview  `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	TotalReviewer int32            `protobuf:"varint,3,opt,name=total_reviewer,json=totalReviewer,proto3" json:"total_reviewer,omitempty"`
	Code          int32            `protobuf:"varint,4,opt,name=Code,proto3" json:"Code,omitempty"`
	Title         string           `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	AvgRating     float64          `protobuf:"fixed64,6,opt,name=avg_rating,json=avgRating,proto3" json:"avg_rating,omitempty"`
	Paginate      *Paginate        `protobuf:"bytes,7,opt,name=paginate,proto3" json:"paginate,omitempty"`
}

func (x *GetRatingListReviewResponse) Reset() {
	*x = GetRatingListReviewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_review_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRatingListReviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRatingListReviewResponse) ProtoMessage() {}

func (x *GetRatingListReviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_review_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRatingListReviewResponse.ProtoReflect.Descriptor instead.
func (*GetRatingListReviewResponse) Descriptor() ([]byte, []int) {
	return file_pb_review_proto_rawDescGZIP(), []int{11}
}

func (x *GetRatingListReviewResponse) GetDataRates() []*CounterRating {
	if x != nil {
		return x.DataRates
	}
	return nil
}

func (x *GetRatingListReviewResponse) GetData() []*RatingReview {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetRatingListReviewResponse) GetTotalReviewer() int32 {
	if x != nil {
		return x.TotalReviewer
	}
	return 0
}

func (x *GetRatingListReviewResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetRatingListReviewResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetRatingListReviewResponse) GetAvgRating() float64 {
	if x != nil {
		return x.AvgRating
	}
	return 0
}

func (x *GetRatingListReviewResponse) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

var File_pb_review_proto protoreflect.FileDescriptor

var file_pb_review_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x62, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x03, 0x0a, 0x0c, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2f,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xb3, 0x03, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf1, 0x03, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7d, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x74, 0x0a, 0x14, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x78,
	0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xe5, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76,
	0x67, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x61, 0x76, 0x67, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72,
	0x22, 0x84, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x22, 0x45, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x72, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x72, 0x6c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x22, 0x3b, 0x0a, 0x0d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9b, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x28,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x67,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61,
	0x76, 0x67, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x32, 0xdf, 0x07, 0x0a, 0x16, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xac, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1e, 0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x1a, 0x1c, 0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x55, 0x22, 0x50, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74,
	0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x6f, 0x75,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f,
	0x7b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a,
	0x12, 0xc4, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x61, 0x32, 0x5c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x7d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x15, 0x2e, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0x23, 0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f,
	0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x6f,
	0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb4, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x14, 0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x1a, 0x25, 0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x58, 0x12, 0x56, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x8f, 0x01,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x14, 0x2e, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x1a, 0x25, 0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f,
	0x12, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b,
	0x74, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x12,
	0x86, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x15, 0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x23,
	0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x74, 0x6f, 0x75,
	0x72, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_review_proto_rawDescOnce sync.Once
	file_pb_review_proto_rawDescData = file_pb_review_proto_rawDesc
)

func file_pb_review_proto_rawDescGZIP() []byte {
	file_pb_review_proto_rawDescOnce.Do(func() {
		file_pb_review_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_review_proto_rawDescData)
	})
	return file_pb_review_proto_rawDescData
}

var file_pb_review_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_pb_review_proto_goTypes = []interface{}{
	(*RatingReview)(nil),                  // 0: review.RatingReview
	(*RequestAddRatingReview)(nil),        // 1: review.RequestAddRatingReview
	(*RequestUpdateRatingReview)(nil),     // 2: review.RequestUpdateRatingReview
	(*UpdateRatingReviewResponse)(nil),    // 3: review.UpdateRatingReviewResponse
	(*RatingReviewResponse)(nil),          // 4: review.RatingReviewResponse
	(*RequestParams)(nil),                 // 5: review.RequestParams
	(*GetRatingReviewListResponse)(nil),   // 6: review.GetRatingReviewListResponse
	(*Paginate)(nil),                      // 7: review.Paginate
	(*GetSingleRatingReviewResponse)(nil), // 8: review.GetSingleRatingReviewResponse
	(*UserDetail)(nil),                    // 9: review.UserDetail
	(*CounterRating)(nil),                 // 10: review.CounterRating
	(*GetRatingListReviewResponse)(nil),   // 11: review.GetRatingListReviewResponse
	(*timestamppb.Timestamp)(nil),         // 12: google.protobuf.Timestamp
}
var file_pb_review_proto_depIdxs = []int32{
	12, // 0: review.RatingReview.start_date:type_name -> google.protobuf.Timestamp
	12, // 1: review.RatingReview.end_date:type_name -> google.protobuf.Timestamp
	12, // 2: review.RatingReview.created_at:type_name -> google.protobuf.Timestamp
	12, // 3: review.RatingReview.updated_at:type_name -> google.protobuf.Timestamp
	9,  // 4: review.RatingReview.user_info:type_name -> review.UserDetail
	12, // 5: review.RequestAddRatingReview.start_date:type_name -> google.protobuf.Timestamp
	12, // 6: review.RequestAddRatingReview.end_date:type_name -> google.protobuf.Timestamp
	12, // 7: review.RequestAddRatingReview.created_at:type_name -> google.protobuf.Timestamp
	9,  // 8: review.RequestAddRatingReview.user_info:type_name -> review.UserDetail
	12, // 9: review.RequestUpdateRatingReview.start_date:type_name -> google.protobuf.Timestamp
	12, // 10: review.RequestUpdateRatingReview.end_date:type_name -> google.protobuf.Timestamp
	12, // 11: review.RequestUpdateRatingReview.created_at:type_name -> google.protobuf.Timestamp
	12, // 12: review.RequestUpdateRatingReview.updated_at:type_name -> google.protobuf.Timestamp
	9,  // 13: review.RequestUpdateRatingReview.user_info:type_name -> review.UserDetail
	2,  // 14: review.UpdateRatingReviewResponse.data:type_name -> review.RequestUpdateRatingReview
	1,  // 15: review.RatingReviewResponse.data:type_name -> review.RequestAddRatingReview
	0,  // 16: review.GetRatingReviewListResponse.data:type_name -> review.RatingReview
	7,  // 17: review.GetRatingReviewListResponse.paginate:type_name -> review.Paginate
	0,  // 18: review.GetSingleRatingReviewResponse.data:type_name -> review.RatingReview
	10, // 19: review.GetRatingListReviewResponse.data_rates:type_name -> review.CounterRating
	0,  // 20: review.GetRatingListReviewResponse.data:type_name -> review.RatingReview
	7,  // 21: review.GetRatingListReviewResponse.paginate:type_name -> review.Paginate
	1,  // 22: review.RatingAndReviewService.AddRatingReview:input_type -> review.RequestAddRatingReview
	2,  // 23: review.RatingAndReviewService.UpdateRatingReview:input_type -> review.RequestUpdateRatingReview
	5,  // 24: review.RatingAndReviewService.GetRatingReview:input_type -> review.RequestParams
	0,  // 25: review.RatingAndReviewService.GetSingleRatingReview:input_type -> review.RatingReview
	0,  // 26: review.RatingAndReviewService.GetNewestRatingListReview:input_type -> review.RatingReview
	5,  // 27: review.RatingAndReviewService.GetRatingListReview:input_type -> review.RequestParams
	4,  // 28: review.RatingAndReviewService.AddRatingReview:output_type -> review.RatingReviewResponse
	3,  // 29: review.RatingAndReviewService.UpdateRatingReview:output_type -> review.UpdateRatingReviewResponse
	6,  // 30: review.RatingAndReviewService.GetRatingReview:output_type -> review.GetRatingReviewListResponse
	8,  // 31: review.RatingAndReviewService.GetSingleRatingReview:output_type -> review.GetSingleRatingReviewResponse
	8,  // 32: review.RatingAndReviewService.GetNewestRatingListReview:output_type -> review.GetSingleRatingReviewResponse
	11, // 33: review.RatingAndReviewService.GetRatingListReview:output_type -> review.GetRatingListReviewResponse
	28, // [28:34] is the sub-list for method output_type
	22, // [22:28] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_pb_review_proto_init() }
func file_pb_review_proto_init() {
	if File_pb_review_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_review_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingReview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_review_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestAddRatingReview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_review_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestUpdateRatingReview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_review_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRatingReviewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_review_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingReviewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_review_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_review_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRatingReviewListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_review_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paginate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_review_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSingleRatingReviewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_review_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_review_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterRating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_review_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRatingListReviewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_review_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_review_proto_goTypes,
		DependencyIndexes: file_pb_review_proto_depIdxs,
		MessageInfos:      file_pb_review_proto_msgTypes,
	}.Build()
	File_pb_review_proto = out.File
	file_pb_review_proto_rawDesc = nil
	file_pb_review_proto_goTypes = nil
	file_pb_review_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RatingAndReviewServiceClient is the client API for RatingAndReviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RatingAndReviewServiceClient interface {
	AddRatingReview(ctx context.Context, in *RequestAddRatingReview, opts ...grpc.CallOption) (*RatingReviewResponse, error)
	UpdateRatingReview(ctx context.Context, in *RequestUpdateRatingReview, opts ...grpc.CallOption) (*UpdateRatingReviewResponse, error)
	GetRatingReview(ctx context.Context, in *RequestParams, opts ...grpc.CallOption) (*GetRatingReviewListResponse, error)
	GetSingleRatingReview(ctx context.Context, in *RatingReview, opts ...grpc.CallOption) (*GetSingleRatingReviewResponse, error)
	GetNewestRatingListReview(ctx context.Context, in *RatingReview, opts ...grpc.CallOption) (*GetSingleRatingReviewResponse, error)
	GetRatingListReview(ctx context.Context, in *RequestParams, opts ...grpc.CallOption) (*GetRatingListReviewResponse, error)
}

type ratingAndReviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRatingAndReviewServiceClient(cc grpc.ClientConnInterface) RatingAndReviewServiceClient {
	return &ratingAndReviewServiceClient{cc}
}

func (c *ratingAndReviewServiceClient) AddRatingReview(ctx context.Context, in *RequestAddRatingReview, opts ...grpc.CallOption) (*RatingReviewResponse, error) {
	out := new(RatingReviewResponse)
	err := c.cc.Invoke(ctx, "/review.RatingAndReviewService/AddRatingReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingAndReviewServiceClient) UpdateRatingReview(ctx context.Context, in *RequestUpdateRatingReview, opts ...grpc.CallOption) (*UpdateRatingReviewResponse, error) {
	out := new(UpdateRatingReviewResponse)
	err := c.cc.Invoke(ctx, "/review.RatingAndReviewService/UpdateRatingReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingAndReviewServiceClient) GetRatingReview(ctx context.Context, in *RequestParams, opts ...grpc.CallOption) (*GetRatingReviewListResponse, error) {
	out := new(GetRatingReviewListResponse)
	err := c.cc.Invoke(ctx, "/review.RatingAndReviewService/GetRatingReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingAndReviewServiceClient) GetSingleRatingReview(ctx context.Context, in *RatingReview, opts ...grpc.CallOption) (*GetSingleRatingReviewResponse, error) {
	out := new(GetSingleRatingReviewResponse)
	err := c.cc.Invoke(ctx, "/review.RatingAndReviewService/GetSingleRatingReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingAndReviewServiceClient) GetNewestRatingListReview(ctx context.Context, in *RatingReview, opts ...grpc.CallOption) (*GetSingleRatingReviewResponse, error) {
	out := new(GetSingleRatingReviewResponse)
	err := c.cc.Invoke(ctx, "/review.RatingAndReviewService/GetNewestRatingListReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingAndReviewServiceClient) GetRatingListReview(ctx context.Context, in *RequestParams, opts ...grpc.CallOption) (*GetRatingListReviewResponse, error) {
	out := new(GetRatingListReviewResponse)
	err := c.cc.Invoke(ctx, "/review.RatingAndReviewService/GetRatingListReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RatingAndReviewServiceServer is the server API for RatingAndReviewService service.
type RatingAndReviewServiceServer interface {
	AddRatingReview(context.Context, *RequestAddRatingReview) (*RatingReviewResponse, error)
	UpdateRatingReview(context.Context, *RequestUpdateRatingReview) (*UpdateRatingReviewResponse, error)
	GetRatingReview(context.Context, *RequestParams) (*GetRatingReviewListResponse, error)
	GetSingleRatingReview(context.Context, *RatingReview) (*GetSingleRatingReviewResponse, error)
	GetNewestRatingListReview(context.Context, *RatingReview) (*GetSingleRatingReviewResponse, error)
	GetRatingListReview(context.Context, *RequestParams) (*GetRatingListReviewResponse, error)
}

// UnimplementedRatingAndReviewServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRatingAndReviewServiceServer struct {
}

func (*UnimplementedRatingAndReviewServiceServer) AddRatingReview(context.Context, *RequestAddRatingReview) (*RatingReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRatingReview not implemented")
}
func (*UnimplementedRatingAndReviewServiceServer) UpdateRatingReview(context.Context, *RequestUpdateRatingReview) (*UpdateRatingReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRatingReview not implemented")
}
func (*UnimplementedRatingAndReviewServiceServer) GetRatingReview(context.Context, *RequestParams) (*GetRatingReviewListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRatingReview not implemented")
}
func (*UnimplementedRatingAndReviewServiceServer) GetSingleRatingReview(context.Context, *RatingReview) (*GetSingleRatingReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleRatingReview not implemented")
}
func (*UnimplementedRatingAndReviewServiceServer) GetNewestRatingListReview(context.Context, *RatingReview) (*GetSingleRatingReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewestRatingListReview not implemented")
}
func (*UnimplementedRatingAndReviewServiceServer) GetRatingListReview(context.Context, *RequestParams) (*GetRatingListReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRatingListReview not implemented")
}

func RegisterRatingAndReviewServiceServer(s *grpc.Server, srv RatingAndReviewServiceServer) {
	s.RegisterService(&_RatingAndReviewService_serviceDesc, srv)
}

func _RatingAndReviewService_AddRatingReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddRatingReview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingAndReviewServiceServer).AddRatingReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.RatingAndReviewService/AddRatingReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingAndReviewServiceServer).AddRatingReview(ctx, req.(*RequestAddRatingReview))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingAndReviewService_UpdateRatingReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUpdateRatingReview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingAndReviewServiceServer).UpdateRatingReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.RatingAndReviewService/UpdateRatingReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingAndReviewServiceServer).UpdateRatingReview(ctx, req.(*RequestUpdateRatingReview))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingAndReviewService_GetRatingReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingAndReviewServiceServer).GetRatingReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.RatingAndReviewService/GetRatingReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingAndReviewServiceServer).GetRatingReview(ctx, req.(*RequestParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingAndReviewService_GetSingleRatingReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingReview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingAndReviewServiceServer).GetSingleRatingReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.RatingAndReviewService/GetSingleRatingReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingAndReviewServiceServer).GetSingleRatingReview(ctx, req.(*RatingReview))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingAndReviewService_GetNewestRatingListReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingReview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingAndReviewServiceServer).GetNewestRatingListReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.RatingAndReviewService/GetNewestRatingListReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingAndReviewServiceServer).GetNewestRatingListReview(ctx, req.(*RatingReview))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingAndReviewService_GetRatingListReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingAndReviewServiceServer).GetRatingListReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.RatingAndReviewService/GetRatingListReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingAndReviewServiceServer).GetRatingListReview(ctx, req.(*RequestParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _RatingAndReviewService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "review.RatingAndReviewService",
	HandlerType: (*RatingAndReviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRatingReview",
			Handler:    _RatingAndReviewService_AddRatingReview_Handler,
		},
		{
			MethodName: "UpdateRatingReview",
			Handler:    _RatingAndReviewService_UpdateRatingReview_Handler,
		},
		{
			MethodName: "GetRatingReview",
			Handler:    _RatingAndReviewService_GetRatingReview_Handler,
		},
		{
			MethodName: "GetSingleRatingReview",
			Handler:    _RatingAndReviewService_GetSingleRatingReview_Handler,
		},
		{
			MethodName: "GetNewestRatingListReview",
			Handler:    _RatingAndReviewService_GetNewestRatingListReview_Handler,
		},
		{
			MethodName: "GetRatingListReview",
			Handler:    _RatingAndReviewService_GetRatingListReview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/review.proto",
}
