// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.1
// source: tax.proto

package tax

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Tax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxId      string                 `protobuf:"bytes,1,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	NumberTax  string                 `protobuf:"bytes,2,opt,name=number_tax,json=numberTax,proto3" json:"number_tax,omitempty"`
	Date       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	TypeTax    string                 `protobuf:"bytes,4,opt,name=type_tax,json=typeTax,proto3" json:"type_tax,omitempty"`
	Nominal    int32                  `protobuf:"varint,5,opt,name=nominal,proto3" json:"nominal,omitempty"`
	Attachment string                 `protobuf:"bytes,6,opt,name=attachment,proto3" json:"attachment,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	AdminInfo  *AdminInfo             `protobuf:"bytes,9,opt,name=admin_info,json=adminInfo,proto3" json:"admin_info,omitempty"`
}

func (x *Tax) Reset() {
	*x = Tax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tax_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tax) ProtoMessage() {}

func (x *Tax) ProtoReflect() protoreflect.Message {
	mi := &file_tax_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tax.ProtoReflect.Descriptor instead.
func (*Tax) Descriptor() ([]byte, []int) {
	return file_tax_proto_rawDescGZIP(), []int{0}
}

func (x *Tax) GetTaxId() string {
	if x != nil {
		return x.TaxId
	}
	return ""
}

func (x *Tax) GetNumberTax() string {
	if x != nil {
		return x.NumberTax
	}
	return ""
}

func (x *Tax) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Tax) GetTypeTax() string {
	if x != nil {
		return x.TypeTax
	}
	return ""
}

func (x *Tax) GetNominal() int32 {
	if x != nil {
		return x.Nominal
	}
	return 0
}

func (x *Tax) GetAttachment() string {
	if x != nil {
		return x.Attachment
	}
	return ""
}

func (x *Tax) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Tax) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Tax) GetAdminInfo() *AdminInfo {
	if x != nil {
		return x.AdminInfo
	}
	return nil
}

type TaxTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogTaxTransactionsId string                 `protobuf:"bytes,1,opt,name=log_tax_transactions_id,json=logTaxTransactionsId,proto3" json:"log_tax_transactions_id,omitempty"`
	OrderId              string                 `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderNumber          string                 `protobuf:"bytes,3,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	TaxTransactionNumber string                 `protobuf:"bytes,4,opt,name=tax_transaction_number,json=taxTransactionNumber,proto3" json:"tax_transaction_number,omitempty"`
	InvoiceNumber        string                 `protobuf:"bytes,5,opt,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	TypeTransaction      string                 `protobuf:"bytes,6,opt,name=type_transaction,json=typeTransaction,proto3" json:"type_transaction,omitempty"`
	TourId               string                 `protobuf:"bytes,7,opt,name=tour_id,json=tourId,proto3" json:"tour_id,omitempty"`
	TourTitle            string                 `protobuf:"bytes,8,opt,name=tour_title,json=tourTitle,proto3" json:"tour_title,omitempty"`
	ScheduleDate         string                 `protobuf:"bytes,9,opt,name=schedule_date,json=scheduleDate,proto3" json:"schedule_date,omitempty"`
	NominalTotalBooking  string                 `protobuf:"bytes,10,opt,name=nominal_total_booking,json=nominalTotalBooking,proto3" json:"nominal_total_booking,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	HostId               string                 `protobuf:"bytes,13,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	HostName             string                 `protobuf:"bytes,14,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	AddOnsPrice          int32                  `protobuf:"varint,15,opt,name=add_ons_price,json=addOnsPrice,proto3" json:"add_ons_price,omitempty"`
	TotalDp              int32                  `protobuf:"varint,16,opt,name=total_dp,json=totalDp,proto3" json:"total_dp,omitempty"`
	TotalDpMultiplier    int32                  `protobuf:"varint,17,opt,name=total_dp_multiplier,json=totalDpMultiplier,proto3" json:"total_dp_multiplier,omitempty"`
	Tax                  int32                  `protobuf:"varint,18,opt,name=tax,proto3" json:"tax,omitempty"`
	AdminFee             int32                  `protobuf:"varint,19,opt,name=admin_fee,json=adminFee,proto3" json:"admin_fee,omitempty"`
	Pph23                int32                  `protobuf:"varint,20,opt,name=pph23,proto3" json:"pph23,omitempty"`
	Commission           int32                  `protobuf:"varint,21,opt,name=commission,proto3" json:"commission,omitempty"`
	TotalTax             int32                  `protobuf:"varint,22,opt,name=total_tax,json=totalTax,proto3" json:"total_tax,omitempty"`
	TotalAmount          int32                  `protobuf:"varint,23,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	FullPayment          int32                  `protobuf:"varint,24,opt,name=full_payment,json=fullPayment,proto3" json:"full_payment,omitempty"`
	Ket                  string                 `protobuf:"bytes,25,opt,name=ket,proto3" json:"ket,omitempty"`
}

func (x *TaxTransaction) Reset() {
	*x = TaxTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tax_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxTransaction) ProtoMessage() {}

func (x *TaxTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_tax_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxTransaction.ProtoReflect.Descriptor instead.
func (*TaxTransaction) Descriptor() ([]byte, []int) {
	return file_tax_proto_rawDescGZIP(), []int{1}
}

func (x *TaxTransaction) GetLogTaxTransactionsId() string {
	if x != nil {
		return x.LogTaxTransactionsId
	}
	return ""
}

func (x *TaxTransaction) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *TaxTransaction) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *TaxTransaction) GetTaxTransactionNumber() string {
	if x != nil {
		return x.TaxTransactionNumber
	}
	return ""
}

func (x *TaxTransaction) GetInvoiceNumber() string {
	if x != nil {
		return x.InvoiceNumber
	}
	return ""
}

func (x *TaxTransaction) GetTypeTransaction() string {
	if x != nil {
		return x.TypeTransaction
	}
	return ""
}

func (x *TaxTransaction) GetTourId() string {
	if x != nil {
		return x.TourId
	}
	return ""
}

func (x *TaxTransaction) GetTourTitle() string {
	if x != nil {
		return x.TourTitle
	}
	return ""
}

func (x *TaxTransaction) GetScheduleDate() string {
	if x != nil {
		return x.ScheduleDate
	}
	return ""
}

func (x *TaxTransaction) GetNominalTotalBooking() string {
	if x != nil {
		return x.NominalTotalBooking
	}
	return ""
}

func (x *TaxTransaction) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TaxTransaction) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TaxTransaction) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *TaxTransaction) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *TaxTransaction) GetAddOnsPrice() int32 {
	if x != nil {
		return x.AddOnsPrice
	}
	return 0
}

func (x *TaxTransaction) GetTotalDp() int32 {
	if x != nil {
		return x.TotalDp
	}
	return 0
}

func (x *TaxTransaction) GetTotalDpMultiplier() int32 {
	if x != nil {
		return x.TotalDpMultiplier
	}
	return 0
}

func (x *TaxTransaction) GetTax() int32 {
	if x != nil {
		return x.Tax
	}
	return 0
}

func (x *TaxTransaction) GetAdminFee() int32 {
	if x != nil {
		return x.AdminFee
	}
	return 0
}

func (x *TaxTransaction) GetPph23() int32 {
	if x != nil {
		return x.Pph23
	}
	return 0
}

func (x *TaxTransaction) GetCommission() int32 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *TaxTransaction) GetTotalTax() int32 {
	if x != nil {
		return x.TotalTax
	}
	return 0
}

func (x *TaxTransaction) GetTotalAmount() int32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *TaxTransaction) GetFullPayment() int32 {
	if x != nil {
		return x.FullPayment
	}
	return 0
}

func (x *TaxTransaction) GetKet() string {
	if x != nil {
		return x.Ket
	}
	return ""
}

type TaxTransactionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    string            `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Code     int32             `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Data     []*TaxTransaction `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Paginate *Paginate         `protobuf:"bytes,4,opt,name=paginate,proto3" json:"paginate,omitempty"`
}

func (x *TaxTransactionListResponse) Reset() {
	*x = TaxTransactionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tax_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxTransactionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxTransactionListResponse) ProtoMessage() {}

func (x *TaxTransactionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tax_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxTransactionListResponse.ProtoReflect.Descriptor instead.
func (*TaxTransactionListResponse) Descriptor() ([]byte, []int) {
	return file_tax_proto_rawDescGZIP(), []int{2}
}

func (x *TaxTransactionListResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TaxTransactionListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaxTransactionListResponse) GetData() []*TaxTransaction {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TaxTransactionListResponse) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

type TaxTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string          `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Code  int32           `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Data  *TaxTransaction `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TaxTransactionResponse) Reset() {
	*x = TaxTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tax_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxTransactionResponse) ProtoMessage() {}

func (x *TaxTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tax_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxTransactionResponse.ProtoReflect.Descriptor instead.
func (*TaxTransactionResponse) Descriptor() ([]byte, []int) {
	return file_tax_proto_rawDescGZIP(), []int{3}
}

func (x *TaxTransactionResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TaxTransactionResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaxTransactionResponse) GetData() *TaxTransaction {
	if x != nil {
		return x.Data
	}
	return nil
}

type TaxSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year    string `protobuf:"bytes,1,opt,name=year,proto3" json:"year,omitempty"`
	Nominal int32  `protobuf:"varint,2,opt,name=nominal,proto3" json:"nominal,omitempty"`
}

func (x *TaxSummary) Reset() {
	*x = TaxSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tax_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxSummary) ProtoMessage() {}

func (x *TaxSummary) ProtoReflect() protoreflect.Message {
	mi := &file_tax_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxSummary.ProtoReflect.Descriptor instead.
func (*TaxSummary) Descriptor() ([]byte, []int) {
	return file_tax_proto_rawDescGZIP(), []int{4}
}

func (x *TaxSummary) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *TaxSummary) GetNominal() int32 {
	if x != nil {
		return x.Nominal
	}
	return 0
}

type RequestTax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param   string `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
	Page    int32  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PerPage int32  `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Filter  string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	Key     string `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *RequestTax) Reset() {
	*x = RequestTax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tax_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTax) ProtoMessage() {}

func (x *RequestTax) ProtoReflect() protoreflect.Message {
	mi := &file_tax_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTax.ProtoReflect.Descriptor instead.
func (*RequestTax) Descriptor() ([]byte, []int) {
	return file_tax_proto_rawDescGZIP(), []int{5}
}

func (x *RequestTax) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *RequestTax) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RequestTax) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *RequestTax) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *RequestTax) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type AdminInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUid string `protobuf:"bytes,1,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AdminInfo) Reset() {
	*x = AdminInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tax_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminInfo) ProtoMessage() {}

func (x *AdminInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tax_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminInfo.ProtoReflect.Descriptor instead.
func (*AdminInfo) Descriptor() ([]byte, []int) {
	return file_tax_proto_rawDescGZIP(), []int{6}
}

func (x *AdminInfo) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *AdminInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TaxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Code  int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Data  *Tax   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TaxResponse) Reset() {
	*x = TaxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tax_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxResponse) ProtoMessage() {}

func (x *TaxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tax_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxResponse.ProtoReflect.Descriptor instead.
func (*TaxResponse) Descriptor() ([]byte, []int) {
	return file_tax_proto_rawDescGZIP(), []int{7}
}

func (x *TaxResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TaxResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaxResponse) GetData() *Tax {
	if x != nil {
		return x.Data
	}
	return nil
}

type TaxDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Code  int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *TaxDeleteResponse) Reset() {
	*x = TaxDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tax_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxDeleteResponse) ProtoMessage() {}

func (x *TaxDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tax_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxDeleteResponse.ProtoReflect.Descriptor instead.
func (*TaxDeleteResponse) Descriptor() ([]byte, []int) {
	return file_tax_proto_rawDescGZIP(), []int{8}
}

func (x *TaxDeleteResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TaxDeleteResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type TaxListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    string        `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Code     int32         `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Data     []*Tax        `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Summary  []*TaxSummary `protobuf:"bytes,4,rep,name=summary,proto3" json:"summary,omitempty"`
	Paginate *Paginate     `protobuf:"bytes,5,opt,name=paginate,proto3" json:"paginate,omitempty"`
}

func (x *TaxListResponse) Reset() {
	*x = TaxListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tax_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxListResponse) ProtoMessage() {}

func (x *TaxListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tax_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxListResponse.ProtoReflect.Descriptor instead.
func (*TaxListResponse) Descriptor() ([]byte, []int) {
	return file_tax_proto_rawDescGZIP(), []int{9}
}

func (x *TaxListResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TaxListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaxListResponse) GetData() []*Tax {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TaxListResponse) GetSummary() []*TaxSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *TaxListResponse) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

type Paginate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentPage int32 `protobuf:"varint,1,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	NextPage    int32 `protobuf:"varint,2,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	TotalPage   int32 `protobuf:"varint,3,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	PerPage     int32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *Paginate) Reset() {
	*x = Paginate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tax_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paginate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paginate) ProtoMessage() {}

func (x *Paginate) ProtoReflect() protoreflect.Message {
	mi := &file_tax_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paginate.ProtoReflect.Descriptor instead.
func (*Paginate) Descriptor() ([]byte, []int) {
	return file_tax_proto_rawDescGZIP(), []int{10}
}

func (x *Paginate) GetCurrentPage() int32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *Paginate) GetNextPage() int32 {
	if x != nil {
		return x.NextPage
	}
	return 0
}

func (x *Paginate) GetTotalPage() int32 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *Paginate) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type ResponseLokavenTax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Taxs  []*TaxLokaven `protobuf:"bytes,3,rep,name=taxs,proto3" json:"taxs,omitempty"`
}

func (x *ResponseLokavenTax) Reset() {
	*x = ResponseLokavenTax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tax_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseLokavenTax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseLokavenTax) ProtoMessage() {}

func (x *ResponseLokavenTax) ProtoReflect() protoreflect.Message {
	mi := &file_tax_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseLokavenTax.ProtoReflect.Descriptor instead.
func (*ResponseLokavenTax) Descriptor() ([]byte, []int) {
	return file_tax_proto_rawDescGZIP(), []int{11}
}

func (x *ResponseLokavenTax) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseLokavenTax) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseLokavenTax) GetTaxs() []*TaxLokaven {
	if x != nil {
		return x.Taxs
	}
	return nil
}

type TaxLokaven struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month  string  `protobuf:"bytes,1,opt,name=month,proto3" json:"month,omitempty"`
	Amount float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TaxLokaven) Reset() {
	*x = TaxLokaven{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tax_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxLokaven) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxLokaven) ProtoMessage() {}

func (x *TaxLokaven) ProtoReflect() protoreflect.Message {
	mi := &file_tax_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxLokaven.ProtoReflect.Descriptor instead.
func (*TaxLokaven) Descriptor() ([]byte, []int) {
	return file_tax_proto_rawDescGZIP(), []int{12}
}

func (x *TaxLokaven) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *TaxLokaven) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

var File_tax_proto protoreflect.FileDescriptor

var file_tax_proto_rawDesc = []byte{
	0x0a, 0x09, 0x74, 0x61, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x74, 0x61, 0x78,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe5, 0x02, 0x0a, 0x03, 0x54, 0x61, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x61, 0x78, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x79, 0x70, 0x65, 0x54, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74,
	0x61, 0x78, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x93, 0x07, 0x0a, 0x0e, 0x54, 0x61, 0x78, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x6f,
	0x67, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x6f, 0x67,
	0x54, 0x61, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x16, 0x74, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x74, 0x61, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x6e, 0x73, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x64, 0x64,
	0x4f, 0x6e, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x64, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x70, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x74, 0x61, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x66,
	0x65, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x46,
	0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x70, 0x68, 0x32, 0x33, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x70, 0x70, 0x68, 0x32, 0x33, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x61, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x66, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x74, 0x22, 0x9a, 0x01,
	0x0a, 0x1a, 0x54, 0x61, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x54, 0x61, 0x78, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x29, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x22, 0x6b, 0x0a, 0x16, 0x54, 0x61,
	0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x27,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x61, 0x78, 0x2e, 0x54, 0x61, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x0a, 0x54, 0x61, 0x78, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x22, 0x7b, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x61,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70,
	0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0x3a, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x0b,
	0x54, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x54, 0x61, 0x78, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x11, 0x54, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x74, 0x61, 0x78, 0x2e, 0x54, 0x61, 0x78, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29,
	0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x54, 0x61, 0x78, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61,
	0x78, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x63, 0x0a, 0x12, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x6f, 0x6b, 0x61, 0x76, 0x65, 0x6e, 0x54, 0x61,
	0x78, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74,
	0x61, 0x78, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x61, 0x78, 0x2e,
	0x54, 0x61, 0x78, 0x4c, 0x6f, 0x6b, 0x61, 0x76, 0x65, 0x6e, 0x52, 0x04, 0x74, 0x61, 0x78, 0x73,
	0x22, 0x3a, 0x0a, 0x0a, 0x54, 0x61, 0x78, 0x4c, 0x6f, 0x6b, 0x61, 0x76, 0x65, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xdf, 0x08, 0x0a,
	0x0a, 0x54, 0x61, 0x78, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x41,
	0x64, 0x64, 0x54, 0x61, 0x78, 0x12, 0x08, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x54, 0x61, 0x78, 0x1a,
	0x10, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x54, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x57, 0x0a, 0x07, 0x45, 0x64,
	0x69, 0x74, 0x54, 0x61, 0x78, 0x12, 0x08, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x54, 0x61, 0x78, 0x1a,
	0x10, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x54, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x32, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x3a, 0x01, 0x2a, 0x12, 0x5c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x78,
	0x12, 0x08, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x54, 0x61, 0x78, 0x1a, 0x16, 0x2e, 0x74, 0x61, 0x78,
	0x2e, 0x54, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x2a, 0x25, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x78, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x56, 0x0a, 0x09, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x61, 0x78, 0x12, 0x08,
	0x2e, 0x74, 0x61, 0x78, 0x2e, 0x54, 0x61, 0x78, 0x1a, 0x10, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x54,
	0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x27, 0x12, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x78, 0x65,
	0x73, 0x2f, 0x7b, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x07, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x78, 0x12, 0x0f, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x61, 0x78, 0x1a, 0x14, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x54, 0x61, 0x78, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x78,
	0x65, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2d, 0x74, 0x61, 0x78, 0x65, 0x73, 0x12, 0x61,
	0x0a, 0x10, 0x4c, 0x6f, 0x6b, 0x61, 0x76, 0x65, 0x6e, 0x54, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x0f, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x61, 0x78, 0x1a, 0x17, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4c, 0x6f, 0x6b, 0x61, 0x76, 0x65, 0x6e, 0x54, 0x61, 0x78, 0x22, 0x23, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61,
	0x78, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x6b, 0x61, 0x76, 0x65, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x7c, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x78, 0x42, 0x79, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x12, 0x0f, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x61, 0x78, 0x1a, 0x1f, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x54, 0x61, 0x78, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x99, 0x01, 0x0a, 0x21, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x61, 0x78, 0x42, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x13, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x54, 0x61, 0x78, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x74, 0x61, 0x78,
	0x2e, 0x54, 0x61, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12,
	0x3a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2f, 0x7b, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x80, 0x01, 0x0a, 0x1e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x78, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0f,
	0x2e, 0x74, 0x61, 0x78, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x61, 0x78, 0x1a,
	0x1f, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x54, 0x61, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x9d,
	0x01, 0x0a, 0x20, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x61, 0x78, 0x42, 0x79, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x54, 0x61, 0x78, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x54,
	0x61, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x12, 0x3f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2f, 0x7b, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tax_proto_rawDescOnce sync.Once
	file_tax_proto_rawDescData = file_tax_proto_rawDesc
)

func file_tax_proto_rawDescGZIP() []byte {
	file_tax_proto_rawDescOnce.Do(func() {
		file_tax_proto_rawDescData = protoimpl.X.CompressGZIP(file_tax_proto_rawDescData)
	})
	return file_tax_proto_rawDescData
}

var file_tax_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_tax_proto_goTypes = []interface{}{
	(*Tax)(nil),                        // 0: tax.Tax
	(*TaxTransaction)(nil),             // 1: tax.TaxTransaction
	(*TaxTransactionListResponse)(nil), // 2: tax.TaxTransactionListResponse
	(*TaxTransactionResponse)(nil),     // 3: tax.TaxTransactionResponse
	(*TaxSummary)(nil),                 // 4: tax.TaxSummary
	(*RequestTax)(nil),                 // 5: tax.RequestTax
	(*AdminInfo)(nil),                  // 6: tax.AdminInfo
	(*TaxResponse)(nil),                // 7: tax.TaxResponse
	(*TaxDeleteResponse)(nil),          // 8: tax.TaxDeleteResponse
	(*TaxListResponse)(nil),            // 9: tax.TaxListResponse
	(*Paginate)(nil),                   // 10: tax.Paginate
	(*ResponseLokavenTax)(nil),         // 11: tax.ResponseLokavenTax
	(*TaxLokaven)(nil),                 // 12: tax.TaxLokaven
	(*timestamppb.Timestamp)(nil),      // 13: google.protobuf.Timestamp
}
var file_tax_proto_depIdxs = []int32{
	13, // 0: tax.Tax.date:type_name -> google.protobuf.Timestamp
	13, // 1: tax.Tax.created_at:type_name -> google.protobuf.Timestamp
	13, // 2: tax.Tax.updated_at:type_name -> google.protobuf.Timestamp
	6,  // 3: tax.Tax.admin_info:type_name -> tax.AdminInfo
	13, // 4: tax.TaxTransaction.created_at:type_name -> google.protobuf.Timestamp
	13, // 5: tax.TaxTransaction.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 6: tax.TaxTransactionListResponse.data:type_name -> tax.TaxTransaction
	10, // 7: tax.TaxTransactionListResponse.paginate:type_name -> tax.Paginate
	1,  // 8: tax.TaxTransactionResponse.data:type_name -> tax.TaxTransaction
	0,  // 9: tax.TaxResponse.data:type_name -> tax.Tax
	0,  // 10: tax.TaxListResponse.data:type_name -> tax.Tax
	4,  // 11: tax.TaxListResponse.summary:type_name -> tax.TaxSummary
	10, // 12: tax.TaxListResponse.paginate:type_name -> tax.Paginate
	12, // 13: tax.ResponseLokavenTax.taxs:type_name -> tax.TaxLokaven
	0,  // 14: tax.TaxService.AddTax:input_type -> tax.Tax
	0,  // 15: tax.TaxService.EditTax:input_type -> tax.Tax
	0,  // 16: tax.TaxService.DeleteTax:input_type -> tax.Tax
	0,  // 17: tax.TaxService.DetailTax:input_type -> tax.Tax
	5,  // 18: tax.TaxService.ListTax:input_type -> tax.RequestTax
	5,  // 19: tax.TaxService.LokavenTaxReport:input_type -> tax.RequestTax
	5,  // 20: tax.TaxService.ListTaxByTransactionListByAdmin:input_type -> tax.RequestTax
	1,  // 21: tax.TaxService.DetailTaxByTransactionListByAdmin:input_type -> tax.TaxTransaction
	5,  // 22: tax.TaxService.ListTaxByTransactionListByUser:input_type -> tax.RequestTax
	1,  // 23: tax.TaxService.DetailTaxByTransactionListByUser:input_type -> tax.TaxTransaction
	7,  // 24: tax.TaxService.AddTax:output_type -> tax.TaxResponse
	7,  // 25: tax.TaxService.EditTax:output_type -> tax.TaxResponse
	8,  // 26: tax.TaxService.DeleteTax:output_type -> tax.TaxDeleteResponse
	7,  // 27: tax.TaxService.DetailTax:output_type -> tax.TaxResponse
	9,  // 28: tax.TaxService.ListTax:output_type -> tax.TaxListResponse
	11, // 29: tax.TaxService.LokavenTaxReport:output_type -> tax.ResponseLokavenTax
	2,  // 30: tax.TaxService.ListTaxByTransactionListByAdmin:output_type -> tax.TaxTransactionListResponse
	3,  // 31: tax.TaxService.DetailTaxByTransactionListByAdmin:output_type -> tax.TaxTransactionResponse
	2,  // 32: tax.TaxService.ListTaxByTransactionListByUser:output_type -> tax.TaxTransactionListResponse
	3,  // 33: tax.TaxService.DetailTaxByTransactionListByUser:output_type -> tax.TaxTransactionResponse
	24, // [24:34] is the sub-list for method output_type
	14, // [14:24] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_tax_proto_init() }
func file_tax_proto_init() {
	if File_tax_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tax_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tax_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaxTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tax_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaxTransactionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tax_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaxTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tax_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaxSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tax_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tax_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tax_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tax_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaxDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tax_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaxListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tax_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paginate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tax_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseLokavenTax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tax_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaxLokaven); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tax_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tax_proto_goTypes,
		DependencyIndexes: file_tax_proto_depIdxs,
		MessageInfos:      file_tax_proto_msgTypes,
	}.Build()
	File_tax_proto = out.File
	file_tax_proto_rawDesc = nil
	file_tax_proto_goTypes = nil
	file_tax_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TaxServiceClient is the client API for TaxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaxServiceClient interface {
	AddTax(ctx context.Context, in *Tax, opts ...grpc.CallOption) (*TaxResponse, error)
	EditTax(ctx context.Context, in *Tax, opts ...grpc.CallOption) (*TaxResponse, error)
	DeleteTax(ctx context.Context, in *Tax, opts ...grpc.CallOption) (*TaxDeleteResponse, error)
	DetailTax(ctx context.Context, in *Tax, opts ...grpc.CallOption) (*TaxResponse, error)
	ListTax(ctx context.Context, in *RequestTax, opts ...grpc.CallOption) (*TaxListResponse, error)
	LokavenTaxReport(ctx context.Context, in *RequestTax, opts ...grpc.CallOption) (*ResponseLokavenTax, error)
	ListTaxByTransactionListByAdmin(ctx context.Context, in *RequestTax, opts ...grpc.CallOption) (*TaxTransactionListResponse, error)
	DetailTaxByTransactionListByAdmin(ctx context.Context, in *TaxTransaction, opts ...grpc.CallOption) (*TaxTransactionResponse, error)
	ListTaxByTransactionListByUser(ctx context.Context, in *RequestTax, opts ...grpc.CallOption) (*TaxTransactionListResponse, error)
	DetailTaxByTransactionListByUser(ctx context.Context, in *TaxTransaction, opts ...grpc.CallOption) (*TaxTransactionResponse, error)
}

type taxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaxServiceClient(cc grpc.ClientConnInterface) TaxServiceClient {
	return &taxServiceClient{cc}
}

func (c *taxServiceClient) AddTax(ctx context.Context, in *Tax, opts ...grpc.CallOption) (*TaxResponse, error) {
	out := new(TaxResponse)
	err := c.cc.Invoke(ctx, "/tax.TaxService/AddTax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) EditTax(ctx context.Context, in *Tax, opts ...grpc.CallOption) (*TaxResponse, error) {
	out := new(TaxResponse)
	err := c.cc.Invoke(ctx, "/tax.TaxService/EditTax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) DeleteTax(ctx context.Context, in *Tax, opts ...grpc.CallOption) (*TaxDeleteResponse, error) {
	out := new(TaxDeleteResponse)
	err := c.cc.Invoke(ctx, "/tax.TaxService/DeleteTax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) DetailTax(ctx context.Context, in *Tax, opts ...grpc.CallOption) (*TaxResponse, error) {
	out := new(TaxResponse)
	err := c.cc.Invoke(ctx, "/tax.TaxService/DetailTax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) ListTax(ctx context.Context, in *RequestTax, opts ...grpc.CallOption) (*TaxListResponse, error) {
	out := new(TaxListResponse)
	err := c.cc.Invoke(ctx, "/tax.TaxService/ListTax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) LokavenTaxReport(ctx context.Context, in *RequestTax, opts ...grpc.CallOption) (*ResponseLokavenTax, error) {
	out := new(ResponseLokavenTax)
	err := c.cc.Invoke(ctx, "/tax.TaxService/LokavenTaxReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) ListTaxByTransactionListByAdmin(ctx context.Context, in *RequestTax, opts ...grpc.CallOption) (*TaxTransactionListResponse, error) {
	out := new(TaxTransactionListResponse)
	err := c.cc.Invoke(ctx, "/tax.TaxService/ListTaxByTransactionListByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) DetailTaxByTransactionListByAdmin(ctx context.Context, in *TaxTransaction, opts ...grpc.CallOption) (*TaxTransactionResponse, error) {
	out := new(TaxTransactionResponse)
	err := c.cc.Invoke(ctx, "/tax.TaxService/DetailTaxByTransactionListByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) ListTaxByTransactionListByUser(ctx context.Context, in *RequestTax, opts ...grpc.CallOption) (*TaxTransactionListResponse, error) {
	out := new(TaxTransactionListResponse)
	err := c.cc.Invoke(ctx, "/tax.TaxService/ListTaxByTransactionListByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) DetailTaxByTransactionListByUser(ctx context.Context, in *TaxTransaction, opts ...grpc.CallOption) (*TaxTransactionResponse, error) {
	out := new(TaxTransactionResponse)
	err := c.cc.Invoke(ctx, "/tax.TaxService/DetailTaxByTransactionListByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaxServiceServer is the server API for TaxService service.
type TaxServiceServer interface {
	AddTax(context.Context, *Tax) (*TaxResponse, error)
	EditTax(context.Context, *Tax) (*TaxResponse, error)
	DeleteTax(context.Context, *Tax) (*TaxDeleteResponse, error)
	DetailTax(context.Context, *Tax) (*TaxResponse, error)
	ListTax(context.Context, *RequestTax) (*TaxListResponse, error)
	LokavenTaxReport(context.Context, *RequestTax) (*ResponseLokavenTax, error)
	ListTaxByTransactionListByAdmin(context.Context, *RequestTax) (*TaxTransactionListResponse, error)
	DetailTaxByTransactionListByAdmin(context.Context, *TaxTransaction) (*TaxTransactionResponse, error)
	ListTaxByTransactionListByUser(context.Context, *RequestTax) (*TaxTransactionListResponse, error)
	DetailTaxByTransactionListByUser(context.Context, *TaxTransaction) (*TaxTransactionResponse, error)
}

// UnimplementedTaxServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTaxServiceServer struct {
}

func (*UnimplementedTaxServiceServer) AddTax(context.Context, *Tax) (*TaxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTax not implemented")
}
func (*UnimplementedTaxServiceServer) EditTax(context.Context, *Tax) (*TaxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTax not implemented")
}
func (*UnimplementedTaxServiceServer) DeleteTax(context.Context, *Tax) (*TaxDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTax not implemented")
}
func (*UnimplementedTaxServiceServer) DetailTax(context.Context, *Tax) (*TaxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailTax not implemented")
}
func (*UnimplementedTaxServiceServer) ListTax(context.Context, *RequestTax) (*TaxListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTax not implemented")
}
func (*UnimplementedTaxServiceServer) LokavenTaxReport(context.Context, *RequestTax) (*ResponseLokavenTax, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LokavenTaxReport not implemented")
}
func (*UnimplementedTaxServiceServer) ListTaxByTransactionListByAdmin(context.Context, *RequestTax) (*TaxTransactionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaxByTransactionListByAdmin not implemented")
}
func (*UnimplementedTaxServiceServer) DetailTaxByTransactionListByAdmin(context.Context, *TaxTransaction) (*TaxTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailTaxByTransactionListByAdmin not implemented")
}
func (*UnimplementedTaxServiceServer) ListTaxByTransactionListByUser(context.Context, *RequestTax) (*TaxTransactionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaxByTransactionListByUser not implemented")
}
func (*UnimplementedTaxServiceServer) DetailTaxByTransactionListByUser(context.Context, *TaxTransaction) (*TaxTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailTaxByTransactionListByUser not implemented")
}

func RegisterTaxServiceServer(s *grpc.Server, srv TaxServiceServer) {
	s.RegisterService(&_TaxService_serviceDesc, srv)
}

func _TaxService_AddTax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tax)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).AddTax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tax.TaxService/AddTax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).AddTax(ctx, req.(*Tax))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_EditTax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tax)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).EditTax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tax.TaxService/EditTax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).EditTax(ctx, req.(*Tax))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_DeleteTax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tax)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).DeleteTax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tax.TaxService/DeleteTax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).DeleteTax(ctx, req.(*Tax))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_DetailTax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tax)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).DetailTax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tax.TaxService/DetailTax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).DetailTax(ctx, req.(*Tax))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_ListTax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTax)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).ListTax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tax.TaxService/ListTax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).ListTax(ctx, req.(*RequestTax))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_LokavenTaxReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTax)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).LokavenTaxReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tax.TaxService/LokavenTaxReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).LokavenTaxReport(ctx, req.(*RequestTax))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_ListTaxByTransactionListByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTax)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).ListTaxByTransactionListByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tax.TaxService/ListTaxByTransactionListByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).ListTaxByTransactionListByAdmin(ctx, req.(*RequestTax))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_DetailTaxByTransactionListByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaxTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).DetailTaxByTransactionListByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tax.TaxService/DetailTaxByTransactionListByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).DetailTaxByTransactionListByAdmin(ctx, req.(*TaxTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_ListTaxByTransactionListByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTax)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).ListTaxByTransactionListByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tax.TaxService/ListTaxByTransactionListByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).ListTaxByTransactionListByUser(ctx, req.(*RequestTax))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_DetailTaxByTransactionListByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaxTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).DetailTaxByTransactionListByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tax.TaxService/DetailTaxByTransactionListByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).DetailTaxByTransactionListByUser(ctx, req.(*TaxTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaxService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tax.TaxService",
	HandlerType: (*TaxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTax",
			Handler:    _TaxService_AddTax_Handler,
		},
		{
			MethodName: "EditTax",
			Handler:    _TaxService_EditTax_Handler,
		},
		{
			MethodName: "DeleteTax",
			Handler:    _TaxService_DeleteTax_Handler,
		},
		{
			MethodName: "DetailTax",
			Handler:    _TaxService_DetailTax_Handler,
		},
		{
			MethodName: "ListTax",
			Handler:    _TaxService_ListTax_Handler,
		},
		{
			MethodName: "LokavenTaxReport",
			Handler:    _TaxService_LokavenTaxReport_Handler,
		},
		{
			MethodName: "ListTaxByTransactionListByAdmin",
			Handler:    _TaxService_ListTaxByTransactionListByAdmin_Handler,
		},
		{
			MethodName: "DetailTaxByTransactionListByAdmin",
			Handler:    _TaxService_DetailTaxByTransactionListByAdmin_Handler,
		},
		{
			MethodName: "ListTaxByTransactionListByUser",
			Handler:    _TaxService_ListTaxByTransactionListByUser_Handler,
		},
		{
			MethodName: "DetailTaxByTransactionListByUser",
			Handler:    _TaxService_DetailTaxByTransactionListByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tax.proto",
}
